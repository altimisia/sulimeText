{
	"folder_history":
	[
		"/E/exe/BE/須賀川マージ対応/ADD_VUP/TBE180301_01_3601",
		"/C/Users/nakaima/work/memo",
		"/C/Users/nakaima/Documents/GitHub/Gemini",
		"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM"
	],
	"last_version": 3143,
	"last_window_id": 70,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 730.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"me",
						"Me"
					],
					[
						"plui",
						"ctlPLUinput"
					],
					[
						"バーコードリーダー",
						"バーコードリーダー有効化"
					],
					[
						"bar",
						"BarcodeDisable"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 490.0,
				"last_filter": ":w",
				"selected_items":
				[
					[
						":w",
						":w - Save"
					],
					[
						":indent",
						"Indentation: Reindent Lines"
					],
					[
						":spaces",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":vb",
						"Set Syntax: VB.NET"
					],
					[
						":traili",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":trailing",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":trailin",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":close",
						"Preferences: Package Control Settings – User"
					],
					[
						":install",
						"Package Control: Install Package"
					],
					[
						":remove",
						"Package Control: Remove Package"
					],
					[
						":enco",
						"ConvertToUTF8: Reload with Encoding"
					],
					[
						":reload",
						"ConvertToUTF8: Reload with Encoding"
					],
					[
						"Package Control: install package",
						"Package Control: Install Package"
					]
				],
				"width": 609.0
			},
			"console":
			{
				"height": 219.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/C/Users/nakaima/work/memo/画面一覧.txt",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GuiBUT01/GuiBUT012.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GuiBUT01/GuiBUT011.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00130/SPG00130.frm",
				"/C/Users/nakaima/Documents/master_be_dev [a17ad83]/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
				"/C/Users/nakaima/Documents/master_be_dev [a17ad83]/Gemini/SRC/GYM/01_SP/SPG00230/SPG00230.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.bas",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00230/SPG00230.frm",
				"/C/Users/nakaima/work/memo/merge用めも.txt",
				"/C/Users/nakaima/work/memo/VB6.0_tips.txt",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/trailing_spaces.sublime-settings",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/Package Control.sublime-settings",
				"/C/Users/nakaima/work/merge対応/マージ済みソース/SPG00110.frm",
				"/C/Users/nakaima/work/merge対応/マージ済みソース/SPG00110 - コピー.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00111.frm",
				"/E/LogFiles/gm012715.log",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.vbp",
				"/C/Users/nakaima/Desktop/spg00110.txt",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/Default/Default (Windows).sublime-keymap",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/Default (Windows).sublime-keymap"
			],
			"find":
			{
				"height": 29.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"dataevent",
					"Case",
					"dataevent",
					"2018",
					"inputpart_s",
					"ctlshocd1",
					"DMNc_keyhakkou",
					"2018",
					"m_TankaFlg",
					"ctlBaikaTanka1",
					"fnc_setBarcodeProductInfo",
					"dataevent",
					"fnc_inputPart_S",
					"ButSeniFlg",
					"ctlBaikaTanka1",
					"入力した",
					"fnc_BarcodeReaderReEnable",
					"dataevent",
					"ctlBaikaTanka1",
					"Proc",
					"fnc",
					"00050",
					"Case",
					"nakaima",
					"SKBN",
					"nakaima",
					"colSDSET011",
					"p_gymcmnmaster",
					"nakaima",
					"colSDSET011",
					"m_pluBcd",
					"With",
					"Dataevent",
					"nakaima",
					"fnc_inputPart_B",
					"sub_DisplayModeNo",
					"fnc_setPluInfo",
					"Dataevent",
					"fnc_inputPart_B",
					"m_CTL_PROPERTYS",
					"sub_DisplayModeNo",
					"fnc_inputPart_B",
					"戻る",
					"ctlShouhinName3",
					"sub_InputModeEnable",
					"ctlStart",
					"fnc_inputPart_B",
					"戻る",
					"ctlPLU01",
					"ctlshocd1",
					"m_Order",
					"nakaima",
					"fun",
					"funbtn",
					"uctlguibut012",
					"uctlguibut",
					"uctlguibtn",
					"funBtnNo",
					"bunbtnno",
					"funbtnno",
					"fnc_inputPart_B",
					"ctlshocd1",
					"商品コード入力",
					"GMN_Log",
					"fnc_setBarcodeProductInfo",
					"Log",
					"nakaima",
					"rcsData",
					"fnc_setBarcodeProductInfo",
					"nakaima",
					"QrChkInit",
					"nakaima",
					"ctlshocd1",
					"m_Order",
					"nakaima",
					"Log",
					"00230",
					"spg00110.",
					"spg00050",
					"spg00030",
					"gymtrancnv.",
					"gymprd01.",
					"guibut062.ctl",
					"guibut062ctl",
					"gui062.ctl",
					"guibut01.ctl",
					"guibut01",
					"Qr",
					"rpi01",
					"trancnv",
					"guicrd01",
					"vbp",
					"guicrd01.ctl",
					"gtuicrd01.ctl",
					".sql",
					"00050",
					"0005",
					"spg00050",
					"0050",
					"110.frm",
					"230.frm",
					"TranCnv.cls",
					"TranConv.cls",
					"prd01.cls",
					"prd01.bas",
					"but062.ctl",
					"guibut012.ctl",
					"15400.bas",
					"15400",
					"230.vbp",
					"00230.bas",
					"00230.vbp",
					"00110.vbp",
					"00110.bas",
					"00110.",
					"00050",
					"00050.bas",
					"00050",
					"00110.bas",
					"00110.frm",
					"spg00030.frm",
					"geReg.bat",
					"00230.ini",
					"110.ini",
					"GuiBUT011",
					"00030.frm",
					"GuiCRD01.ctl",
					"spg00110.vbp"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"Suuryou3",
					"Suuryou2",
					"Suuryou1",
					"ShoCD3",
					"ShoCD2",
					"ShoCD1",
					"ctlShoCD"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 27.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 53.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"gymbarcodereader.vbp",
						"Gemini\\SRC\\GYM\\10_PARTS\\GymBarcodeReader\\GymBarcodeReader.vbp"
					],
					[
						"gymbarcodereader.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GymBarcodeReader\\GymBarcodeReader.ctl"
					],
					[
						"spg000111.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00111.frm"
					],
					[
						"spg00110.bas",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.bas"
					],
					[
						"spg00110.ini",
						"Gemini\\ENV\\C\\Tatsuno\\GM\\GYMAPL\\INI\\SPG00110.ini"
					],
					[
						"guibut012.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GuiBUT01\\GuiBUT012.ctl"
					],
					[
						"guibut011.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GuiBUT01\\GuiBUT011.ctl"
					],
					[
						"spg00110.f",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"spg01030.fr",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00130\\SPG00130.frm"
					],
					[
						"00110.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"spg00110.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"00230.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00230\\SPG00230.frm"
					],
					[
						"merge",
						"memo\\merge用めも.txt"
					],
					[
						"mer",
						"memo\\merge用めも.txt"
					],
					[
						"vb",
						"memo\\VB6.0_tips.txt"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 207.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 1547.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"me",
						"Me"
					],
					[
						"plui",
						"ctlPLUinput"
					],
					[
						"バーコードリーダー",
						"バーコードリーダー有効化"
					],
					[
						"bar",
						"BarcodeDisable"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "master_be_dev\na17ad83c2dbe86acbae9f479fd2aaa06e8d57fff\n\nTBE171215_02_未登録のバーコード情報をPLUへ登録\nb9491700faaeab606dbdbe6d41d0e046340ea65c\n\n\nこれらをマージ\n\n\nmaster_be_dev\n|\n|\n|\n|      TBE171215_02_未登録のバーコード情報をPLUへ登録\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiBUT06.ocx \t\t\t\t\t\t\t\t\tok.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiPLU01.ocx \t\t\t\t\t\t\t\t\tok.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPG00230.exe \t\t\t\t\t\t\t\t\tok.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPG00110.exe\t\t\t\t\t\t\t\t\tok.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE171215_02_3497_SPG00230.sql \tFile Add \t\t\t\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE171215_02_3390.sql \t\t\tFile Add \t\t\t\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/INI/SPG00230.ini \t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00230/SPG00230.bas \t\t\tadd only. no conflict. \t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00230/SPG00230.frm\t\t\t\tadd, upd. no conflict. \t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00230/SPG00230.vbp\t\t\t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiBUT06/GuiBUT06.vbp \t\t\tこれは変更する必要あるのか…？\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiBUT06/GuiBUT062.ctl \t\tadd only. no conflict. \t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/INI/SPG00110.ini \t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/TOOLS/geReg.bat \t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/TOOLS/geUnReg.bat \t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00110/SPG00110.bas \t\t\tadd only. no conflict. \t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00110/SPG00110.frm \t\t\tmerge.\t\t\t\t\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00110/SPG00110.vbp \t\t\tadd only. no conflict.\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiPLU01/GuiPLU01.ctl \t\t\tFile Add \t\t\t\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiPLU01/GuiPLU01.vbp \t\t\tFile Add \t\t\t\t\tOK.\n|\t   |\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiPLU01/basGuiPLU01.bas \t\tFile Add \t\t\t\t\tOK.\n|      |\n|      |\n|     TBE171215_01_須賀川瓦斯_現地不具合対応\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiCRD01.ocx\t\tctlが変わってないのでocxも作成不要.\n|\t  |\t\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE171215_01_3376_GuiCRD01.sql \tFile Add \t\t\t\tOK.\n|\t  |\t\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE171215_01_3368_GymReceipt.sql \tFile Add \t\t\t\tOK.\n|\t  |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiCRD01/GuiCRD01.ctl \t\t\t須賀川を取り込んだ上で改修してるみたいなのでマージ不要.\n|     |\n|     |\n|     |\n|    TBE170927_01_須賀川瓦斯・PLU時間帯値引対応\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiBUT01.ocx \t\t\t\t\t\t\t\t\tok.\n|\t |\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GymPRD01.dll \t\t\t\t\t\t\t\t\tok.\n|\t |\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPG00110.exe \t\t\t\t\t\t\t\t\tok.\n|\t |\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPR15400.exe \t\t\t\t\t\t\t\t\tok.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00110/SPG00110.frm \t\t\tmerge.\t\t\t\t\t\tOK.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiBUT01/GuiBUT012.ctl \t\tadd only. no conflict.\t\tOK.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GymPRD01/basGymPRD01.bas \t\tadd only. no conflict.\t\tOK.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GymPRD01/clsGymPRD01.cls \t\tadd only. no conflict.\t\tOK.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15400/SPR15400.bas \t\t\tadd only. no conflict. \t\tOK.\n|\t |\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15400/SPR15400.vbp \t\t\tパスのみの変更なのでマージしない\n|    |\n|    |\n|    |\n+---TBE170804_01_Gemini標準仕様 須賀川ガス\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPG00030.exe \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPG00110.exe \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/SPR15120.exe \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiRPI01.ocx \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GuiBUT01.ocx \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/BIN/GymTranCnv.dll \t\t\t\t\t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15120/SPR15121.frm \t\t\tFile Add \t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15120/SPR15120.frm \t\t\tFile Add \t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00030/SPG00030.frm \t\t\tadd only. no conflict.\tOK.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPG00110/SPG00110.frm \t\t\tmerge.\t\t\t\t\tOK.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15120/SPR15120.bas \t\t\tFile Add \t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/01_SP/SPR15120/SPR15120.vbp\t\t\t\tFile Add \t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiRPI01/GuiRPI01.ctl \t\t\t差分なし\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiBUT01/GuiBUT012.ctl \t\t差分なし\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GuiRPI01/GuiRPI01.vbp \t\t\t差分なし\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GymTranCnv/GymTranCnv.vbp \t\t差分なし\n|\t\t\t\t\t\t\t\t\t\t\tSRC/GYM/10_PARTS/GymTranCnv/clsGymTranCnv.cls \tadd, upd. no conflict.\tOK.\n|\t\t\t\t\t\t\t\t\t\t\tENV/C/Tatsuno/GM/GYMAPL/INI/SPR15120.ini \t\tFile Add \t\t\t\tok.\n|\t\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE170804_01_2970_GymTranCnv.sql \tFile Add \t\t\t\tOK.\n|\t\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE170804_01_2960_SDSYO004.sql \tFile Add \t\t\t\tOK.\n|\t\t\t\t\t\t\t\t\t\t\tENV/DB_SQL/BE/TBE170804_01_2971_SPR15120.sql \tFile Add \t\t\t\tOK.\n|\nmaster_be_dev",
					"file": "/C/Users/nakaima/work/memo/merge用めも.txt",
					"file_size": 4740,
					"file_write_time": 131644561908520325,
					"settings":
					{
						"buffer_size": 4502,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"contents": "VERSION 5.00\nObject = \"{886410AC-E106-4DF9-909E-EF6D2F379A76}#9.4#0\"; \"GuiFrame.ocx\"\nObject = \"{64C59CBF-15E7-44EB-9609-361CF1BDCBC9}#1.0#0\"; \"PrinterIF.ocx\"\nObject = \"{02DA9408-D3C0-4A06-9B56-5B5B51F64E16}#3.1#0\"; \"GymPrintReq.ocx\"\nObject = \"{D4CBA87C-0DA7-4FD3-830C-356AC6D21E8F}#1.0#0\"; \"DrawerIF.ocx\"\nObject = \"{6EA5B988-9F87-4CC7-B5F7-4F43C6B21136}#2.3#0\"; \"GymCardRader.ocx\"\nObject = \"{ACC632E0-5A0E-407C-916D-25357E5897C0}#1.0#0\"; \"GymBarcodeReader.ocx\"\nBegin VB.Form frmSPG00110\n   BackColor       =   &H00FFCC99&\n   BorderStyle     =   3  '固定ﾀﾞｲｱﾛｸﾞ\n   ClientHeight    =   6360\n   ClientLeft      =   1485\n   ClientTop       =   1485\n   ClientWidth     =   13830\n   ControlBox      =   0   'False\n   LinkTopic       =   \"Form14\"\n   LockControls    =   -1  'True\n   MaxButton       =   0   'False\n   MinButton       =   0   'False\n   Moveable        =   0   'False\n   ScaleHeight     =   6360\n   ScaleWidth      =   13830\n   ShowInTaskbar   =   0   'False\n   Begin VB.Timer tmrBarcodeWatch\n      Enabled         =   0   'False\n      Interval        =   5000\n      Left            =   11760\n      Top             =   3120\n   End\n   Begin GymBarcodeReader.uctlGymBarcodeReader uctlGymBarcodeReader1\n      Height          =   1095\n      Left            =   9840\n      TabIndex        =   5\n      Top             =   3000\n      Visible         =   0   'False\n      Width           =   1695\n      _ExtentX        =   2990\n      _ExtentY        =   1931\n   End\n   Begin GymCardRader.uctlGymCardRader uctlGymCardRader1\n      Height          =   735\n      Left            =   10080\n      TabIndex        =   4\n      Top             =   4680\n      Visible         =   0   'False\n      Width           =   2775\n      _ExtentX        =   4895\n      _ExtentY        =   1296\n   End\n   Begin DRAWERIFLib.DrawerIF DrawerIF1\n      Height          =   1095\n      Left            =   4920\n      TabIndex        =   3\n      Top             =   600\n      Visible         =   0   'False\n      Width           =   1335\n      _Version        =   65536\n      _ExtentX        =   2355\n      _ExtentY        =   1931\n      _StockProps     =   0\n   End\n   Begin GymPrintReq.uctlGymPrintReq uctlGymPrintReq1\n      Height          =   1215\n      Left            =   7560\n      TabIndex        =   2\n      Top             =   4680\n      Visible         =   0   'False\n      Width           =   3495\n      _ExtentX        =   6165\n      _ExtentY        =   2143\n   End\n   Begin PRINTERIFLib.PrinterIF PrinterIF1\n      Height          =   1215\n      Left            =   2640\n      TabIndex        =   0\n      Top             =   480\n      Visible         =   0   'False\n      Width           =   1455\n      _Version        =   65536\n      _ExtentX        =   2566\n      _ExtentY        =   2143\n      _StockProps     =   0\n   End\n   Begin GuiFrame.uctlGuiFrame uctlGuiFrame1\n      Height          =   6450\n      Left            =   0\n      TabIndex        =   1\n      Top             =   0\n      Width           =   15360\n      _ExtentX        =   27093\n      _ExtentY        =   11377\n      GuiModel        =   \"\"\n      GuiServerName   =   \"MainWnd\"\n      GuiIniFileName  =   \"\"\n      GuiKeyHookEnabled=   -1  'True\n   End\nEnd\nAttribute VB_Name = \"frmSPG00110\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\nOption Explicit\n'*****************************************************************\n'* 処理内容：売上\n'* 作成日  ：2012/07/12\n'* 作成者  ：S.Ochiai\n'* 変更履歴：2014/12/17 TBE140912_01_33：後払い対応 N.Aoki\n'*         ：\n'*****************************************************************\n\nPrivate Declare Sub Sleep Lib \"kernel32\" (ByVal h_MilliSeconds As Long)\nPrivate m_receipt As New GymReceipt.clsGymReceipt   'レシート印字プロセス\n\n'定数-------------------------------------------------------------\nPrivate c_iniFileNm1 As String\nPrivate Const c_strSyoriKbn_Kyuyu As String = \"103\"\n#Const DBG_MODE = True                              'デバッグモード\nPrivate Const c_m_gidForm24No As Long = \"110025\"    '「消費税額を入力してください。」\n\nPrivate mMutexGymRunning As New clsGymMutex\nPrivate Const MUTEX_GYMRUNNING As String = \"MutexGymRunning\"\n\n'モジュール変数---------------------------------------------------\n'コントロールデータ制御\nPrivate m_CTL_PROPERTYS() As GymCmnGuiFrame.CTL_PROPERTYS\n'List_Itemに設定した全てのコントロールを設定して使用します。\n'タブオーダー,データベースから取得したマスタデータ,データグリッドの情報\n'を格納してデータの操作、画面の制御を行います\n\nPrivate m_Order                   As Integer          '現在のオーダー番号を保持する\nPrivate m_WaitCancel              As Long             'キャンセル不可のタイミングでキャンセルが押下された場合の制御(0より大きい：キャンセル処理待ち、0より小さい：戻る処理待ち)\nPrivate mShowMonitor              As String           '処理区分第一段：終了処理（レーンモニター）\nPrivate mEndMode                  As String           '処理区分第一段：終了処理（売上処理）\nPrivate m_strSyoriKbn             As String           '処理終了時に次回起動が必要な処理区分を設定\nPrivate m_CardCheckFASE           As Long             '兼用カード入力時の対応のため、フェイズを利用する\nPrivate m_CardTransmitting        As Long             'カードオーダー多重カードチェック防止フラグ(1:カードチェック済)\nPrivate m_SalesDecideTransmitting As Long             '売上確定多重通信防止フラグ(0:売上未確定 10:ｵｰｿﾘ通信中 19:ｵｰｿﾘ通信済 20:netﾌﾟﾘｶ通信中\n                                                      '                           29:netﾌﾟﾘｶ通信済 30:CRM通信中 39:CRM通信済 99:売上確定中)\nPrivate m_Header                  As New clsGymHeader\nPrivate m_DistributionCollect     As New Collection\nPrivate m_DiscountDetailCollect   As New Collection   'CRM値引明細クラスコレクション\nPrivate m_GiftCertificatesCollect As New Collection   'CRM商品券情報（サービス券／商品券クラス）コレクション\nPrivate m_ServiceTicketCollect    As New Collection   'CRMサービス券情報（サービス券／商品券クラス）コレクション\nPrivate m_QRCoupon                As New clsGymQR\nPrivate m_TankaFlg                As Boolean          '強制単価キー押下情報を保持する\nPrivate m_Sign                    As Long\nPrivate m_AZKFirstFlg             As Boolean          '預り金入力初回起動フラグ   True:初回起動\nPrivate m_intIdleflg              As Integer          'アイドル画面の指定 1-供給 2-レーンモニタ\nPrivate mGuiInitFlags             As New Dictionary\nPrivate mDeactivating             As Boolean          '非アクティブ化中\nPrivate lngSDSET025TouchCount     As Long             '係員パネルマスタ\nPrivate m_RPIObj                  As String           '使用する利用ポイント入力パーツ名\nPrivate m_RPIOrder                As Long             '利用ポイント入力項目オーダー値\nPrivate m_RPIIDummyOrder          As Long             '利用ポイント入力ダミー項目オーダー値\nPrivate m_QrNebikiKbn             As String           'ＱＲ値引き区分 0-単価値引額 1-単価値引率 2-金額値引額 3-金額値引率 4-数量サービス\nPrivate m_QrNebikiVal             As String           '値引額\nPrivate m_ChgGenkin               As String           '現金代表コード切替確認用\nPrivate m_VipDisp                 As Boolean          'VIP併用押下確認フラグ\nPrivate m_VipUse                  As Boolean          'VIP併用処理中フラグ\nPrivate m_wkUsePoint              As Long             '利用ポイント退避\nPrivate m_BarcodeState            As Boolean          '\nPrivate m_PluBcd                  As String           'PLUバーコード登録\n\nPrivate Enum Enum_CardCheckFASE\n    CC_negCheckEnd = 1\n    CC_netPricaCheckEnd = 2\n    CC_PointCardCheckEnd = 3\nEnd Enum\n\nPrivate Enum Enum_SalesDecideFase\n    SD_None = 0\n    SD_AuthoriStart = 10\n    SD_AuthoriEnd = 19\n    SD_NetPricaStart = 20\n    SD_NetPricaEnd = 29\n    SD_PurchaseRltStart = 30\n    SD_PurchaseRltEnd = 39\n    SD_End = 99\nEnd Enum\n\n'iniファイルの_List_Item名を上から順番に設定する\nPrivate Enum EnumOrderNo          ' 入力オーダー番号\n    ctlSMN01                      '処理選択メニュー（アイドル画面）\n    ctlSMN05                      '処理選択メニュー（保留データ表示画面）\n    ctlSMN03                      '処理選択メニュー（決済カード入力）\n    ctltky01                      'テンキー\n    ctlZDK01                      'CRM残高表示\n    ctlZDKTotalCaption01\n    ctlZDKTotalCaption02\n    ctlZDKTotalCaption03\n    ctlZDKGuiTXT01\n    ctlZDKGuiTXT02\n    ctlZDKGuiTXT03\n    ctlMotohiduke                 '元日付入力\n    ctlHRY01Dummy\n    ctlHRY01\n    ctlCardDummy                  'カード入力\n    ctlStart                      'カード入力オブジェクト\n    ctlRPT                        '利用ポイント入力\n    ctlRiyouPointInput            '利用ポイント入力\n    ctlRiyouPointInputDummy       '利用ポイント入力ダミー（非表示の入力待ち部)\n    ctlRPT2                       '利用ポイント入力２(プリカ併用)\n    ctlRiyouPointInput2           '利用ポイント入力２\n    ctlRiyouPointInputDummy2      '利用ポイント入力ダミー２（非表示の入力待ち部)\n    ctlCard02Dummy                'カード入力（２枚入）\n    ctlCard02                     'カード入力（２枚入）オブジェクト\n    ctlJitsushaban                '実車番入力\n    ctlCard02_Jitsushaban         '実車番入力（２枚入）\n    ctlKakariin                   '係員入力\n    ctlKakariinM                  '係員入力メニュー\n    ctlAUT02                      'ネガチェック入力（フォーム表示範囲外）\n    ctlNegaHide                   'ネガチェック入力ダミーフォーカス\n    ctlBUT1                       '物流明細開始\n    ctlshocd1                     '商品コード入力1\n    ctlKazeiKubun1\n    ctlHoseNo1\n    ctlSuuRyou1\n    ctlBaikaTanka1\n    ctlKingaku1\n    ctlShouhinName1\n    ctlGenkaTanka1\n    ctlshocd2                     '商品コード入力2\n    ctlKazeiKubun2\n    ctlHoseNo2\n    ctlSuuRyou2\n    ctlBaikaTanka2\n    ctlKingaku2\n    ctlShouhinName2\n    ctlGenkaTanka2\n    ctlshocd3                     '商品コード入力3\n    ctlKazeiKubun3\n    ctlHoseNo3\n    ctlSuuRyou3\n    ctlBaikaTanka3\n    ctlKingaku3\n    ctlShouhinName3\n    ctlGenkaTanka3\n    ctlAUT01\n    ctlPayment\n    ctlPaymentCount\n    ctlSKB02                      'クレジット入力取消コントロール\n    ctlMotoHizuke\n    ctlMotoTTsuban\n    ctlAuthoriNumber\n    ctlEnd\n    ctlPLU01                      'PLU登録コントロール\n    ctlPLUinput\n    ctlSelling\n    ctlPLUEnd\n    ctlAZK01                      '預かり金入力コントロール\n    ctlDeposit\n    ctlAZKEnd\nEnd Enum\n\n'パブリック変数---------------------------------------------------\nPublic p_KikiSyubetsu As Integer    'OPT-4000フル=2 それ以外：POS\nPublic WithEvents m_clsNWCRMSIF As clsINCNWCRMS       'NWCRMS共通モジュール\nAttribute m_clsNWCRMSIF.VB_VarHelpID = -1\n\n'*****************************************************************\n' 機能　　：画面の大きさにあわせコントロールの比率を変化させる。\n' 引数　　：\n' 戻値　　：\n' 作成者　：Miyamoto F.\n' 作成日付：2012/08/28\n' 変更履歴：\n'*****************************************************************\nSub sun_ControlRatioSet()\n    Me.Width = 12000\n    Me.Height = 5145\n    Me.Top = 3180\n    Me.Left = 0\nEnd Sub\n\n'*****************************************************************\n' 機能　　：フォームロード\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub Form_Load()\n\n    uctlGuiFrame1.GUI_PostData \"ModeKeyWnd\", \"7,\" & SKBN & \",\" & uctlGuiFrame1.GetHWnd\n\n    p_KikiSyubetsu = p_GymCmnSysSts.GMN_KikiSyubetsu\n\n    If p_KikiSyubetsu = 2 Then\n        '画面の大きさにあわせコントロールの比率を変化させる。\n        Call sun_ControlRatioSet\n        c_iniFileNm1 = \"SOG00110.ini\"\n    Else\n        c_iniFileNm1 = \"SPG00110.ini\"\n    End If\n\n    Call sub_IdleScreen\n\n    Call uctlGuiFrame1.GUI_Create(c_iniFileNm1)\n\n    Call Sub_FormInit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Sub Sub_FormInit(Optional ByVal h_iniFileNm As String)\n    Const c_strProcName As String = \"Sub_FormInit\"\nOn Error GoTo ProcErr\n\n    Dim ix As Integer\n    Dim ret As Integer\n    Dim iret As Long\n\n    'タブオーダーの初期化\n    ReDim m_CTL_PROPERTYS(0)\n    ret = p_GymCmnGuiFrame.GMN_SetTabOrder(uctlGuiFrame1, m_CTL_PROPERTYS)\n\n   'カード入力コントロールとカード制御APIの関連づけ\n    Set uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.GymCardReader = uctlGymCardRader1\n    Set uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.GymCardReader = uctlGymCardRader1\n\n    'テンキーとGuiFrameの関連付け\n    Call uctlGuiFrame1.GUI_GetItem(\"tky01\").object.sub_GuiframeSet(uctlGuiFrame1)\n\n    '処理固有情報の初期化を行います\n    Call sub_Initialize\n\n    'テンキー入力モード設定\n    Call Sub_TenKeyInputModeSet\n\n    'バーコードリーダー有効化\n    Call Me.uctlGymBarcodeReader1.BarcodeEnable\n    m_BarcodeState = True\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：固有情報の初期化処理\n'*****************************************************************\nPrivate Sub sub_Initialize()\n\n    Dim ret             As Long\n    Dim ix              As Long\n    Dim rs              As Recordset\n    Dim m_CURSTAFF      As Long         '係員入力初期値\n    Dim m_STFNM         As String       '係員名初期値\n\n    '---------------各種設定読込---------------\n    Call sub_Configuration\n\n    'サインを初期化\n    m_Sign = 1  '黒伝\n\n    'コントロール内のテキストを全て初期化\n    For ix = 0 To UBound(m_CTL_PROPERTYS()) - 1\n        ret = p_GymCmnGuiFrame.GMN_CtlDataSetText(uctlGuiFrame1, m_CTL_PROPERTYS(ix))\n    Next\n\n    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"KKT01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"ZDK01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"RPI01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"AUT02\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"PLU01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.Clear\n    uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.Clear\n\n    ret = uctlGuiFrame1.GUI_SetVisible(\"SKB02\", False)\n    uctlGuiFrame1.GUI_GetItem(\"SKB02\").object.Clear\n\n    InitGuis Array(\"BUT01\")\n\n   'カード入力コントロールとカード制御APIの関連づけ\n    Set uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.GymCardReader = uctlGymCardRader1\n    Set uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.GymCardReader = uctlGymCardRader1\n    'カード入力コントロールのﾌﾗｸﾞを初期化する\n    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_CardCheckState = 0\n    uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C2_CardCheckState = 0\n\n'    '---------------車番入力有無の設定---------------\n'    '※カードチェック引数参照\n\n    '---------------店内釣銭機接続有無の設定---------------\n\n    '---------------後払い精算有無の設定---------------\n\n\n    '---------------処理区分第一段終了条件の設定---------------\n\n    m_CardTransmitting = 0                  'カードチェック状態のクリア\n    p_ScreenTrans = 0                       '画面遷移ﾌﾗｸﾞのクリア\n    m_SalesDecideTransmitting = SD_None     '売上確定状態のクリア\n\n    '---------------NWCRMS設定初期化---------------\n    If Not m_clsNWCRMSIF Is Nothing Then\n\n        If m_clsNWCRMSIF.glbNWCRMSflg > 0 Then\n    '        ' 保留呼出データはローカル排他解除しない\n    '        ' ローカル排他解除\n    '        UnlockLocalExclcution\n            If m_clsNWCRMSIF.glbCRMflg > 0 And _\n                (m_clsNWCRMSIF.glbCRMflg <> 3) And _\n                (m_clsNWCRMSIF.glbCRMflg <> 9) Then\n                    ' 顧客購買実績問合せ　ｷｬﾝｾﾙ処理\n                    m_clsNWCRMSIF.glbCRMflg = 9 'キャンセル中\n                    ret = m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 2, True, Me)\n                    Exit Sub\n            End If\n        End If\n        Set m_clsNWCRMSIF = New clsINCNWCRMS\n\n        Call m_clsNWCRMSIF.LoadNWCRMS\n        m_clsNWCRMSIF.glbCRMflg = 0\n    Else\n\n        Set m_clsNWCRMSIF = New clsINCNWCRMS\n\n        Call m_clsNWCRMSIF.LoadNWCRMS\n        m_clsNWCRMSIF.glbCRMflg = 0\n    End If\n\n    '利用ポイントパーツ使用設定\n    If m_clsNWCRMSIF.glbNWCRMSflg = 3 Then  'ポイント＆プリカ併用あり\n        m_RPIObj = \"RPI02\"\n        m_RPIOrder = ctlRiyouPointInput2\n        m_RPIIDummyOrder = ctlRiyouPointInputDummy2\n    Else\n        m_RPIObj = \"RPI01\"\n        m_RPIOrder = ctlRiyouPointInput\n        m_RPIIDummyOrder = ctlRiyouPointInputDummy\n    End If\n\n    'CRM残高表示コントロール表示\n    If colSDSET011(\"CRM_NebikiZanCheck\") <> 0 Then '月内給油値引残チェック 0:チェック無し 1:有効(上限あり) 2:有効（上限なし）\n        Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption02).strCtlName, True)\n        Call uctlGuiFrame1.GUI_SetText(Format(0, \"#,##0\"), m_CTL_PROPERTYS(ctlZDKGuiTXT02).strCtlName)\n    End If\n\n    '---------------ネガオーソリチェック設定---------------\n    m_WaitCancel = 0    'キャンセル待ち：初期化\n\n    '---------------データオブジェクトの初期化---------------\n\n    'クーポン情報破棄\n    m_Header.QR.QrChkCancel\n\n    Call sub_HeaderInit(m_Header)\n    Call sub_DistributionInit(m_DistributionCollect)\n\n    Set m_DiscountDetailCollect = New Collection                'CRM値引明細情報の初期化\n    Set m_GiftCertificatesCollect = New Collection              'CRM商品券情報の初期化\n    Set m_ServiceTicketCollect = New Collection                 'CRMサービス券情報の初期化\n\n    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo_Clear\n\n    '---------------係員入力初期値の取得---------------\n    Set rs = fnc_GetSDMNG002()\n    If rs.EOF = True Then\n        m_CURSTAFF = 0\n        m_STFNM = \"\"\n    Else\n        m_CURSTAFF = CLng(rs.Fields(\"現在係員コード\").Value)\n        m_STFNM = CStr(rs.Fields(\"係員名\").Value)\n    End If\n\n    '---------------係員入力有無の設定---------------\n    'フル外設＆各種設定値(係員入力) = 2:屋外のみ or 9:両方入力\n    If p_KikiSyubetsu = 2 And (colSDSET011.Item(\"ServicemanInput\") = 5 Or colSDSET011.Item(\"ServicemanInput\") = 9) Then  'フル外設\n        m_CTL_PROPERTYS(ctlKakariin).TabStop = True\n    'POSまたはSSC ＆各種設定値(係員入力) = 1:本体のみ or 9:両方入力\n    ElseIf p_KikiSyubetsu <> 2 And (colSDSET011.Item(\"ServicemanInput\") = 1 Or colSDSET011.Item(\"ServicemanInput\") = 9) Then\n        m_CTL_PROPERTYS(ctlKakariin).TabStop = True\n    'それ以外は入力なし\n    Else\n        m_CTL_PROPERTYS(ctlKakariin).TabStop = False\n        '初期値の係員コードと係員名をコントロールにセットする\n        With uctlGuiFrame1.GUI_GetItem(\"KKT01\").object\n            ret = .Fun_GetStaffName_StaffCode(m_CURSTAFF)\n            ret = .Sub_DeactivateColorSet\n        End With\n        '入力無しの場合は初期値をセットする\n        m_Header.STAFFCD = m_CURSTAFF   '係員コード\n        m_Header.STAFFNM = m_STFNM      '係員名\n    End If\n\n    m_TrnRecNo = 0                              '保留データレコード通番\n    Set m_HoryuHeader = Nothing                 '保留データヘッダートラン\n    Set m_HoryuDistributionCollect = Nothing    '保留データ物流トラン\n\n    m_HoryuDataCall = 0                         '保留呼出処理中フラグ\n    m_CardInfoExchange = 0                      '保留呼出カードチェック後処理制御\n    m_HoryuSetteiKey = 0                        '保留呼出カードネガチェック制御\n\n    'オーダーを最初の位置に移す\n    m_Order = ctlStart - 1\n    Call sub_NextOrder\n\n    'カード入力コントロールへ処理区分第１段情報を設定\n    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.ShorikubunCode = SKBN\n    uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.ShorikubunCode = SKBN\n\n    If m_intIdleflg = 2 And p_KikiSyubetsu <> 2 Then\n        p_ScreenTrans = 1   '供給からの画面遷移\n\n        Call frmSPG00111.Show(, frmSPG00110)\n        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, 111001)\n    End If\n\n    'ローカル排他解除\n    If Len(strExclusionLocalKAIIN) > 0 Then\n        Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n        strExclusionLocalKAIIN = \"\"\n    End If\n\n    'クーポン欄初期化\n    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CouponName = \"\"\n\n    'VIP併用非表示\n    m_VipDisp = False\n    m_VipUse = False\n    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.VipVisible = m_VipDisp\n\n    '現金代表コード未切替状態\n    m_ChgGenkin = \"0\"\n\n    '利用ポイント初期化\n    m_wkUsePoint = -1\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：アイドル画面判定\n' 引数　　：なし\n' 戻値　　： 1 - 供給がアイドル画面\n' 　　　　： 2 - レーンモニタがアイドル画面\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/04/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_IdleScreen()\n    Const c_strProcName As String = \"sub_IdleScreen\"\nOn Error GoTo ProcErr\n\n    '各種設定の値によって初期表示を行う(0:アイドル画面、1:レーンモニタ画面)\n    If colSDSET011.Item(\"IdolScreenKBN\") = 0 Then\n        '供給がアイドル\n        m_intIdleflg = 1\n    ElseIf colSDSET011.Item(\"IdolScreenKBN\") = 1 Then\n        'レーンモニタがアイドル\n        m_intIdleflg = 2\n    Else\n        '0、1以外が設定されていた場合は、初期画面にアイドル画面を指定\n        m_intIdleflg = 1\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：ヘッダーオブジェクトの初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_HeaderInit(ByRef h_Header As clsGymHeader)\n    Const c_strProcName As String = \"sub_HeaderInit\"\nOn Error GoTo ProcErr\n\n    Dim tStr        As String\n    Dim ret         As Long\n\n    Set h_Header = New clsGymHeader\n\n    'モード名称表示\n\n    '処理名称表示\n    Call p_GymCmnGuiFrame.GMN_DispProcNm(uctlGuiFrame1, SKBN)\n\n    '処理日付表示\n    Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1)\n\n    With h_Header\n        ret = p_GymCmnSysSts.GMN_SyoriHizukeGet(tStr)\n        .SYORIBI = tStr\n        .SYORIKBN1 = SKBN\n        .SYORIKBN2 = 0\n        .SYORIKBN3 = 0\n        .SYORIKBN4 = 0\n        .JYOGAI = 0\n\n        '補助区分表示\n        Call p_GymCmnGuiFrame.GMN_DispHojyoKbnNm(uctlGuiFrame1, CStr(.SYORIKBN2 & .SYORIKBN3 & .SYORIKBN4 & .JYOGAI))\n    End With\n\nProcExit:      '正常終了\n    Exit Sub\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：物流明細オブジェクトの初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_DistributionInit(ByRef h_DistributionCollect As Collection)\n    Const c_strProcName As String = \"sub_DistributionInit\"\nOn Error GoTo ProcErr\n\n    Set h_DistributionCollect = New Collection\n\n    'ヘッダーオブジェクト送信\n    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Header = m_Header\n\n    '課税区分、ホースナンバーコントロールのオーダー無効化\n    m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = False\n    m_CTL_PROPERTYS(ctlHoseNo1).TabStop = False\n    m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = False\n    m_CTL_PROPERTYS(ctlHoseNo2).TabStop = False\n    m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = False\n    m_CTL_PROPERTYS(ctlHoseNo3).TabStop = False\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：フォーム終了時の処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：F.Miyamoto\n' 作成日付：2013/06/06\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub Form_Terminate()\n\n    'スピードアップ対応（終了時に異常終了する不具合対応）\n    DoEvents\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：終了処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiEndRequest()\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiEndRequest\"\nOn Error GoTo ProcErr\n\n    If p_GymCmnSysSts.GMN_KikiSyubetsu <> 2 Then  'モードキーでの切替に対応\n        If m_CardTransmitting > 0 Then\n            GoTo ProcExit\n        End If\n\n        If Not m_clsNWCRMSIF Is Nothing Then\n\n            If m_clsNWCRMSIF.glbNWCRMSflg > 0 Then\n                If m_clsNWCRMSIF.glbCRMflg = 9 Then GoTo ProcExit    'CRM排他解除の多重送信防止\n        '        ' 保留呼出データはローカル排他解除しない\n        '        ' ローカル排他解除\n        '        UnlockLocalExclcution\n                If (m_clsNWCRMSIF.glbCRMflg > 0) And (m_clsNWCRMSIF.glbCRMflg <> 3) Then\n                        m_clsNWCRMSIF.glbCRMflg = 9 'キャンセル中\n                        ' 顧客購買実績問合せ　ｷｬﾝｾﾙ処理\n                        Call m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 2, True, Me)\n\n                End If\n            End If\n        End If\n    End If\n\n    '現金フリー・短縮・車番・顧客検索画面が開いていた場合は閉じる（開いたまま終了すると、エラーが発生する）\n    Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.sub_SyoriSentakuClose\n    Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.sub_SyoriSentakuClose\n\n    '文字入力フォーム又は商品一覧画面を閉じる(商品一覧画がloadされたままとなり、エラーが発生する)\n    uctlGuiFrame1.GUI_GetItem(\"tky01\").object.sub_FromClose\n\n    'パスワード画面が開いていた場合は閉じる\n    If uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.FormShow = True Then\n        Call uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.sub_CloseForm\n    End If\n\n    If Not (m_clsNWCRMSIF Is Nothing) Then Set m_clsNWCRMSIF = Nothing\n    If Not (m_ERR01 Is Nothing) Then Set m_ERR01 = Nothing\n\n    uctlGymCardRader1.CardDisable\n    Call Me.uctlGymBarcodeReader1.BarcodeDisable\n    m_BarcodeState = False\n\n    '各種クリア処理\n    Call p_GymCmnGuiFrame.GMN_EndRequestClear(uctlGuiFrame1)\n\n    Call GMN_Log(\"EXE正常終了\", c_strProcName, LL_INFO)\n\nProcExit:      '正常終了\n    Exit Sub\nProcErr:       '異常終了\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：データ受信\n' 引数　　：\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2012/10/29\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiGetData(ByVal sData As String)\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiGetData(F1)\"\nOn Error GoTo ProcErr\n\n    Call GMN_Log(\"他ウィンドウよりデータ受信処理 引数（Data）：[\" & sData & \"]\", c_strProcName, LL_INFO)\n\n    Dim a_strDataList() As String       '受信データ\n    Dim ret             As Long\n\n    Static lastActivate As Boolean\n\n    a_strDataList = Split(sData, \",\")\n\n    Select Case a_strDataList(0)\n\n        '///////////////////////////////////////////////////////////////\n        '//             レーンモニター から受信                     ////\n        '///////////////////////////////////////////////////////////////\n\n        '画面のクローズ\n        Case \"close_frmSPG00111\"\n\n            p_ScreenTrans = 0   '画面遷移中ﾌﾗｸﾞの初期化\n\n            Call Unload(frmSPG00111)\n\n            If m_intIdleflg = 2 Then\n                uctlGuiFrame1.Visible = True\n            End If\n\n            tmrBarcodeWatch.Enabled = True\n            Call Me.uctlGymBarcodeReader1.BarcodeEnable\n            m_BarcodeState = True\n\n        '処理の終了\n        Case \"close_Form\"\n\n            '子フォームのクローズ\n            Call Unload(frmSPG00111)\n\n            '処理の終了\n            uctlGuiFrame1.GUI_PostEndRequest \"MainWnd\"\n\n            tmrBarcodeWatch.Enabled = True\n            Call Me.uctlGymBarcodeReader1.BarcodeEnable\n            m_BarcodeState = True\n\n        '会員情報照会画面の表示\n        Case \"Show_frmSPG00112\"\n\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n\n            'レーンモニタークローズ\n            Call Unload(frmSPG00111)\n\n            '会員情報照会画面表示\n            Call frmSPG00112.Show\n\n        '///////////////////////////////////////////////////////////////\n        '//             会員情報照会画面の表示 から受信             ////\n        '///////////////////////////////////////////////////////////////\n        '会員情報照会画面表示の終了\n        Case \"close_frmSPG00112\"\n\n            '会員情報照会画面表示のクローズ\n            Call Unload(frmSPG00112)\n\n            'レーンモニター表示\n            Call frmSPG00111.Show\n\n            Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, True)\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n\n        Case \"Activate\"\n            mDeactivating = False\n            'フル外設以外(POS、SSC)の場合\n            If p_KikiSyubetsu <> 2 Then\n                Call sub_Initialize\n            End If\n\n            uctlGuiFrame1.SetHWnd\n            If p_KikiSyubetsu <> 2 Then\n                uctlGuiFrame1.Top = 0\n                uctlGuiFrame1.Left = 0\n            End If\n\n            uctlGymCardRader1.CardEnable\n            tmrBarcodeWatch.Enabled = True\n            Call Me.uctlGymBarcodeReader1.BarcodeEnable\n            m_BarcodeState = True\n\n            lastActivate = True\n\n        Case \"Deactivate\"\n            mDeactivating = True\n            If lastActivate = True Then\n                lastActivate = False\n                ' POSの場合モード切替時に処理メニューが表示され操作される可能性がある。\n                ' uctlGuiFrame1をVisibleでコントロールを全て非表示とすることで回避しようとしたが、\n                ' ボタン押下できてしまうと送り先がなく実行時エラーが発生するため、座標移動での非表示とした。\n                If p_KikiSyubetsu <> 2 Then\n                    uctlGuiFrame1.Top = uctlGuiFrame1.Top + uctlGuiFrame1.Height\n                    uctlGuiFrame1.Left = uctlGuiFrame1.Left + uctlGuiFrame1.Width\n                    Unload frmSPG00111\n                    Unload frmSPG00112\n                    sub_FormClear\n                    SendGuidanceNo \"\"\n                End If\n                uctlGymCardRader1.CardDisable\n                tmrBarcodeWatch.Enabled = False\n                Call Me.uctlGymBarcodeReader1.BarcodeDisable\n                m_BarcodeState = False\n\n            End If\n        Case Else\n    End Select\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Resume ProcExit\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\nEnd Sub\n\n'*****************************************************************\n' 機能　　: ガイダンス設定\n'*****************************************************************\nPrivate Sub SendGuidanceNo(inValue As String)\n\n    p_GymCmnGuiFrame.GMN_DispGuid uctlGuiFrame1, \"\", inValue\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　: キー入力処理\n' 引数 1　: キー名\n' 引数 2　: キータイプ\n' 引数 3　: キー値\n' 引数 4　: テキスト値\n' 戻値　　:\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴: 2016/06/07 S.Ito Gemini標準_現地リポート82\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiKeyClick(ByVal sKeyName As String, ByVal sKeyType As String, ByVal sKeyVal As String, ByVal sTextData As String)\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiKeyClick(F1)\"\nOn Error GoTo ProcErr\n\n    '中間TRN出力変数定義\n    Dim Trnret              As Currency\n    Dim errorCode           As Integer\n\n    Dim m_CdChkCard1        As GymCdChk.CARD1\n    Dim m_CdChkCard2        As GymCdChk.CARD2\n    Dim ix                  As Integer\n    Dim cntHoryu            As Integer\n    Dim ret                 As Long\n    Dim lngCHECKRESULT      As Long   'カードチェック結果\n    Dim wlng                As Long\n    Dim iHoryu              As Long\n    Dim p_GuiTTX01          As Object\n    Dim wstr                As String\n    Dim svrLANENO           As String '商品コードにレーンｎw定\n    Dim strCardErrorMessase As String\n    Dim bolRet              As Boolean\n    Dim CrdObject           As Object\n    Dim strArrayCoop()      As String 'COOPカード分類格納変数\n\n    Static flgKeyClkEvt     As Long\n\n    Call GMN_Log(\"キー入力処理 引数（KeyName）：[\" & sKeyName & \"]　引数（KeyType）：[\" & sKeyType & \"]　引数（KeyVal）：[\" & sKeyVal & \"]\", c_strProcName, LL_INFO)\n\n    ' 非アクティブ化(他のアプリ起動中)中のためキー入力は不可(捨てる)とする。\n    If mDeactivating Then Exit Sub\n\n    'カード入力中、または画面遷移中のGuiKeyClickイベントは無視する ※カード入力区分、オーソリ、ネガチェックの応答イベント時は無視しない\n    Select Case sKeyName\n        Case DMNc_KeyHakkou, DMNc_KeyCancel, DMNc_KeyBack, DMNc_KeyNumeric\n\n        '発行キー、キャンセルキー、戻るキーはカード入力中、または画面遷移中のGuiKeyClickイベントは無視する\n            If m_SalesDecideTransmitting > SD_None Then '売上確定中\n\n                If m_SalesDecideTransmitting = SD_AuthoriEnd Then  'ｵｰｿﾘ通信済ならキー入力可能タイミングあり\n                    'ｵｰｿﾘ通信失敗時を考慮し、キー入力を可能とします。\n                Else\n                    GoTo ProcExit\n                End If\n            End If\n\n            '入力中フラグ制御によりキー連打を制御する\n            If uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.FormShow = True Then   '処理選択パスワード画面が表示されている場合は、処理続行(フラグがクリアされないため)\n            ElseIf m_CardTransmitting = 1 Then  'カードチェック中の時\n                Exit Sub\n            ElseIf flgKeyClkEvt = 1 Then        'キー入力内容評価中の時\n                Exit Sub\n            ElseIf p_ScreenTrans > 0 Then       '画面遷移中の時\n                Exit Sub\n            ElseIf uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_CardCheckState > 0 Then\n                Exit Sub\n            ElseIf uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C2_CardCheckState > 0 Then\n                Exit Sub\n            End If\n            flgKeyClkEvt = 1\n\n        '現金フリー、短縮カード、顧客名検索、車番検索、レーンモニター、VIP併用\n        Case DMNc_KeyGfree, DMNc_KeyTansyuku, DMNc_KeyKyakuSearch, DMNc_KeyShabanSearch, DMNc_KeyLaneMonitor, DMNc_KeyVip\n\n            'カード入力チェック中の場合は、カードチェックを無視する（解除は次のオーダーに遷移するとき）\n            If m_CardTransmitting > 0 Then\n                GoTo ProcExit\n            ElseIf flgKeyClkEvt = 1 Then\n                GoTo ProcExit\n            ElseIf Not (m_Order = ctlStart Or m_Order = ctlCard02) Then 'カード入力オーダー以外はイベント無効\n                GoTo ProcExit\n            End If\n\n        '取消、返品、値引、値増、指定日付、集計除外\n        Case DMNc_KeyTorikeshi, DMNc_KeyHenpin, DMNc_KeyHenpin, DMNc_KeyNebiki, DMNc_KeyNemashi, DMNc_KeyShiteibi, DMNc_KeySyukeijogai\n\n            'カード入力チェック中の場合は、カードチェックを無視する（解除は次のオーダーに遷移するとき）\n            If m_CardTransmitting > 0 Then\n                GoTo ProcExit\n            ElseIf flgKeyClkEvt = 1 Then\n                GoTo ProcExit\n            ElseIf Not (m_Order = ctlStart Or m_Order = ctlCard02) Then 'カード入力オーダー以外はイベント無効\n                GoTo ProcExit\n            End If\n\n        'カードチェック中＆キー入力内容評価中に処理メニューキーが押下された場合も無視\n        'メニューキー\n        Case DMNc_KeyMenu\n\n            'カード入力チェック中の場合は、カードチェックを無視する（解除は次のオーダーに遷移するとき）\n            If m_CardTransmitting > 0 Then\n                GoTo ProcExit\n            ElseIf flgKeyClkEvt = 1 Then\n                GoTo ProcExit\n            ElseIf Not (m_Order = ctlStart Or m_Order = ctlCard02) Then 'カード入力オーダー以外はイベント無効\n                GoTo ProcExit\n            End If\n\n        'ポイント入力コントロール 決済ボタン、確定ボタン、プリカボタン\n        Case DMNc_KeyRPIKessai, DMNc_KeyRPIKakutei, DMNc_KeyRPIPrica\n\n            If flgKeyClkEvt = 1 Then\n                GoTo ProcExit\n            End If\n\n        '商品明細入力時、テンキーの保留呼出ボタン押下\n        Case DMNc_KeyTkyHoryuYobi\n\n            'ポイントカード利用時 かつ 保留呼出済みの場合は処理を抜ける\n            If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                '最大明細数 + 1 <= 現在の明細数 + 1 の場合は無効とする\n                If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.intMaxBut <= uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count + 1 Then\n                    GoTo ProcExit\n                End If\n            End If\n\n        Case Else\n            '上記以外のキー入力は無視しない\n    End Select\n\n    'カードチェックイベントが発生した場合、カード入力コントロールのﾌﾗｸﾞを解除する\n    If sKeyName = DMNc_CardKbnInputEnd Or _\n       sKeyName = DMNc_CheckCardEnd Or _\n       sKeyName = DMNc_SeiriNoInputStart Then\n        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_CardCheckState = 0\n        uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C2_CardCheckState = 0\n    End If\n\n        Select Case sKeyName\n\n            Case DMNc_KeyMenu   'メニューボタン\n\n                m_strSyoriKbn = sKeyVal\n                'メインウィンドウ処理終了\n                Call sub_FormClear\n                Call p_GymCmnGuiFrame.GMN_SetProcStartUp(uctlGuiFrame1, \"1\", m_strSyoriKbn)\n\n            Case DMNc_KeyCancel 'キャンセル\n\n                '税入力画面が表示中の場合は税入力画面を閉じる\n                If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\").Item(fnc_GetDistributionOrder).ZeiFormFlg <> \"\" Then\n\n                    'uctlGuiBUT012で税入力後の処理を行わないためのフラグ設定\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\").Item(fnc_GetDistributionOrder).CancelFlg = \"cancel\"\n                    '税入力画面を閉じる\n                    Set p_GuiTTX01 = CreateObject(\"GuiTTX01.clsGuiTTX0101\")\n                    ret = p_GuiTTX01.fuc_Unload\n                    Set p_GuiTTX01 = Nothing\n                    'ガイダンス表示\n                    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n                    GoTo ProcExit\n                End If\n\n                '文字入力フォーム又は商品一覧画面が表示されているか\n                If uctlGuiFrame1.GUI_GetItem(\"tky01\").object.GetFromVisible = True Then\n                    '文字入力フォーム又は商品一覧画面を閉じる\n                    uctlGuiFrame1.GUI_GetItem(\"tky01\").object.sub_FromClose\n                ElseIf uctlGuiFrame1.GUI_GetItem(\"crd01\").object.SyoriSentakuVisible Then\n                    'カード入力のサブウィンドウを閉じる\n                    Call uctlGuiFrame1.GUI_GetItem(\"crd01\").object.sub_SyoriSentakuClose\n                    Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                ElseIf uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.FormShow = True Then\n                    'ガイダンスの表示\n                    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n\n                    uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.sub_CloseForm\n\n                '保留呼出（明細）から保留データ一覧表示時、保留データ一覧を閉じる\n                ElseIf m_HoryuDataCall > 1 And uctlGuiFrame1.GUI_GetItem(\"HRY01\").Visible = True Then\n                    Call sub_DisplayModeNo(ctlshocd1)\n\n                    Select Case m_HoryuDistributionOrder\n                        Case 0  '1明細目\n                            m_Order = ctlshocd1 - 1\n                        Case 1  '2明細目\n                            m_Order = ctlshocd2 - 1\n                        Case 2  '3明細目\n                            m_Order = ctlshocd3 - 1\n                    End Select\n\n                    Call sub_NextOrder\n                Else\n                    'ネガチェック応答待ちか？応答待ちの場合は、初期化保留\n                    If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.TransmitNega = True Then\n                        If m_Order < ctlNegaHide And m_WaitCancel = 0 Then\n                            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(True, Me)\n                        End If\n                        m_WaitCancel = 1\n                    Else\n                        'もし、機器種別が２以外の場合、フルではないのでキャンセルキーで処理を終了することはない。\n                        '機器種別　０：POS　１：SSC　２：OPT（フル）\n                        If p_GymCmnSysSts.GMN_KikiSyubetsu <> 2 Then\n                            Call sub_FormClear\n                        Else\n                            'もしトップ画面以外だったら画面クリア、トップの場合処理終了。\n                            If m_Order = ctlStart Or m_Order = ctlMotohiduke Then\n\n                                m_CardTransmitting = 1  '画面終了時のカードチェックを無視する\n\n                                'GUIフレーム終了\n                                Call sub_FormClear\n                                p_GymCmnGuiFrame.GMN_SetProcStartUp uctlGuiFrame1, \"1\", c_strSyoriKbn_Kyuyu\n\n                            Else\n                                Call sub_FormClear\n\n                            End If\n                        End If\n                    End If\n                End If\n\n            Case DMNc_KeySettei     '設定\n                ret = fnc_inputPart_S()\n                If ret = 0 Then Call sub_NextOrder\n\n            Case DMNc_KeyBack       '戻る\n                If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.TransmitNega = True Then\n                    If m_Order < ctlNegaHide And m_WaitCancel = 0 Then\n                        Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(True, Me)\n                    End If\n\n                    m_WaitCancel = -1\n                Else\n                    ret = fnc_inputPart_B()\n                    If ret = 0 Then Call sub_BeforeOrder\n                End If\n\n            Case DMNc_KeyClear      'クリア\n\n                If m_Order = ctlBaikaTanka1 Or m_Order = ctlBaikaTanka2 Or m_Order = ctlBaikaTanka3 Then\n                    '単価キー初期化\n                    m_TankaFlg = False\n                End If\n\n                Call uctlGuiFrame1.GUI_SetText(\"\")\n\n                '預り金入力の場合、クリアで「0」とする\n                If m_Order = ctlDeposit Then\n                    Call uctlGuiFrame1.GUI_SetText(\"0\", m_CTL_PROPERTYS(ctlDeposit).strCtlName)\n                End If\n\n                If m_Order = ctlSelling Then\n                    Call uctlGuiFrame1.GUI_SetText(\"0\", m_CTL_PROPERTYS(ctlSelling).strCtlName)\n                End If\n\n            Case DMNc_KeyHakkou     '発行\n\n                '元端末処理通番入力オーダーの際は発行キーを無効とする\n                If m_Order = ctlMotoTTsuban Then\n                    '発行キーは無効なので処理を抜ける\n                    GoTo ProcExit\n                End If\n\n                ret = fnc_InputPart_H()\n\n            Case DMNc_KeyNumeric    'テンキー\n\n                '会員情報画面表示中 p_ScreenTrans = -1はテンキーの入力を無効とする\n                If p_ScreenTrans < 0 Then\n                    GoTo ProcExit\n                End If\n\n                If m_Order = ctlStart _\n                   And uctlGuiFrame1.GUI_GetItem(\"SKB01\").Visible = False Then\n                    Call sub_DisplayModeNo(ctlJitsushaban)\n                End If\n\n            '現金フリー、短縮カード、顧客名検索、車番検索、仕入検索\n            Case DMNc_KeyGfree, DMNc_KeyTansyuku, DMNc_KeyKyakuSearch, DMNc_KeyShabanSearch, DMNc_KeySiireSearch\n\n                Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n\n                If m_clsNWCRMSIF.glbCRMflg >= 2 Or m_VipUse Then   '決済カードオーダーのとき\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.sub_SyoriSentaku(sKeyName)\n                Else\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.sub_SyoriSentaku(sKeyName)\n                End If\n\n            '取消、返品、値引、値増、指定日付、集計除外\n            Case DMNc_KeyTorikeshi, DMNc_KeyHenpin, DMNc_KeyHenpin, DMNc_KeyNebiki, DMNc_KeyNemashi, DMNc_KeyShiteibi, DMNc_KeySyukeijogai\n\n                ret = fnc_SyoriKbnInfoChange(sKeyName, sKeyVal)\n\n            'VIP併用ボタン押下時\n            Case DMNc_KeyVip\n\n                m_VipDisp = True\n\n                '画面にVIP併用を表示する\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.VipVisible = m_VipDisp\n\n            Case DMNc_KeyStaffMenu  '係員入力メニュー\n                '係員メニューから入力された場合、係員を再評価(戻り値>=0のときは、係員区分)\n                With uctlGuiFrame1.GUI_GetItem(\"KKT01\").object\n                    ret = .Fun_GetStaffName_StaffCode(.Text)\n                End With\n                If ret >= 0 Then\n                    ret = fnc_inputPart_S()\n                    If ret = 0 Then Call sub_NextOrder\n                End If\n\n            Case DMNc_KeyRPIKessai  '決済キー\n\n                'ポイント入力時エラーチェック\n                ret = uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.sub_InputPointCheck\n\n                '入力エラーの場合\n                If ret <> 0 Then\n                    'エラーチェックの戻り値によってエラーメッセージを表示する\n                    Select Case ret\n                    '利用ポイント多いエラー\n                    Case -1\n\n                        '処理区分第二段 = 1:取消 or 2:返品の判断\n                        If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then\n                            '処理区分第二段 = 1:取消 or 2:返品の場合には利用ポイント>累積ポイントのチェックは行えないので行わない\n                        Else\n                            'エラーメッセージを表示\n                            Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointError - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                            GoTo ProcExit\n                        End If\n\n                    '利用ポイント下限値エラー\n                    Case -2\n                        '処理区分第二段 = 1:取消 or 2:返品の場合にも下限値のチェックは行う\n                        'エラーメッセージを表示\n                        Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointless - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                        GoTo ProcExit\n                    End Select\n                End If\n\n                'プリカ残高非表示\n                m_Header.NetPrica.NP_FLG = 0\n                m_clsNWCRMSIF.glbNPflg = 0\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption03).strCtlName, False)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT03).strCtlName, False)\n\n                '値引残数ラベル表示\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption02).strCtlName, True)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT02).strCtlName, True)\n\n                m_clsNWCRMSIF.glbCRMflg = 2 'カードチェック入力を決済カード入力とする\n                m_CTL_PROPERTYS(ctlCard02).TabStop = True\n\n                '退避情報がある場合、カード情報を入れ替える\n                If p_CdchkFlg Then\n                    '退避したプリカ情報を使用する\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = p_CdchkCard2\n                    p_CdchkFlg = False\n                End If\n\n                ret = fnc_inputPart_S()\n                Call sub_NextOrder\n                Call uctlGuiFrame1.GUI_SetVisible(m_RPIObj, False)\n\n                '利用ポイントを画面にセット(ポイントカード利用時のみ)\n                If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.PointText = m_Header.CRMInfo.CRMPPNT\n                End If\n\n                '物流明細使用情報送信（ヘッダー情報の更新-ポイント項目の更新のため）\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                    .Header = m_Header\n                End With\n\n            Case DMNc_KeyRPIKakutei     '確定（現金）キー\n\n                'ポイント入力時エラーチェック\n                ret = uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.sub_InputPointCheck\n\n                '入力エラーの場合\n                If ret <> 0 Then\n                    'エラーチェックの戻り値によってエラーメッセージを表示する\n                    Select Case ret\n                    '利用ポイント多いエラー\n                    Case -1\n\n                        '処理区分第二段 = 1:取消 or 2:返品の判断\n                        If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then\n                            '処理区分第二段 = 1:取消 or 2:返品の場合には利用ポイント>累積ポイントのチェックは行えないので行わない\n                        Else\n                            'エラーメッセージを表示\n                            Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointError - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                            GoTo ProcExit\n                        End If\n\n                    '利用ポイント下限値エラー\n                    Case -2\n                        '処理区分第二段 = 1:取消 or 2:返品の場合にも下限値のチェックは行う\n                        'エラーメッセージを表示\n                        Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointless - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                        GoTo ProcExit\n                    End Select\n                End If\n\n                'プリカ残高非表示\n                m_Header.NetPrica.NP_FLG = 0\n                m_clsNWCRMSIF.glbNPflg = 0\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption03).strCtlName, False)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT03).strCtlName, False)\n\n                '値引残数ラベル表示\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption02).strCtlName, True)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT02).strCtlName, True)\n\n                m_clsNWCRMSIF.glbCRMflg = 1 '通信正常(確定/決済押下待ち）\n\n                'カード情報を変数に格納\n                If m_clsNWCRMSIF.glbCRMflg = 2 Then   '決済カード入力があった？\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                Else\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                End If\n\n                'ポイント＆プリカ併用設定かつプリカ読込みで現金払いの場合、現金代表コードへの切り替え\n                If (m_clsNWCRMSIF.glbNWCRMSflg = 1 Or m_clsNWCRMSIF.glbNWCRMSflg = 3) And m_CdChkCard2.C2_CARDDISCERN = 5 Then\n                    Call ChangeGenkinDaihyou(m_CdChkCard1, m_CdChkCard2)\n                End If\n\n                ret = fnc_inputPart_S()\n                Call sub_NextOrder\n                Call uctlGuiFrame1.GUI_SetVisible(m_RPIObj, False)\n\n                '利用ポイントを画面にセット(ポイントカード利用時のみ)\n                If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.PointText = m_Header.CRMInfo.CRMPPNT\n                End If\n\n                '物流明細使用情報送信（ヘッダー情報の更新-ポイント項目の更新のため）\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                    .Header = m_Header\n                End With\n\n            Case DMNc_KeyRPIPrica   'プリカキー\n\n                'ポイント入力時エラーチェック\n                ret = uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.sub_InputPointCheck\n\n                '入力エラーの場合\n                If ret <> 0 Then\n                    'エラーチェックの戻り値によってエラーメッセージを表示する\n                    Select Case ret\n                    '利用ポイント多いエラー\n                    Case -1\n\n                        '処理区分第二段 = 1:取消 or 2:返品の判断\n                        If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then\n                            '処理区分第二段 = 1:取消 or 2:返品の場合には利用ポイント>累積ポイントのチェックは行えないので行わない\n                        Else\n                            'エラーメッセージを表示\n                            Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointError - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                            GoTo ProcExit\n                        End If\n\n                    '利用ポイント下限値エラー\n                    Case -2\n                        '処理区分第二段 = 1:取消 or 2:返品の場合にも下限値のチェックは行う\n                        'エラーメッセージを表示\n                        Call m_ERR01.GMNSub_ErrorMsg(CRMRiyouPointless - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                        GoTo ProcExit\n                    End Select\n                End If\n\n                'プリカ残高表示\n                m_Header.NetPrica.NP_FLG = 1\n                m_clsNWCRMSIF.glbNPflg = 1\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption03).strCtlName, True)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT03).strCtlName, True)\n\n                '値引残数ラベル非表示\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption02).strCtlName, False)\n                Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKGuiTXT02).strCtlName, False)\n\n                m_clsNWCRMSIF.glbCRMflg = 1 '通信正常(確定/決済押下待ち）\n\n                ret = fnc_inputPart_S()\n                Call sub_NextOrder\n                Call uctlGuiFrame1.GUI_SetVisible(m_RPIObj, False)\n\n                '利用ポイントを画面にセット(ポイントカード利用時のみ)\n                If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.PointText = m_Header.CRMInfo.CRMPPNT\n                End If\n\n                '物流明細使用情報送信（ヘッダー情報の更新-ポイント項目の更新のため）\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                    .Header = m_Header\n                End With\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                    .Header = m_Header\n                End With\n\n            Case DMNc_SeiriNoInputStart                     '整理車番入力中\n\n                '会員情報画面表示中 p_ScreenTrans = -1はテンキーの入力を無効とする\n                If p_ScreenTrans < 0 Then\n                    GoTo ProcExit\n                End If\n\n               'カード入力チェック中の場合は、カードチェックを無視する（解除は次のオーダーに遷移するとき）\n                If m_CardTransmitting > 0 Then\n                    GoTo ProcExit\n                ElseIf Not (m_Order = ctlStart Or m_Order = ctlCard02) Then 'カード入力オーダー以外はイベント無効\n                    Call GMN_Log(\"キー入力処理 引数（KeyName）：[\" & sKeyName & \"] カード入力オーダー以外はイベント無効 \", c_strProcName)\n                    GoTo ProcExit\n\n                ElseIf m_CardInfoExchange > 0 Then\n                    m_CardInfoExchange = 0\n                    GoTo ProcExit\n                End If\n\n                If m_Order = ctlStart _\n                   And uctlGuiFrame1.GUI_GetItem(\"SKB01\").Visible = False Then\n                    Call sub_DisplayModeNo(ctlJitsushaban)\n                End If\n\n                p_ScreenTrans = 0       '画面遷移中ﾌﾗｸﾞの初期化\n\n            Case DMNc_CheckCardEnd, DMNc_CardKbnInputEnd    'カードチェック完了,カード区分入力完了\n\n               'カード入力チェック中の場合は、カードチェックを無視する（解除は次のオーダーに遷移するとき）\n                If m_CardTransmitting > 0 Then\n                    GoTo ProcExit\n                ElseIf Not (m_Order = ctlStart Or m_Order = ctlCard02) Then 'カード入力オーダー以外はイベント無効\n                    GoTo ProcExit\n\n                ElseIf m_CardInfoExchange > 0 Then\n                    m_CardInfoExchange = 0\n\n                    GoTo ProcExit\n\n                ElseIf sKeyName = DMNc_CheckCardEnd Then  'カードチェック完了時（カード区分入力完了時はカードチェック中としない。）\n                    m_CardTransmitting = 1  'カードチェック中とする\n                End If\n\n                If m_clsNWCRMSIF.glbCRMflg >= 2 Or m_VipUse Then     '決済カードオーダーのとき\n                    '動作指定とカードチェック結果が共に0の場合は処理を中断する。\n                    If uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C1_DOUSASITEI = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C2_CHECKRESULT = 0 Then\n                        ret = -1\n                        Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                        Exit Sub\n                    End If\n\n                    lngCHECKRESULT = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2.C2_CHECKRESULT\n\n                    'カードチェック結果が0:正常以外はエラーを表示し再入力とする\n                    If lngCHECKRESULT <> 0 Then\n\n                        Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n\n                        If lngCHECKRESULT > 100 Then\n                            Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェックエラー\", uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2.C2_LOCKRIYUNM)\n                        Else\n                            Call m_ERR01.GMNSub_ErrorMsg(cardcheckErrorStart - lowerErrorNumber + lngCHECKRESULT)\n                        End If\n                        ret = -1\n\n                        'トップオーダーかつ保留呼出中以外またはカード手入力画面以外の場合はモードキーを表示する\n                        If m_Order = ctlStart And m_HoryuDataCall < 1 And (uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1) Then\n                            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                        End If\n                    'VIP併用時の動作\n                    ElseIf m_VipUse Then\n\n                        ret = -1\n\n                        'FKMCカード分類情報をカンマ分割\n                        strArrayCoop = Split(colSDSET011.Item(\"FKCoopCardBunrui\"), \",\")\n\n                        'VIP併用時はFKMCカードのみ入力可\n                        For ix = 0 To UBound(strArrayCoop())\n                            If uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2.C2_BUNCD = strArrayCoop(ix) Then\n                                ret = fnc_CARD2_CardCheckEnd    'カードチェック後処理（決済カード）\n                                ret = 0\n\n                                Exit For\n                            End If\n                        Next ix\n\n                        'FKMCカード以外はエラー\n                        If ret = -1 Then\n                            Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェックエラー\", \"決済不可カードです。\")\n                        End If\n\n                    Else\n                        '最後のカード入力が正常？\n                        If uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.LastCardCheckState = True Then\n\n                            If sKeyName = DMNc_CardKbnInputEnd Then\n                                ret = 0                         'カード区分入力の場合は、次のオーダーに遷移しない\n                            Else\n\n                                ret = fnc_CARD2_CardCheckEnd    'カードチェック後処理（決済カード）\n                                ret = 0\n                            End If\n                        Else\n                            Call m_ERR01.GMNSub_ErrorMsg(cardcheckErrorStart - lowerErrorNumber + 12)   'カード読み取りエラー\n                            ret = -1\n\n                            'トップオーダーかつ保留呼出中以外またはカード手入力画面以外の場合はモードキーを表示する\n                            If m_Order = ctlStart And m_HoryuDataCall < 1 And Not (uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1) Then\n                                Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                            End If\n\n                        End If\n                    End If\n\n                Else    'カード入力オーダーのとき\n\n                    '動作指定とカードチェック結果が共に0の場合は処理を中断する\n                    If uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C1_DOUSASITEI = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_CHECKRESULT = 0 Then\n                         ret = -1\n                         Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                        Exit Sub\n                    End If\n\n                    lngCHECKRESULT = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2.C2_CHECKRESULT\n\n                    'カードチェック結果が0:正常以外はエラーを表示し再入力とする\n                    If lngCHECKRESULT <> 0 Then\n\n                        Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n\n                        If lngCHECKRESULT > 100 Then\n                            Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェックエラー\", uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2.C2_LOCKRIYUNM)\n                        Else\n                            Call m_ERR01.GMNSub_ErrorMsg(cardcheckErrorStart - lowerErrorNumber + lngCHECKRESULT)\n                        End If\n                        ret = -1\n\n                       'トップオーダーかつ保留呼出中以外またはカード手入力画面以外の場合はモードキーを表示する\n                        If m_Order = ctlStart And m_HoryuDataCall < 1 And Not (uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1) Then\n                               Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                        End If\n\n                    Else\n                        '最後のカード入力が正常？\n                        If uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.LastCardCheckState = True Then\n                            If sKeyName = DMNc_CardKbnInputEnd Then\n                                ret = 0                         'カード区分入力の場合は、次のオーダーに遷移しない\n                            ElseIf uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2.C2_EXCLUSION_LOCAL > 0 Then\n                                With uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                                    If fnc_GetSDMNG005(.C2_KAIIN) > 0 Then 'ローカル排他存在チェック\n                                        Call m_ERR01.GMNSub_ErrorMsg(HaitaError + CLng(SKBN) * 10000&)\n                                        Call uctlGuiFrame1.GUI_SetText(\"\")\n                                        ret = -1\n                                    Else\n                                        If fnc_InsSDMNG005(.C2_KAIIN) = 0 Then\n                                            strExclusionLocalKAIIN = .C2_KAIIN\n                                            ret = fnc_CardCheckEnd    'カードチェック後処理\n\n                                            'カードチェックでエラーが発生した場合、ローカル排他解除\n                                            If ret < 0 And m_Order = ctlStart And m_clsNWCRMSIF.glbNPflg <> 1 Then\n                                                Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n                                                strExclusionLocalKAIIN = \"\"\n                                            End If\n\n                                            ret = 0\n                                        Else\n                                            ret = -1\n                                        End If\n                                    End If\n                                End With\n                            Else\n                                ret = fnc_CardCheckEnd    'カードチェック後処理\n                                ret = 0\n                            End If\n                        Else\n                            Call m_ERR01.GMNSub_ErrorMsg(cardcheckErrorStart - lowerErrorNumber + 12)   'カード読み取りエラー\n                            ret = -1\n\n                            'トップオーダーかつ保留呼出中以外またはカード手入力画面以外の場合はモードキーを表示する\n                            If m_Order = ctlStart And m_HoryuDataCall < 1 And Not (uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0 And uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1) Then\n                                   Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n                            End If\n\n                        End If\n\n                    End If\n\n                End If\n\n                If ret <> 0 Then m_CardTransmitting = 0 'カードチェック状態のクリア\n\n                p_ScreenTrans = 0       '画面遷移中ﾌﾗｸﾞの初期化\n\n            Case DMNc_KeyCreditHouhou\n\n                '通信中の場合キークリック無効化\n                If uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAUT01).strCtlName).object.TransmitSales Then\n\n                    GoTo ProcExit\n                End If\n\n                'カード情報を変数に格納\n                If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then    '決済カード入力があった？\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                Else\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                End If\n\n                '支払方法入力内容の評価\n                ret = fnc_KeyCreditHouhouInput(m_Header, sKeyVal, wlng)\n\n                If ret = -1 Then GoTo ProcExit  '入力が不正の場合は入力を無効にする\n\n                Call uctlGuiFrame1.GUI_SetText(m_Header.PaymentInfo.PAYKBNNM)\n\n                If wlng = m_CdChkCard2.C2_DATAJUDGCD2 Then    '分割の場合（0:一括,10:分割支払,20:ボーナス一括,30:リボルビング）\n                    ret = 0\n                    m_CTL_PROPERTYS(ctlPaymentCount).TabStop = True\n                    Call sub_NextOrder\n                Else\n                    '分割以外は支払回数をクリア\n                    Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlPaymentCount).strCtlName)\n                    m_CTL_PROPERTYS(ctlPaymentCount).TabStop = False\n                    ret = fnc_InputPart_H()\n\n                End If\n\n            Case DMNc_KeyCreditKaisu\n\n                '支払方法入力内容の評価\n                ret = sub_KeyCreditKaisu(m_Header, sKeyVal, wstr)\n\n                If ret = 0 Then\n                    Call uctlGuiFrame1.GUI_SetText(wstr)\n                    ret = fnc_InputPart_H()\n                End If\n\n            Case DMNc_KeySalesRequestSuccess\n\n                'カード情報を変数に格納\n                If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then    '決済カード入力があった？\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                Else\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                End If\n\n                 '項目移送する\n                 'ヘッダーオブジェクト.ネガオーソリ情報\n                With m_Header.Authori\n                    .REALTIME = 1                                                       '(正常時は固定で9)\n                    .ERRSTS = \"\"                                                        'ネガ／オーソリ結果コード\n                    .TTUBAN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.RequestNo       '端末処リアルタイム識別\n                    .CREDITCD = m_CdChkCard2.C2_CRECODE                                 'クレジットコード\n                    .SECURITY = 9                                                       'セキュリティ理通番\n                End With\n\n                'ヘッダーオブジェクト.支払情報.クレジット情報\n                With m_Header.PaymentInfo\n                    .SYONIN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.ShoninNo\n                    .SSTTUKI = \"00\"\n                    .LLIMIT = m_CdChkCard2.C2_FLIMIT\n                End With\n\n                '送信データ用の支払区分コードへ変換\n                Select Case m_Header.PaymentInfo.PAYCODE\n                    '一括\n                    Case m_CdChkCard2.C2_AUTHPAYCD1\n                         m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD1\n                    '分割\n                    Case m_CdChkCard2.C2_AUTHPAYCD2\n                         m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD2\n                    'ボーナス一括\n                    Case m_CdChkCard2.C2_AUTHPAYCD3\n                         m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD3\n                    'リボ払い\n                    Case m_CdChkCard2.C2_AUTHPAYCD4\n                         m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD4\n                End Select\n\n                '成功イベントが発生したら、売上確定処理へ\n                m_SalesDecideTransmitting = SD_AuthoriEnd           'ｵｰｿﾘ通信済\n                m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                m_Order = ctlEnd\n                ret = fnc_InputPart_H()\n\n            Case DMNc_KeySalesRequestException, DMNc_KeySalesRequestTimeOut\n                'オーソリチェックエラー表示\n                If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.KESSAI = -1 Then   '例外不可の場合のみ、メッセージ及びレシートを出力する\n                    With uctlGuiFrame1.GUI_GetItem(\"AUT01\").object\n                        'プログラム異常としてアライブに通知する\n                        Call m_ERR01.GMNSub_ErrorMsgStr(\"オーソリエラー\", fnc_AuthoriCheckErr(m_Header, .ErrCode, .RequestNo, m_Header.CardChk.EKAIIN, CLng(m_Header.ODTBAN)))\n\n                        'オーソリエラーレシート出力\n                        Trnret = fnc_AuthoriErrReceipt(m_Header, .ErrCode, .RequestNo, m_Header.CardChk.EKAIIN)\n\n                        If Trnret > 0 Then\n                            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                            'レシート発行エラーの場合\n                            If ret <> 0 Then\n                                'ログを出力する（未定）\n                            End If\n                        End If\n\n                    End With\n                End If\n\n                'ネガチェック結果によって処理を分ける\n                '売上NGの場合\n                If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.KESSAI = -1 Then\n                    'トップオーダーに遷移する\n                    Call sub_FormClear\n                '要電話確認の場合\n                Else\n\n                    'カード情報を変数に格納\n                    If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then    '決済カード入力があった？\n                        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                    Else\n                        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                    End If\n\n                    '項目移送を行う\n                    With m_Header.Authori\n                        .REALTIME = 0                                                       'リアルタイム識別(承認番号を手入力しているので0:オフラインを出力する）\n                        .CREDITCD = m_CdChkCard2.C2_CRECODE                                 'クレジットコード\n                        .SECURITY = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.KESSAI        'セキュリティ\n                        .ERRSTS = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.ErrCode         'ネガ／オーソリ結果コード\n                        .TTUBAN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.RequestNo       '端末処理通番\n                    End With\n\n                    '送信データ用の支払区分コードへ変換\n                    Select Case m_Header.PaymentInfo.PAYCODE\n                        '一括\n                        Case m_CdChkCard2.C2_AUTHPAYCD1\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD1\n                        '分割\n                        Case m_CdChkCard2.C2_AUTHPAYCD2\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD2\n                        'ボーナス一括\n                        Case m_CdChkCard2.C2_AUTHPAYCD3\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD3\n                        'リボ払い\n                        Case m_CdChkCard2.C2_AUTHPAYCD4\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD4\n                    End Select\n\n                    '承認番号入力へ\n                    m_SalesDecideTransmitting = SD_AuthoriEnd           'ｵｰｿﾘ通信済\n                    m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = True    '承認番号入力\n                    m_Order = ctlMotoTTsuban\n                    Call sub_NextOrder\n\n                End If\n\n            Case DMNc_KeyNegaRequestSuccess\n\n                'カード情報を変数に格納\n                If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then    '決済カード入力があった？\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                Else\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                End If\n\n                If m_WaitCancel = 0 Then\n                     '項目移送する\n                     'ヘッダーオブジェクト.ネガオーソリ情報\n                    With m_Header.Authori\n                        .REALTIME = 1                                                       'リアルタイム識別\n                        .CREDITCD = m_CdChkCard2.C2_CRECODE                                 'クレジットコード\n                        .SECURITY = 8                                                       'セキュリティ(正常時は固定で8)\n                        .ERRSTS = \"\"                                                        'ネガ／オーソリ結果コード\n                        .TTUBAN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.RequestNo       '端末処理通番\n                    End With\n\n                    m_Header.PaymentInfo.SYONIN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.ShoninNo\n\n                    If m_Order = ctlNegaHide Then\n                        Call sub_NextOrder\n                    Else\n                        'ネガチェック入力待ちを無効にする\n                        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n                    End If\n                Else\n                    Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(False, Me)\n                    'トップオーダーに遷移する\n                    Call sub_FormClear\n                End If\n            Case DMNc_KeyNegaRequestException, DMNc_KeyNegaRequestTimeOut\n\n                '例外許可が１：許可の場合、セキュリティを出力し売上処理を継続します。\n                If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.EXPECT = 1 And m_WaitCancel = 0 Then\n\n                    'カード情報を変数に格納\n                    If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then   '決済カード入力があった？\n                        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                    Else\n                        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                    End If\n\n                    '項目移送する\n                    'ヘッダーオブジェクト.ネガオーソリ情報\n                    With m_Header.Authori\n                        .REALTIME = 0                                                       'リアルタイム識別\n                        .CREDITCD = m_CdChkCard2.C2_CRECODE                                 'クレジットコード\n                        .SECURITY = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.SECURITY      'セキュリティ\n                        .ERRSTS = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.ErrCode         'ネガ／オーソリ結果コード\n                        .TTUBAN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.RequestNo       '端末処理通番\n                    End With\n\n                    If m_Order = ctlNegaHide Then\n                        Call sub_NextOrder\n                    Else\n                        'ネガチェック入力待ちを無効にする\n                        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n                    End If\n                Else\n\n                    '例外エラー発生の場合、処理続行不可のためエラー画面が表示されていたら閉じる(モーダル表示が重なるため)\n                    Call uctlGuiFrame1.GUI_GetItem(\"KKT01\").object.fun_FrmGuiERR01_Unload\n\n                    'ネガチェックエラー表示\n                    With uctlGuiFrame1.GUI_GetItem(\"AUT01\").object\n                        'プログラム異常としてアライブに通知する\n                        Call m_ERR01.GMNSub_ErrorMsgStr(\"ネガチェックエラー\", fnc_NegaCheckErr(m_Header, .ErrCode, .RequestNo, m_Header.CardChk.EKAIIN))\n\n                        'オーソリエラーレシート出力\n                        Trnret = fnc_NegaErrReceipt(m_Header, .ErrCode, .RequestNo, m_Header.CardChk.EKAIIN)\n\n                        If Trnret > 0 Then\n                            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                            'レシート発行エラーの場合\n                            If ret <> 0 Then\n                                'ログを出力する（未定）\n                            End If\n                        End If\n\n                    End With\n\n                    Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(False, Me)\n\n                    'トップオーダーに遷移する\n                    Call sub_FormClear\n                End If\n\n            '--------------------保留データ関連-------------------\n            '初期メニュー画面（カード入力オーダー）の保留呼出ボタン押下\n            Case DMNc_KeyMenuHoryuYobi\n\n                mMutexGymRunning.Create MUTEX_GYMRUNNING\n                If mMutexGymRunning.Wait(0) = False Then\n                    GMN_Log MUTEX_GYMRUNNING & \"は他でロック中なので処理中断\"\n                    GoTo ProcExit\n                End If\n\n                If m_HoryuDataCall <> -1 Then\n                    m_HoryuDataCall = 1     '1:保留データ利用中(カード入力)\n                    Call sub_HoryuDataInit\n                End If\n\n            '商品明細入力時、テンキーの保留呼出ボタン押下\n            Case DMNc_KeyTkyHoryuYobi\n\n                If m_HoryuDataCall = 0 Then\n                    m_HoryuDataCall = 2     '2:保留データ利用中(明細追加)\n                ElseIf m_HoryuDataCall = 1 Then\n                    m_HoryuDataCall = 3     '2:保留データ利用中(ミックス)\n                End If\n\n                m_HoryuDistributionOrder = fnc_GetDistributionOrder     '画面上のどの明細(0〜2)に保留データを設定するのか\n\n                svrLANENO = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).GOODSCD\n\n                '保留明細に対して保留明細の呼出はできないように修正\n                iHoryu = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).btnCaption\n\n                If m_HoryuDistributionOrder + 1 <= uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count Then     '空白明細行での保留明細ボタンはOK\n                    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(iHoryu)\n                    If .HoryuDtl = True Then\n                        svrLANENO = \"00\"     '保留一覧を表示しないように偽条件を設定\n                    End If\n                    End With\n                End If\n\n                ret = sub_HoryuDataInit(svrLANENO)\n                If ret = -1 And svrLANENO <> \"\" Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).GOODSCD = svrLANENO\n                End If\n\n            '--------------------保留データ一覧での明細ボタン押下-------------------\n           Case \"HRY01\" '保留データ一覧\n                If Len(Trim(sTextData)) > 0 Then\n                    ret = fnc_inputPart_S()\n                    If ret = 0 Then Call sub_NextOrder\n                End If\n\n            '--------------------物流明細入力関連-------------------\n            Case \"Syohin\" '商品キー\n                ret = fnc_inputPart_S\n                If ret = 0 Then Call sub_NextOrder\n\n            Case \"guiBtn1\" 'ボタン1\n                '商品コードにフォーカスがあたっているときのみ処理可能\n                If m_Order = ctlshocd2 Or m_Order = ctlshocd3 Then\n                    m_Order = ctlshocd1\n                    '物流明細レコード再表示\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_NowPageSet\n                    Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n\n                    'ガイダンスの表示\n                    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n\n                End If\n\n            Case \"guiBtn2\" 'ボタン2\n                '商品コードにフォーカスがあたっているときのみ処理可能\n                If m_Order = ctlshocd1 Then\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.funBtnCheck(0) = True Then\n                        m_Order = ctlshocd2\n                        '物流明細レコード再表示\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_NowPageSet\n                        Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n                        'ガイダンスの表示\n                        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n                    End If\n                ElseIf m_Order = ctlshocd3 Then\n                    m_Order = ctlshocd2\n                    '物流明細レコード再表示\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_NowPageSet\n                    Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n\n                    'ガイダンスの表示\n                    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n                End If\n\n            Case \"guiBtn3\" 'ボタン3\n                '商品コードにフォーカスがあたっているときのみ処理可能\n                If m_Order = ctlshocd1 Or m_Order = ctlshocd2 Then\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.funBtnCheck(1) = True Then\n                        m_Order = ctlshocd3\n                        '物流明細レコード再表示\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_NowPageSet\n                        Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n                        'ガイダンスの表示\n                        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n                    End If\n                End If\n\n            Case \"btnPage\"\n                'ガイダンスの表示\n                Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n\n            Case DMNc_KeyTaxKbn '消費税課税区分\n                '消費税課税区分にフォーカスがあたっているときのみ処理可能\n                If m_Order = ctlKazeiKubun1 Or m_Order = ctlKazeiKubun2 Or m_Order = ctlKazeiKubun3 Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).TAXKBN = sKeyVal\n                    Call sub_NextOrder\n                End If\n\n           Case DMNc_KeyTkyTanka '単価\n                If m_Order >= ctlshocd1 And m_Order <= ctlGenkaTanka3 Then\n                    m_TankaFlg = True\n                    '単価入力\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).BaikaTankaNKbnON\n                End If\n\n            Case DMNc_KeyTkyGenka '原価\n                If m_Order >= ctlshocd1 And m_Order <= ctlKingaku3 Then\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).GenkaNKbnON\n                End If\n\n            Case DMNc_KeyTkyLineC 'ラインＣ\n\n                '商品コードにフォーカスがあたっているときのみ処理可能\n                If m_Order = ctlshocd1 Or m_Order = ctlshocd2 Or m_Order = ctlshocd3 Then\n\n                     '保留呼出（カード入力）の場合、1行目の保留明細はクリア不可\n                        If m_HoryuDataCall > 0 Then\n                            '保留呼出明細の場合排他レコード削除\n                            If fnc_GetDistributionOrder + 1 <= uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count Then     '空白明細行でのクリアボタンは処理しない\n\n                                '保留呼出のインデックス取得の修正\n                                wstr = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).btnCaption\n\n                                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(wstr)\n                                    If .HoryuDtl = True Then\n                                        ret = fnc_DelSDMNG018(.HoryuTrnRecNo)\n                                        If ret <> 0 Then\n                                            Err.Raise (0)\n                                        End If\n                                    End If\n                                End With\n\n                            End If\n                        End If\n\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_Remove(fnc_GetDistributionOrder)\n\n                        '保留呼出中フラグクリア\n                        cntHoryu = 0\n                        For ix = 1 To uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count\n                            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(ix).HoryuDtl = True Then\n                                cntHoryu = cntHoryu + 1\n                            End If\n                        Next ix\n                        If cntHoryu = 0 Then                '行削除後、保留呼出明細がない場合\n                            m_HoryuDataCall = 0\n                        ElseIf cntHoryu = 1 Then            '行削除後、保留呼出明細が1件のみの場合\n                            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).btnCaption = 1 Then    '1行目削除時\n                                If m_HoryuDataCall = 3 Then\n                                    m_HoryuDataCall = 2         '保留呼出(ミックス)の場合、保留呼出(明細追加)に設定\n                                End If\n                            Else    '削除行が2明細目以降の場合\n                                If m_HoryuDataCall = 3 Then\n                                    m_HoryuDataCall = 1         '保留呼出(ミックス)の場合、保留呼出(カード入力)に設定\n                                End If\n                            End If\n                        End If\n\n                End If\n\n            'レーンモニタ表示\n            Case DMNc_KeyLaneMonitor\n\n                'バーコード無効化\n                Call Me.uctlGymBarcodeReader1.BarcodeDisable\n                m_BarcodeState = False\n                tmrBarcodeWatch.Enabled = False\n\n                flgKeyClkEvt = 1\n                DoEvents\n\n                p_ScreenTrans = 1   '供給からの画面遷移\n\n                mMutexGymRunning.Create MUTEX_GYMRUNNING\n                If mMutexGymRunning.Wait(0) = False Then\n                    GMN_Log MUTEX_GYMRUNNING & \"は他でロック中なので処理中断\"\n                    GoTo ProcExit\n                End If\n\n                Call frmSPG00111.Show\n                flgKeyClkEvt = 0\n\n                mMutexGymRunning.Release\n\n                Exit Sub\n\n            Case Else               '他\n\n        End Select\n\n\n        'ページ遷移処理\n        Select Case m_Order\n            Case ctlshocd1, ctlshocd2, ctlshocd3\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.blnbtnPage = True\n            Case Else\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.blnbtnPage = False\n        End Select\n\n        Call uctlGuiFrame1.GUI_GetItem(\"tky01\").object.sub_GuiframeSet(uctlGuiFrame1, sKeyName, sKeyType, sKeyVal, sTextData)\n\nProcExit:      '正常終了\n    DoEvents\n    flgKeyClkEvt = 0\n    mMutexGymRunning.Release\n    Exit Sub\n\nProcErr:       '異常終了\n    '***多重イベント防止***\n    Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, True)\n    '***多重イベント防止***\n    m_CardTransmitting = 0 'カードチェック状態のクリア\n    p_ScreenTrans = 0       '画面遷移中ﾌﾗｸﾞのクリア\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：処理区分情報の設定／表示\n' 引数　　：h_KeyVal:sKeyVal\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/07/28\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_SyoriKbnInfoChange(h_sKeyName As String, h_sKeyVal As String) As Long\n    Const c_strProcName As String = \"fnc_SyoriKbnInfoChange\"\nOn Error GoTo ProcErr\n\n    Dim t_SUBINPUT      As Integer\n    Dim t_SUBHOJOKBN    As Integer\n    Dim ret             As Long\n    Dim rs              As New Recordset\n\n    ret = p_GymCmnMaster.GMN_SyoriKbnInfoChange(uctlGuiFrame1, m_Header, h_sKeyName, h_sKeyVal, t_SUBINPUT, t_SUBHOJOKBN)\n\n    '処理区分第二段 = 1:取消 or 2:返品の判断\n    If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then\n        m_HoryuDataCall = -1    '取消・返品の場合、保留呼出は不可とする\n    Else\n        m_HoryuDataCall = 0     '取消・返品ではない場合、保留呼出は可とする\n    End If\n\n    Select Case t_SUBINPUT\n\n        Case 1\n            Call sub_DisplayModeNo(ctlMotohiduke)               '元日付入力画面のための設定\n            Set rs = fnc_GetSDSET007(m_Header.SYORIKBN1, t_SUBHOJOKBN)\n            'ガイダンス表示（ガイダンスを保存しない）\n            Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(gidForm210No + SKBN * 10000&), \"\")\n\n            '指定日付入力中にモードキーウィンドウを非表示にする\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n\n        Case Else\n\n            Set rs = fnc_GetSDSET007(m_Header.SYORIKBN1, m_Header.SYORIKBN2 & m_Header.SYORIKBN3 & m_Header.SYORIKBN4 & m_Header.JYOGAI)\n    End Select\n\n    '処理区分別有効補助区分のサイン取得\n    If rs.EOF = True Then\n        m_Sign = 1\n    Else\n        m_Sign = CLng(rs.Fields(\"サイン\").Value)\n    End If\n\nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：設定キー押下時のコントロール別動作の振り分け\n' 引数　　：sTextData:コントロール入力値\n' 戻値　　：-1=エラー発生時（フォーカスを移動させない)\n'         ： 0=正常\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_inputPart_S() As Long\n    Const c_strProcName As String = \"fnc_inputPart_S\"\nOn Error GoTo ProcErr\n\n    Dim tmpRS          As Recordset\n    Dim ix             As Integer\n    Dim iy             As Integer\n    Dim ret            As Integer\n    Dim lngVbErr       As Long\n    Dim strTemp        As String\n    Dim m_OrderControl As Long\n    Dim m_CdChkCard2   As GymCdChk.CARD2\n    Dim CrdObject      As Object\n    Dim mDetails       As New Collection\n    Dim intDistNo      As Integer\n    Dim svrSHOCD       As String\n    Dim strInputHizuke As String    '入力日付\n    Dim lngSyoriHizuke As Long      '処理日付\n    Dim strgoodscd       As String\n    Dim curTurisen     As Currency  '釣銭\n\n    Select Case m_Order\n\n        Case ctlHRY01   '保留データ一覧\n\n            'レコード通番が取得できていない場合（エラーまたは１件のみのとき）\n            If m_TrnRecNo <= 0 Then\n                m_TrnRecNo = uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.TrnRecNo\n            End If\n\n            '0以下はエラー\n            If m_TrnRecNo <= 0 Then\n                Call m_ERR01.GMNSub_ErrorMsg(con_HoryuErr)\n                Call uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.GMN_SelLength(uctlGuiFrame1.GUI_GetItem(\"txtHRY01\").object)\n                fnc_inputPart_S = -1\n                GoTo ProcExit\n            End If\n\n            'データ処理中レコード管理マスタレコード追加(レコード排他）\n            ret = fnc_InsSDMNG018(m_TrnRecNo)\n            If ret < 0 Then\n                Call m_ERR01.GMNSub_ErrorMsg(con_HoryuErr)\n                Call uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.GMN_SelLength(uctlGuiFrame1.GUI_GetItem(\"txtHRY01\").object)\n                fnc_inputPart_S = -1\n                GoTo ProcExit\n            End If\n\n            Call sub_HoryuDataDisp(m_TrnRecNo)\n\n            '保留データ利用中(カード入力)\n            If m_HoryuDataCall = 1 Then\n                '-------カード情報の入れ替え----------------\n                Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object\n\n                'カード情報のクリア\n                CrdObject.Clear\n\n                Select Case m_HoryuHeader.CardChk.CSBT\n                    Case 1, 4       'カード種別が(1:JIS1 4:JIS1国内専用)の場合\n                        CrdObject.C1_JIS1 = Trim(m_HoryuHeader.CardChk.CDATA)\n                    Case Else       'カード種別が(2:JIS2 3:手入力 の場合)の場合\n                        CrdObject.C1_JIS2 = Trim(m_HoryuHeader.CardChk.CDATA)\n                End Select\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CheckCard(62)\n                m_CardInfoExchange = 1         'カードチェック処理結果の受信を無視するための制御\n\n'Add Start 2017/10/19 J.Akiba [不具合対応]\n                Call GMN_Log(\"保留呼出 m_HoryuHeader.CardChk.KYAKUNM    [\" & m_HoryuHeader.CardChk.KYAKUNM & \"]\", c_strProcName)\n                Call GMN_Log(\"保留呼出 m_HoryuHeader.CardChk.KYAKUNMKANA[\" & m_HoryuHeader.CardChk.KYAKUNMKANA & \"]\", c_strProcName)\n\n\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                m_CdChkCard2.C2_KYAKUNM = m_HoryuHeader.CardChk.KYAKUNM\n                m_CdChkCard2.C2_ANKKYAKUNM = m_HoryuHeader.CardChk.KYAKUNMKANA\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = m_CdChkCard2\n\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Controls(\"txtKyakuNM\").object.Text = m_HoryuHeader.CardChk.KYAKUNM\n'Add End   2017/10/19 J.Akiba [不具合対応]\n\n                Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object\n\n                If m_HoryuHeader.CardChk.BUNCD = colSDSET011.Item(\"CardKaiinBunrui\") Then  'カード会員の場合、カード情報の一部を変更する\n\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                    m_CdChkCard2.C2_BUNCD = m_HoryuHeader.CardChk.BUNCD\n                    m_CdChkCard2.C2_BUNNM = Trim(m_HoryuHeader.CardChk.CNAME)\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = m_CdChkCard2\n\n                    'カードコントロールの表示情報更新\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CardView\n                End If\n\n                '係員表示\n                Call uctlGuiFrame1.GUI_SetText(m_HoryuHeader.STAFFCD, m_CTL_PROPERTYS(ctlKakariin).strCtlName)\n                With uctlGuiFrame1.GUI_GetItem(\"KKT01\").object\n                    ret = .Fun_GetStaffName_StaffCode(.Text)\n                    .Sub_DeactivateColorSet\n                End With\n\n                '物流明細表示（BUT01のヘッダーオブジェクトに保留データのヘッダーを設定）\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Header = m_HoryuHeader\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).Header = m_HoryuHeader\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).Header = m_HoryuHeader\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).Header = m_HoryuHeader\n\n                'BUT01の物流明細に保留データの物流データを設定\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_Clear\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_HoryuDistributionCollect\n\n                '初期ページ表示\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_FirstPageSet\n\n\n                '保留明細データフラグ設定\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuDtlON\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuTrnRecNo = m_TrnRecNo\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_check(0)     '保留データをオブジェクトに追加\n\n                With m_typHoryuInfo\n                    'タイトルの表示\n                    uctlGuiFrame1.GUI_GetItem(\"SMN05\").object.Controls(\"txtGuiTXT01\", 0).Caption = _\n                        uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.Controls(\"txtGuiTXT01\", 0).Caption\n\n                    ''ボタンの表示\n                    If uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.Controls(\"txtGuiTXT02\", 0).Text = \"0\" Then\n                        uctlGuiFrame1.GUI_GetItem(\"SMN05\").object.Controls(\"btnGuiBTN01\", 1).Caption = \"1\"\n                    Else\n                        uctlGuiFrame1.GUI_GetItem(\"SMN05\").object.Controls(\"btnGuiBTN01\", 1).Caption = uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.Controls(\"txtGuiTXT02\", 0).Text\n                    End If\n\n                    '明細の表示\n                    strTemp = \" \"\n                    strTemp = strTemp & fnc_StrLenSetZH(Format(.HoseNo, \"00\"), 2, 2, 1) & \" \"\n\n                    strTemp = strTemp & fnc_StrLenSetZH(.OilName, 11, 1, 2) & \" \"\n\n                    strTemp = strTemp & fnc_StrLenSetZH(Format(.Bara, \"#,##0.00\"), 8, 2, 1) & \"L \"\n\n                    If .SysTime <> \"\" Then\n                        strTemp = strTemp & fnc_StrLenSetZH(Mid(.SysTime, 1, 2) & \":\" & Mid(.SysTime, 3, 2), 5, 1, 1) & \"  \"\n                    Else\n                        strTemp = strTemp & fnc_StrLenSetZH(\"\", 5, 1, 1) & \"  \"\n                    End If\n\n                    strTemp = strTemp & fnc_StrLenSetZH(.StfNm, 10, 1, 2)\n\n                    uctlGuiFrame1.GUI_GetItem(\"SMN05\").object.Controls(\"txtGuiTXT01\", 1).Caption = strTemp\n\n                End With\n\n            '保留データ利用中(明細追加)\n            Else\n                '画面表示制御\n                Call sub_DisplayModeNo(ctlshocd1)\n\n                '保留呼出明細を物流データコレクションに追加 START =============================\n\n                intDistNo = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).btnCaption\n\n                Set m_DistributionCollect = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData\n\n                If intDistNo > m_DistributionCollect.Count Then\n                    iy = intDistNo\n                Else\n                    iy = m_DistributionCollect.Count\n                End If\n\n                For ix = 1 To iy\n                    If ix = intDistNo Then\n                        mDetails.Add m_HoryuDistributionCollect(1), CStr(ix)\n                    Else\n                        mDetails.Add m_DistributionCollect(ix), CStr(ix)\n                    End If\n                Next ix\n\n                Set m_DistributionCollect = Nothing\n                Set m_DistributionCollect = mDetails\n\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_DistributionCollect\n                '保留呼出明細を物流データコレクションに追加 END   =============================\n\n                '供給明細表示を再設定\n\n                '指定行に保留データ明細を設定表示\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData = m_DistributionCollect.Item(intDistNo)\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButDataSet\n\n                '再値付 START =================================================================\n                If m_HoryuHeader.CardChk.KAIIN <> m_Header.CardChk.KAIIN Then\n\n                    svrSHOCD = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData.TradeItem.GOODSCD\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData.TradeItem.GOODSCD = \"\"\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ShouhinCode_LostFocus\n                    m_HoryuDistributionCollect(1).TradeItem.GOODSCD = svrSHOCD\n\n                    'ＱＲクーポン値引き対象商品チェック\n                    ret = m_Header.QR.DiscountTerget_Chk(svrSHOCD, m_QrNebikiKbn, m_QrNebikiVal)\n\n                    If ret = 0 Then\n                        '値引き額セット\n                        With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData.TradeItem\n\n                            .CNEBIKIFLG = 3                     '3：ＱＲ値引\n\n                            Select Case m_QrNebikiKbn\n                                Case 0                          '単価値引額\n                                    .CNEBIKITANKA = m_QrNebikiVal\n\n                                Case 1                          '単価値引率\n\n                                Case 2                          '金額値引額\n\n                                Case 3                          '金額値引率\n\n                                Case 4                          '数量サービス\n\n                            End Select\n                        End With\n                    End If\n\n                    'ホース番号の設定\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData.LineInfo.HoseNo = m_HoryuDistributionCollect(1).LineInfo.HoseNo  'ホース\n\n                    '数量の初期化は商品コード入力時に終わっている\n                    Select Case m_HoryuDistributionOrder\n                        Case 0\n                            Call uctlGuiFrame1.GUI_SetText(CStr(m_HoryuDistributionCollect(1).TradeItem.INP), m_CTL_PROPERTYS(ctlSuuRyou1).strCtlName)\n                        Case 1\n                            Call uctlGuiFrame1.GUI_SetText(CStr(m_HoryuDistributionCollect(1).TradeItem.INP), m_CTL_PROPERTYS(ctlSuuRyou2).strCtlName)\n                        Case 2\n                            Call uctlGuiFrame1.GUI_SetText(CStr(m_HoryuDistributionCollect(1).TradeItem.INP), m_CTL_PROPERTYS(ctlSuuRyou3).strCtlName)\n                    End Select\n\n                    '数量\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).SuuRyou_LostFocus           '再値付\n\n                    '売価単価の初期化\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData.TradeItem.BAIKATANKA = 0\n\n                    '後方値付の場合には下記の処理を行わない\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.TradeItem.VTANKAFLG <> 3 Then\n\n                        '売価単価\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).BaikaTanka_LostFocus(True)  '再値付\n\n                        '売価金額\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).Kingaku_LostFocus           '再値付\n\n                    End If\n\n                    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).ButData\n                        '重複チェック番号\n                        .TradeItem.DUPCHKNO = m_HoryuDistributionCollect(1).TradeItem.DUPCHKNO\n                        'インライン情報\n                        .LineInfo.LINEFLG = m_HoryuDistributionCollect(1).LineInfo.LINEFLG 'インライン／オフラインフラグ\n                        .LineInfo.HoseNo = m_HoryuDistributionCollect(1).LineInfo.HoseNo  'ホース\n                        .LineInfo.TANKNO = m_HoryuDistributionCollect(1).LineInfo.TANKNO  'タンク\n                        .LineInfo.STIME = m_HoryuDistributionCollect(1).LineInfo.STIME    '給油開始時刻\n                        .LineInfo.ETIME = m_HoryuDistributionCollect(1).LineInfo.ETIME    '給油終了時刻\n                        .LineInfo.LANENO = m_HoryuDistributionCollect(1).LineInfo.LANENO  'レーン\n                    End With\n                Else\n                    '商品コード設定時の販売制限情報の取得と設定\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).fncHanbaiSeigenSet\n                End If\n                '再値付 END   =================================================================\n\n                '保留明細データフラグ・保留データのレコード通番設定\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).HoryuDtlON\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", m_HoryuDistributionOrder).HoryuTrnRecNo = m_TrnRecNo\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_GokeiSet                             '合計金額設定\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_check(m_HoryuDistributionOrder)  '保留データをオブジェクトに追加\n\n                Select Case m_HoryuDistributionOrder\n                    Case 0  '1明細目\n                        m_Order = ctlshocd2 - 1\n                    Case 1  '2明細目\n                        m_Order = ctlshocd3 - 1\n                    Case 2  '3明細目\n                        m_Order = ctlshocd3 - 1\n                End Select\n            End If\n\n        Case ctlStart, ctlCard02           'トップオーダー,カード２枚いれ\n\n            '処理日付入力画面表示\n            If uctlGuiFrame1.GUI_GetItem(\"SKB01\").Visible = True Then\n\n                '処理日付表示\n                Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1)\n\n                With m_Header\n                    Call p_GymCmnSysSts.GMN_SyoriHizukeGet(strTemp)\n                    .SYORIBI = strTemp\n                End With\n\n                If m_Header.SYORIBI = uctlGuiFrame1.GUI_GetItem(\"SKB01\").object.Text Then\n                    m_Header.SYORIKBN4 = 0\n                    m_Header.MOTOSYORIBI = \"\"\n\n                    With m_Header\n                        Call p_GymCmnGuiFrame.GMN_DispHojyoKbnNm(uctlGuiFrame1, CStr(.SYORIKBN2 & .SYORIKBN3 & .SYORIKBN4 & .JYOGAI))\n                    End With\n                    Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1)\n\n                    m_HoryuDataCall = 0     '保留呼出対応  処理日付未指定の場合、保留呼出は可とする\n                Else\n\n                    m_Header.MOTOSYORIBI = uctlGuiFrame1.GUI_GetItem(\"SKB01\").object.Text\n                    Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1, m_Header.MOTOSYORIBI)\n\n                    m_HoryuDataCall = -1    '保留呼出対応  処理日付指定の場合、保留呼出は不可とする\n                End If\n\n                Call sub_DisplayModeNo(ctlStart)\n\n                'ガイダンス表示\n                Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n                Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n                Call uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)\n\n            '初期メニューから保留呼出でSMN05(保留データ表示画面)表示時\n            ElseIf uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = True Then\n\n                'カードチェック実行\n                If m_HoryuHeader.CardChk.EKAIIN <> uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_EKAIIN Then\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CheckCard(2)\n                End If\n\n                If m_HoryuHeader.CardChk.BUNCD = colSDSET011.Item(\"CardKaiinBunrui\") Then  'カード会員の場合、カード情報の一部を変更する\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                    m_CdChkCard2.C2_BUNCD = m_HoryuHeader.CardChk.BUNCD\n                    m_CdChkCard2.C2_BUNNM = Trim(m_HoryuHeader.CardChk.CNAME)\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = m_CdChkCard2\n\n                    'カードコントロールの表示情報更新\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CardView\n                End If\n\n                m_HoryuSetteiKey = 1    'SMN05画面表示時、カードスキャンせずに設定キー押下の場合はネガチェックの通信を行わない\n\n                With m_Header.Authori\n                    .REALTIME = m_HoryuHeader.Authori.REALTIME      'リアルタイム識別\n                    .CREDITCD = m_HoryuHeader.Authori.CREDITCD      'クレジットコード\n                    .SECURITY = m_HoryuHeader.Authori.SECURITY      'セキュリティ(正常時は固定で8)\n                    .ERRSTS = m_HoryuHeader.Authori.ERRSTS          'ネガ／オーソリ結果コード\n                    .TTUBAN = m_HoryuHeader.Authori.TTUBAN          '端末処理通番\n                    .XDATE = m_HoryuHeader.Authori.XDATE            '取消前カレンダー日付\n                    .XTUBAN = m_HoryuHeader.Authori.XTUBAN          '取消前端末処理通番\n                End With\n            End If\n\n            fnc_inputPart_S = -1\n\n        Case m_RPIOrder, m_RPIIDummyOrder  '利用ポイント\n        'ヘッダーオブジェクト．netプリカ情報更新\n            With m_clsNWCRMSIF\n                If .glbCRMflg > 0 And (.glbCRMflg <> 3) And m_Header.CRMInfo.CRMERRCD = \"00\" Then\n\n                    '購買値引適用可否設定\n                    Call setUnitPrice(uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2.C2_CRM_NEBIKISELECT)\n\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.DiscountAmount = .CPurchaseResults.DiscountAmount\n\n                    Call GMN_Log(\"m_ChgGenkin [\" & m_ChgGenkin & \"]\", c_strProcName)\n                    Call GMN_Log(\"CNAME_CRM   [\" & colSDSET011(\"CNAME_CRM\") & \"]\", c_strProcName)\n                    Call GMN_Log(\"顧客名漢字  [\" & .CPurchaseResults.NameKanji & \"]\", c_strProcName)\n                    Call GMN_Log(\"顧客名カナ  [\" & .CPurchaseResults.NameKana & \"]\", c_strProcName)\n\n'Del Start 2017/11/09 J.Akiba [福井残課題No55対応]\n'                    '現金代表コード未切替の場合のみ、CRM通信結果を使用する\n'                    If m_ChgGenkin = \"0\" Then\n'Del End   2017/11/09 J.Akiba [福井残課題No55対応]\n'Upd Start 2017/10/12 J.Akiba [矢萩商店 現地不具合報告対応]\n'                        'カードチェック結果の顧客名称が全て空白の場合、CRM通信結果をセットする\n'                        If Trim(m_Header.CardChk.KYAKUNM) = \"\" Then\n'\n'                            'CRM通信結果で取得した顧客名称が空白だった場合、顧客名(カナ)を顧客名称にセットする\n'                            If Trim(.CPurchaseResults.NameKanji) <> \"\" Then\n'                                'ヘッダーオブジェクトに顧客名、顧客名(カナ)をセット\n'                                m_Header.CardChk.KYAKUNM = Trim(.CPurchaseResults.NameKanji)        '顧客名漢字\n'                                m_Header.CardChk.KYAKUNMKANA = Trim(.CPurchaseResults.NameKana)     '顧客名カナ\n'                            Else\n'                                'ヘッダーオブジェクトに顧客名、顧客名(カナ)をセット\n'                                m_Header.CardChk.KYAKUNM = Trim(.CPurchaseResults.NameKana)         '顧客名カナ(取得できない場合はカナをセットする)\n'                                m_Header.CardChk.KYAKUNMKANA = Trim(.CPurchaseResults.NameKana)     '顧客名カナ\n'                            End If\n'\n'                            '上記条件によりセットした顧客名(CRM通信結果)を画面表示\n'                            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Controls(\"txtKyakuNM\").object.Text = m_Header.CardChk.KYAKUNM\n'\n'                        End If\n\n                        'CRM会員カード名称=1(CRM会員名称)の場合後方センター取得名称を設定　以外はカード分類名称\n                        If (colSDSET011(\"CNAME_CRM\") = \"1\") Then\n\n                            'CRM通信結果で取得した顧客名称が空白だった場合、顧客名(カナ)を顧客名称にセットする\n                            If Trim(.CPurchaseResults.NameKanji) <> \"\" Then\n                                'ヘッダーオブジェクトに顧客名、顧客名(カナ)をセット\n                                m_Header.CardChk.KYAKUNM = Trim(.CPurchaseResults.NameKanji)        '顧客名漢字\n                                m_Header.CardChk.KYAKUNMKANA = Trim(.CPurchaseResults.NameKana)     '顧客名カナ\n                            ElseIf Trim(.CPurchaseResults.NameKana) <> \"\" Then\n                                'ヘッダーオブジェクトに顧客名、顧客名(カナ)をセット\n                                m_Header.CardChk.KYAKUNM = Trim(.CPurchaseResults.NameKana)         '顧客名カナ(取得できない場合はカナをセットする)\n                                m_Header.CardChk.KYAKUNMKANA = Trim(.CPurchaseResults.NameKana)     '顧客名カナ\n                            End If\n\n                            '上記条件によりセットした顧客名(CRM通信結果)を画面表示\n                            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Controls(\"txtKyakuNM\").object.Text = m_Header.CardChk.KYAKUNM\n\n                        End If\n'Upd End   2017/10/12 J.Akiba [矢萩商店 現地不具合報告対応]\n\n                        'カードチェック結果．車番が空白または数値変換0の場合、CRM通信結果をセットする\n                        If Len(Trim(m_Header.CardChk.JSYABAN)) <> 0 Then\n                            If CInt(Trim(m_Header.CardChk.JSYABAN)) = 0 Then\n                                'ヘッダーオブジェクトに実車番をセット\n                                m_Header.CardChk.JSYABAN = Trim(.CPurchaseResults.PlateNumber)  '実車番(数値変換0の場合)\n                                'CRMの通信結果を画面にセットする\n                                uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlJitsushaban).strCtlName).object.Text = m_Header.CardChk.JSYABAN\n\n                            End If\n                        Else\n                            'ヘッダーオブジェクトに実車番をセット\n                            m_Header.CardChk.JSYABAN = Trim(.CPurchaseResults.PlateNumber)      '実車番(空白の場合)\n                            'CRMの通信結果を画面にセットする\n                            uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlJitsushaban).strCtlName).object.Text = m_Header.CardChk.JSYABAN\n\n                        End If\n'Del Start 2017/11/09 J.Akiba [福井残課題No55対応]\n'                    End If\n'Del End   2017/11/09 J.Akiba [福井残課題No55対応]\n                End If\n            End With\n\n            '利用ポイントの実装\n            m_Header.CRMInfo.CRMPPNT = CLng(uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.RiyouPointTxt) * m_Sign\n            uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Header = m_Header\n            fnc_inputPart_S = -1\n\n        Case ctlJitsushaban, ctlCard02_Jitsushaban     '実車番入力\n\n            If m_Order = ctlJitsushaban Then\n                '決済カード\n                m_Header.CardChk.JSYABAN = uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlJitsushaban).strCtlName).object.Text\n\n                m_Header.CardChk.JSYABAN = Format(m_Header.CardChk.JSYABAN, \"0000\")\n                Call uctlGuiFrame1.GUI_SetText(m_Header.CardChk.JSYABAN, m_CTL_PROPERTYS(ctlJitsushaban).strCtlName)\n\n            ElseIf m_Order = ctlCard02_Jitsushaban Then\n                'カード2枚読み用\n                m_Header.CardChk.JSYABAN = uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlCard02_Jitsushaban).strCtlName).object.Text\n\n                m_Header.CardChk.JSYABAN = Format(m_Header.CardChk.JSYABAN, \"0000\")\n                Call uctlGuiFrame1.GUI_SetText(m_Header.CardChk.JSYABAN, m_CTL_PROPERTYS(ctlCard02_Jitsushaban).strCtlName)\n\n            End If\n\n            '保留明細は商品コード・ホースａE数量は変更不可\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True Then\n                If m_CTL_PROPERTYS(ctlKakariin).TabStop = False Then\n                    m_Order = ctlshocd2 - 1\n                End If\n            End If\n\n        Case ctlKakariin        '係員入力\n\n            'QR入力済みの場合、有効カードチェックを行う\n            If m_Header.QR.QRChk_Result = 0 Then\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                ret = m_Header.QR.ValCrd_Chk(m_CdChkCard2.C2_BCDFLG)\n\n                If ret <> 0 Then\n                    '受入対象外カードエラー（処理は継続）\n                    Call m_ERR01.GMNSub_ErrorMsg(QrChkACCEPTError + CLng(SKBN) * 10000&)\n\n                    'ＱＲ情報初期化処理\n                    m_Header.QR.QrChkCancel\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CouponName = \"\"\n\n                End If\n            End If\n\n        Case ctlNegaHide\n            fnc_inputPart_S = -1\n\n        '商品コード入力時の処理\n        Case ctlshocd1\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n\n                Call .ShouhinCode_LostFocus\n\n                'ＱＲクーポン値引き対象商品チェック\n                ret = m_Header.QR.DiscountTerget_Chk(.ButData.TradeItem.GOODSCD, m_QrNebikiKbn, m_QrNebikiVal)\n\n                If ret = 0 Then\n                    '値引き情報セット\n                    .ButData.TradeItem.CNEBIKIFLG = 3   '3：ＱＲ値引\n\n                    Select Case m_QrNebikiKbn\n                        Case 0                          '単価値引額\n                            .ButData.TradeItem.CNEBIKITANKA = m_QrNebikiVal\n\n                        Case 1                          '単価値引率\n\n                        Case 2                          '金額値引額\n\n                        Case 3                          '金額値引率\n\n                        Case 4                          '数量サービス\n\n                    End Select\n                End If\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                Else\n                    'ホースｓ力区分\n                    If .HoseNoNKbn = 1 Then\n                        m_CTL_PROPERTYS(ctlHoseNo1).TabStop = True\n                    Else\n                        m_CTL_PROPERTYS(ctlHoseNo1).TabStop = False\n                    End If\n                End If\n\n            End With\n\n        Case ctlshocd2\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                Call .ShouhinCode_LostFocus\n\n                'ＱＲクーポン値引き対象商品チェック\n                ret = m_Header.QR.DiscountTerget_Chk(.ButData.TradeItem.GOODSCD, m_QrNebikiKbn, m_QrNebikiVal)\n\n                If ret = 0 Then\n                    '値引き情報セット\n                    .ButData.TradeItem.CNEBIKIFLG = 3   '3：ＱＲ値引\n\n                    Select Case m_QrNebikiKbn\n                        Case 0                          '単価値引額\n                            .ButData.TradeItem.CNEBIKITANKA = m_QrNebikiVal\n\n                        Case 1                          '単価値引率\n\n                        Case 2                          '金額値引額\n\n                        Case 3                          '金額値引率\n\n                        Case 4                          '数量サービス\n\n                    End Select\n                End If\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                Else\n                    'ホースｓ力区分\n                    If .HoseNoNKbn = 1 Then\n                        m_CTL_PROPERTYS(ctlHoseNo2).TabStop = True\n                    Else\n                        m_CTL_PROPERTYS(ctlHoseNo2).TabStop = False\n                    End If\n                End If\n\n            End With\n\n        Case ctlshocd3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                Call .ShouhinCode_LostFocus\n\n                'ＱＲクーポン値引き対象商品チェック\n                ret = m_Header.QR.DiscountTerget_Chk(.ButData.TradeItem.GOODSCD, m_QrNebikiKbn, m_QrNebikiVal)\n\n                If ret = 0 Then\n                    '値引き情報セット\n                    .ButData.TradeItem.CNEBIKIFLG = 3   '3：ＱＲ値引\n\n                    Select Case m_QrNebikiKbn\n                        Case 0                          '単価値引額\n                            .ButData.TradeItem.CNEBIKITANKA = m_QrNebikiVal\n\n                        Case 1                          '単価値引率\n\n                        Case 2                          '金額値引額\n\n                        Case 3                          '金額値引率\n\n                        Case 4                          '数量サービス\n\n                    End Select\n                End If\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                Else\n                    'ホースｓ力区分\n                    If .HoseNoNKbn = 1 Then\n                        m_CTL_PROPERTYS(ctlHoseNo3).TabStop = True\n                    Else\n                        m_CTL_PROPERTYS(ctlHoseNo3).TabStop = False\n                    End If\n                End If\n            End With\n\n        'ホースNo入力時の処理\n        Case ctlHoseNo1, ctlHoseNo2, ctlHoseNo3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n                Call .HoseNo_LostFocus\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                End If\n            End With\n\n        '数量入力時の処理\n        Case ctlSuuRyou1, ctlSuuRyou2, ctlSuuRyou3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n                If fnc_NebikiZanCheck = 1 Then\n                    .Controls(\"txtSuuRyou\").SelStart = 0\n                    .Controls(\"txtSuuRyou\").SelLength = Len(.Controls(\"txtSuuRyou\").Text)\n                    fnc_inputPart_S = -1\n                    GoTo ProcExit\n                End If\n\n                Call .SuuRyou_LostFocus\n\n                '単価キー入力フラグがONの場合は、強制的に値付け\n                If m_TankaFlg = True Then\n                    .BaikaTankaNKbn = 1\n                End If\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n\n                Else\n                    '月内給油値引残数判定\n                End If\n\n                '単価、原価情報を取得してフォーカスの遷移先を判断する\n                If .BaikaTankaNKbn = 1 Then\n                    m_Order = m_Order\n                End If\n\n                If .BaikaTankaNKbn = 0 And .ScrInfo.GenkaNKbn = 1 Then\n                    m_Order = m_Order + 2\n                End If\n\n                If .BaikaTankaNKbn = 0 And .ScrInfo.GenkaNKbn = 0 Then\n                    Call sub_SetFocusOrder\n                End If\n\n            End With\n            '物流明細レコードのIndexを取得し、税区分への遷移を不可にする\n            If fnc_GetDistributionOrder = 0 Then\n                m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = False\n\n            ElseIf fnc_GetDistributionOrder = 1 Then\n                m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = False\n\n            Else\n                m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = False\n\n            End If\n\n        '単価入力時の処理\n        Case ctlBaikaTanka1, ctlBaikaTanka2, ctlBaikaTanka3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n                Call .BaikaTanka_LostFocus(m_TankaFlg)\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                End If\n\n                '単価、原価情報を取得してフォーカスの遷移先を判断する\n                If .BaikaTankaNKbn = 1 Then\n                    m_Order = m_Order\n                End If\n\n                If .BaikaTankaNKbn = 0 And .ScrInfo.GenkaNKbn = 1 Then\n                    m_Order = m_Order + 2\n                End If\n                If .BaikaTankaNKbn = 0 And .ScrInfo.GenkaNKbn = 0 Then\n                    Call sub_SetFocusOrder\n                End If\n\n            End With\n\n        '金額入力時の処理\n        Case ctlKingaku1, ctlKingaku2, ctlKingaku3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n                Call .Kingaku_LostFocus\n\n                'ポイント利用時のみ\n                If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                    '利用ポイントワークが初期値の場合のみ、入力された利用ポイントをセットする\n                    If m_wkUsePoint = -1 Then\n                        m_wkUsePoint = m_Header.CRMInfo.CRMPPNT\n                    End If\n\n                    '金額より利用ポイントが多い場合、ポイント利用額表示の調整を行う\n                    If m_wkUsePoint > .ButData.TradeItem.BAIKA Then\n                        m_Header.CRMInfo.CRMPPNT = .ButData.TradeItem.BAIKA\n                    Else\n                        m_Header.CRMInfo.CRMPPNT = m_wkUsePoint\n                    End If\n                End If\n\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n\n                '原価キー、後方値付の情報を取得してフォーカスの遷移先を判断する\n\n\n                '原価キーが押下されずかつ、原価入力区分が0の場合は原価入力に遷移しない\n                ElseIf .ScrInfo.GenkaNKbn = 0 Then\n\n                    Call sub_SetFocusOrder\n                End If\n            End With\n\n\n        '支払方法設定\n        Case ctlPayment\n\n            If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then    '決済カード入力があった？\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n            Else\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n            End If\n\n            fnc_inputPart_S = -1\n            '取消 または 返品の場合かつ、選択ボタンが分割でない場合かつ、未入力ではない場合はクレジット取消\n            If (m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2) And _\n               m_Header.PaymentInfo.PAYCODE <> m_CdChkCard2.C2_AUTHPAYCD2 And _\n               uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlPayment).strCtlName).Text <> \"\" Then\n\n                Call fnc_InputPart_H\n            End If\n\n            '選択ボタンが分割でかつ、未入力ではない場合分割回数選択へ遷移する\n            If m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_AUTHPAYCD2 And _\n                uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlPayment).strCtlName).Text <> \"\" Then\n\n                m_CTL_PROPERTYS(ctlPaymentCount).TabStop = True\n                Call sub_NextOrder\n            Else\n                Call m_ERR01.GMNSub_ErrorMsg(shiharaiKubunError - lowerErrorNumber + CLng(SKBN) * 10000&)\n                fnc_inputPart_S = -1\n\n            End If\n\n        '分割回数\n        Case ctlPaymentCount\n\n            fnc_inputPart_S = -1\n\n            '取消 または 返品の場合かつ、未入力ではない場合はクレジット取消\n            If (m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2) And _\n                uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlPaymentCount).strCtlName).Text <> \"\" Then\n\n                Call fnc_InputPart_H\n            Else\n                Call m_ERR01.GMNSub_ErrorMsg(bunkatsuKaisuError - lowerErrorNumber + CLng(SKBN) * 10000&)\n                fnc_inputPart_S = -1\n\n            End If\n\n        '原価単価入力時の処理\n        Case ctlGenkaTanka1, ctlGenkaTanka2, ctlGenkaTanka3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n                Call .GenkaTanka_LostFocus\n                '物流明細フラグを取得してフォーカスの遷移可否を判断する\n                If .ButSeniFlg = 0 Then\n                    fnc_inputPart_S = -1\n                Else\n                    Call sub_SetFocusOrder\n                End If\n            End With\n\n        '承認番号入力\n        Case ctlAuthoriNumber\n\n            '未入力はエラーとする\n            If uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAuthoriNumber).strCtlName).Text = \"\" Then\n                fnc_inputPart_S = -1\n\n            '承認番号オール0の場合エラー\n            ElseIf CCur(uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAuthoriNumber).strCtlName).Text) = 0 And (m_Header.SYORIKBN2 <> 1 Or m_Header.SYORIKBN2 <> 2) Then\n\n                Call m_ERR01.GMNSub_ErrorMsg(AuthoriNumberErr + CLng(SKBN) * 10000&)\n                fnc_inputPart_S = -1\n            Else\n\n                If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then     '決済カード入力があった？\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n                Else\n                    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                End If\n\n                '承認番号桁数チェック\n                If Len(uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAuthoriNumber).strCtlName).Text) > m_CdChkCard2.C2_SNOLEN Then\n                    Call m_ERR01.GMNSub_ErrorMsg(shouninBangouError - lowerErrorNumber + CLng(SKBN) * 10000&)\n                    fnc_inputPart_S = -1\n                Else\n\n                    Call uctlGuiFrame1.GUI_SetText(Right(Format(uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAuthoriNumber).strCtlName).Text, \"0000000000\"), m_CdChkCard2.C2_SNOLEN))\n\n                    'ヘッダーオブジェクト.支払情報.クレジット情報\n                    With m_Header.PaymentInfo\n                       .SYONIN = Right(Format(uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlAuthoriNumber).strCtlName).Text, \"0000000000\"), m_CdChkCard2.C2_SNOLEN)\n                       .SSTTUKI = \"00\"\n                       .LLIMIT = m_CdChkCard2.C2_FLIMIT\n                    End With\n\n                End If\n            End If\n\n        '元カレンダー日付入力\n        Case ctlMotoHizuke\n\n            '日付妥当性チェック\n            strInputHizuke = uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlMotoHizuke).strCtlName).object.Text\n            fnc_inputPart_S = p_GymCmnValChk.GMN_DateChk(strInputHizuke)\n\n            lngSyoriHizuke = CLng(Format$(CDate(DateTime.Now), \"yyyyMMdd\"))\n\n            'チェック異常時は再入力\n            If fnc_inputPart_S = 1 Then\n                Call m_ERR01.GMNSub_ErrorMsg(InputHidukeError + CLng(SKBN) * 10000&)\n                fnc_inputPart_S = -1\n            '指定した日付が未来日付ならNGチェック\n            ElseIf lngSyoriHizuke < CLng(strInputHizuke) Then\n                Call m_ERR01.GMNSub_ErrorMsg(InputHidukeError + CLng(SKBN) * 10000&)\n                fnc_inputPart_S = -1\n            End If\n\n        '元端末処理通番入力\n        Case ctlMotoTTsuban\n\n            Call fnc_InputPart_H\n\n        Case ctlEnd\n\n            fnc_inputPart_S = -1\n\n        '預り金入力\n        Case ctlDeposit\n\n            '預り金が0と入力されたとき 預り金 = 売上合計表示とする\n            If uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.AZUKARI = 0 Then\n\n                uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.AZUKARI = uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.GOKEI\n\n            End If\n\n            '釣銭更新　（釣銭取得）\n            curTurisen = uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.GMN_ChangeSet\n\n            If curTurisen >= 0 Then\n\n            Else\n\n                '預り金が足らない場合\n\n                'エラーメッセージ表示\n                Call m_ERR01.GMNSub_ErrorMsg(AzukariInputErr + CLng(SKBN) * 10000&)      'カード読み取りエラー\n                fnc_inputPart_S = -1\n\n            End If\n        Case ctlPLUinput\n\n            strgoodscd = uctlGuiFrame1.GUI_GetItem(\"PLU01\").object.SHOHINCD\n\n            '桁数の0埋め\n            If (Len(strgoodscd) = 1) Then\n                strgoodscd = \"0000\" & strgoodscd\n            ElseIf (Len(strgoodscd) = 2) Then\n                strgoodscd = \"000\" & strgoodscd\n            ElseIf (Len(strgoodscd) = 3) Then\n                strgoodscd = \"00\" & strgoodscd\n            ElseIf (Len(strgoodscd) = 4) Then\n                strgoodscd = \"0\" & strgoodscd\n            End If\n\n            strTemp = strTemp & \"SELECT\"\n            strTemp = strTemp & \" SDSYO001.GOODSCD \"\n            strTemp = strTemp & \"FROM SDSYO001\"\n            strTemp = strTemp & \" WHERE SDSYO001.GOODSCD = '\" & strgoodscd & \"'\"\n            strTemp = strTemp & \";\"\n            ret = p_GymCmnDB.GMN_GetRecordset(strTemp, tmpRS, lngVbErr)\n\n            '対応している商品コードが無い場合\n            If tmpRS.EOF = True Then\n                Call m_ERR01.GMNSub_ErrorMsgStr(\"商品コード入力エラー\", \"登録されていない商品コードです。\")\n                fnc_inputPart_S = -1\n            End If\n\n        Case ctlSelling\n\n            m_Order = ctlSelling\n            Call fnc_InputPart_H\n\n        Case Else\n\n    End Select\n\nProcExit:      '正常終了\n    If Not tmpRS Is Nothing Then tmpRS.Close\n    Exit Function\nProcErr:       '異常終了\n    fnc_inputPart_S = -1\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\nPrivate Function fnc_GetDistributionOrder() As Long\n    Select Case m_Order\n        Case Is <= ctlGenkaTanka1\n            fnc_GetDistributionOrder = 0\n        Case Is <= ctlGenkaTanka2\n            fnc_GetDistributionOrder = 1\n        Case Is <= ctlGenkaTanka3\n            fnc_GetDistributionOrder = 2\n        Case Else\n            fnc_GetDistributionOrder = 0\n    End Select\nEnd Function\n\n'*****************************************************************\n' 機能　　：コントロールロストフォーカス時の動作の振り分け\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetFocusOrder()\n\n    Dim mm_Order As Integer\n\n    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\").Item(fnc_GetDistributionOrder).ButSeniFlg = 1 Then\n        mm_Order = m_Order\n\n        With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object\n            Select Case fnc_GetDistributionOrder\n'               保留明細は商品コード・ホースａE数量は変更不可\n                Case 0\n                    Call .ButData_check(0)\n                    If m_Header.CRMInfo.CRMRPNT <> 0 Then\n                        If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True Then\n                            m_Order = ctlBaikaTanka1 - 1\n                        Else\n                            m_Order = ctlshocd1 - 1\n                        End If\n                    Else\n                        If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).ScrInfo.HoryuDtl = True Then\n                            m_Order = ctlBaikaTanka2 - 1\n                        Else\n                            m_Order = ctlshocd2 - 1\n                        End If\n                    End If\n                Case 1\n                    Call .ButData_check(1)\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).ScrInfo.HoryuDtl = True Then\n                        m_Order = ctlBaikaTanka3 - 1\n                    Else\n                        m_Order = ctlshocd3 - 1\n                    End If\n                Case 2\n                    Call .ButData_check(2)\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).ScrInfo.HoryuDtl = True Then\n                        m_Order = ctlBaikaTanka3 - 1\n                    Else\n                        m_Order = ctlshocd3 - 1\n                    End If\n\n            End Select\n        End With\n        '単価キー初期化\n        m_TankaFlg = False\n\n    End If\nEnd Sub\n\n'*****************************************************************\n' 機能　　：月内値引給油数判定\n' 引数　　：\n' 戻値　　： 0=値引数量以内の場合\n'         ： 1=値引数量を超えた場合\n'         ：-1=エラー発生時\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/04/01\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_NebikiZanCheck() As Integer\n    Const c_strProcName As String = \"fnc_NebikiZanCheck\"\nOn Error GoTo ProcErr\n\n    Dim strNebikiZanCheck      As String                 '月内給油値引残数判定有無\n    Dim curNebikiZan           As Currency               '値引可能数量\n    Dim intCheckFlg            As Integer                '\n    Dim intRet                 As Integer                '戻り値\n    Dim intIndex               As Integer                'インデックス　ボタンキャプションを使用\n    Dim intInpIndex            As Integer\n    Dim objButData             As New clsGymDistribution '物流明細データオブジェクト（入力中）\n    Dim objtmpButData          As New clsGymDistribution '物流明細データオブジェクト（作業用）\n    Dim colDistributionCollect As Collection             '物流明細データオブジェクト（確定済）\n    Dim inputAmount            As Currency               '入力中の数量\n\n    intRet = 0\n\n    If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then GoTo ProcExit      '取消 または 返品なら残数判定対象外\n    If Trim(Str(colSDSET011(\"CRM_NebikiZanCheck\"))) <> 1 Then GoTo ProcExit     '月内給油値引残数判定有無(= 1 販売制限あり）\n    If m_clsNWCRMSIF.CPurchaseResults Is Nothing Then GoTo ProcExit\n    If m_clsNWCRMSIF.CPurchaseResults.DiscountAmount = 0 Then GoTo ProcExit     '月内給油値引残数が０なら（販売制限なし）\n    If (m_clsNWCRMSIF.glbCRMflg > 0) And (m_clsNWCRMSIF.glbCRMflg <> 3) Then    'CRM通信正常\n    Else\n        GoTo ProcExit\n    End If\n\n    '値引可能数量\n    curNebikiZan = CCur(m_clsNWCRMSIF.CPurchaseResults.DiscountAmount)\n\n    '配列に現在のレコード情報追加\n    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object\n        intInpIndex = .funBtnNo(fnc_GetDistributionOrder)\n    End With\n\n    'レコードが確定済みの物流明細オブジェクト取得\n    Set colDistributionCollect = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData\n\n    '入力中の物流明細オブジェクト取得\n    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n        Set objButData = .ButData\n        inputAmount = CCur(uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(m_Order).strCtlName).Text) '現在のオーダーの数量を取得（オブジェクト上は未確定のため）\n    End With\n\n    '月内給油値引残数判定有無\n    strNebikiZanCheck = Trim(Str(colSDSET011(\"CRM_NebikiZanChkOil\")))\n\n    intIndex = 1\n\n\n    '確定済みレコード処理\n    For Each objtmpButData In colDistributionCollect\n\n        '現在のINDEXと入力中のINDEXが一致した場合\n        If intIndex = intInpIndex Then\n\n            '入力中のレコードが既存レコードの更新の場合\n\n            '月内給油値引有効フラグ\n            If 0 < objButData.TradeItem.OILCD Then\n                intCheckFlg = CInt(Mid(strNebikiZanCheck, objButData.TradeItem.OILCD, 1))   '月内給油値引フラグ\n            Else\n                intCheckFlg = 0\n            End If\n\n            '月内給油値引有効フラグが1（有効）の場合減算\n            If intCheckFlg > 0 Then\n                curNebikiZan = curNebikiZan - inputAmount\n            End If\n\n        Else\n\n            '既存レコード処理\n\n            '月内給油値引有効フラグ\n            If 0 < objtmpButData.TradeItem.OILCD Then\n                intCheckFlg = CInt(Mid(strNebikiZanCheck, objtmpButData.TradeItem.OILCD, 1))   '月内給油値引フラグ\n            Else\n                intCheckFlg = 0\n            End If\n\n            '月内給油値引有効フラグが1（有効）の場合減算\n            If intCheckFlg > 0 Then\n                curNebikiZan = curNebikiZan - CCur(objtmpButData.TradeItem.INP)\n            End If\n\n        End If\n\n        If curNebikiZan < 0 Then\n            'エラー表示\n            Call m_ERR01.GMNSub_ErrorMsg(NebikiZanCheckErr + CLng(SKBN) * 10000&)\n            intRet = 1\n            Exit For\n        End If\n\n        intIndex = intIndex + 1\n    Next\n\n    '入力中のレコードが新規レコードの場合\n    If colDistributionCollect.Count < intInpIndex Then\n\n        '月内給油値引有効フラグ\n        If 0 < objButData.TradeItem.OILCD Then\n            intCheckFlg = CInt(Mid(strNebikiZanCheck, objButData.TradeItem.OILCD, 1))   '月内給油値引フラグ\n        Else\n            intCheckFlg = 0\n        End If\n\n        '月内給油値引有効フラグが1（有効）の場合減算\n        If intCheckFlg > 0 Then\n            curNebikiZan = curNebikiZan - inputAmount\n        End If\n\n        If curNebikiZan < 0 Then\n            'エラー表示\n            Call m_ERR01.GMNSub_ErrorMsg(NebikiZanCheckErr + CLng(SKBN) * 10000&)\n            intRet = 1\n        End If\n\n    End If\n\nProcExit:          '正常終了\n\n    fnc_NebikiZanCheck = intRet\n\n    Exit Function\nProcErr:       '異常終了\n    intRet = -1\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：戻るキー押下時のコントロール別動作の振り分け\n' 引数　　：sTextData:コントロール入力値\n' 戻値　　：-1=エラー発生時（フォーカスを移動させない)\n'         ： 0=正常\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_inputPart_B() As Integer\n    Const c_strProcName As String = \"fnc_inputPart_B\"\nOn Error GoTo ProcErr\n\n    Dim ret As Integer\n\n    Select Case m_Order\n\n        '決済カード入力\n        Case ctlCard02\n            fnc_inputPart_B = -1\n\n        '商品コード入力以前\n        Case Is < ctlshocd1\n\n            'ポイントカード通信済の場合は、カード再入力を無効にする\n            If Not m_clsNWCRMSIF.CPurchaseResults Is Nothing Then\n                fnc_inputPart_B = fnc_NWCRMS_BackKeyCheck\n            Else\n                fnc_inputPart_B = fnc_BackKeyCheck\n            End If\n\n        '商品コード遷移時\n        Case ctlshocd1, ctlshocd2, ctlshocd3\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object\n                If m_Order = ctlshocd1 And .funBtnNo(0) = 1 Then\n                    fnc_inputPart_B = -1\n                Else\n                    If m_Order = ctlshocd1 Then\n                        m_Order = ctlshocd2\n                        Call .ButData_Back\n                    Else\n                        Call .Sub_NowPageSet\n                    End If\n\n                    '単価、原価、後方値付の情報を取得してフォーカスの遷移先を判断する\n                    If .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).ScrInfo.GenkaNKbn = 0 Then\n                        '原価入力へ遷移する\n                        m_Order = m_Order - 1\n                    End If\n\n'後方値付の場合のオーダー判定（条件は修正必要有り、念のため残す）\n'                        '単価、原価、後方値付の情報を取得してフォーカスの遷移先を判断する\n'                        If .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).VTANKAFLG = 3 And _\n'                            .GENKATANKA(fnc_GetDistributionOrder - 1) = 0 Then\n'\n'                            If .BAIKATANKA(fnc_GetDistributionOrder - 1) <> 0 Or _\n'                                .BAIKA(fnc_GetDistributionOrder - 1) <> 0 Then\n'                                '金額入力へ遷移する\n'                                m_Order = m_Order - 1\n'                            Else\n'                                '数量入力へ遷移する\n'                                m_Order = m_Order - 4\n'                            End If\n'                        ElseIf .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).ScrInfo.GenkaNKbn = 0 Then\n'                            '金額入力へ遷移する\n'                            m_Order = m_Order - 1\n'                        End If\n                            '単価キー初期化\n                            m_TankaFlg = False\n                End If\n            End With\n\n        Case ctlBaikaTanka1, ctlBaikaTanka2, ctlBaikaTanka3\n            If (m_Order = ctlBaikaTanka1 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True) Or _\n               (m_Order = ctlBaikaTanka2 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).ScrInfo.HoryuDtl = True) Or _\n               (m_Order = ctlBaikaTanka3 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).ScrInfo.HoryuDtl = True) Then\n\n                Select Case m_Order\n                    Case ctlBaikaTanka1\n                        m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = True\n                    Case ctlBaikaTanka2\n                        m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = True\n                    Case ctlBaikaTanka3\n                        m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = True\n                End Select\n\n                m_Order = m_Order - 2\n\n                '単価キー初期化\n                m_TankaFlg = False\n            End If\n\n        '原価単価遷移時\n        Case ctlGenkaTanka1, ctlGenkaTanka2, ctlGenkaTanka3\n\n'後方値付の場合のオーダー判定（条件は修正必要有り、念のため残す）\n'            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object\n'                '単価入力の情報を取得してフォーカスの遷移先を判断する\n'                If .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).BaikaTankaNKbn = 0 Then\n'                    '数量入力へ遷移する\n'                    m_Order = m_Order - 3\n'                Else\n'                    '金額入力へ遷移する\n'                    m_Order = m_Order\n'                End If\n'            End With\n\n        'ホースｑJ移時\n        Case ctlHoseNo1\n            m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = True\n        Case ctlHoseNo2\n            m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = True\n        Case ctlHoseNo3\n            m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = True\n        '数量遷移時\n        Case ctlSuuRyou1\n            'ホースｓ力区分(0:なし 1:あり 油種商品入力時：１に変更)再設定\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).Sub_HoseNoNKbnSet_B\n\n            m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = True\n            '物流明細レコードの油種コードで判断する\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).HoseNoNKbn = 1 Then\n                m_CTL_PROPERTYS(ctlHoseNo1).TabStop = True\n            Else\n                m_CTL_PROPERTYS(ctlHoseNo1).TabStop = False\n            End If\n        Case ctlSuuRyou2\n            'ホースｓ力区分(0:なし 1:あり 油種商品入力時：１に変更)再設定\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).Sub_HoseNoNKbnSet_B\n\n            m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = True\n            '物流明細レコードの油種コードで判断する\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).HoseNoNKbn = 1 Then\n                m_CTL_PROPERTYS(ctlHoseNo2).TabStop = True\n            Else\n                m_CTL_PROPERTYS(ctlHoseNo2).TabStop = False\n            End If\n        Case ctlSuuRyou3\n            'ホースｓ力区分(0:なし 1:あり 油種商品入力時：１に変更)再設定\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).Sub_HoseNoNKbnSet_B\n\n            m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = True\n            '物流明細レコードの油種コードで判断する\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder).HoseNoNKbn = 1 Then\n                m_CTL_PROPERTYS(ctlHoseNo3).TabStop = True\n            Else\n                m_CTL_PROPERTYS(ctlHoseNo3).TabStop = False\n            End If\n\n        '税区分遷移時\n        Case ctlKazeiKubun1, ctlKazeiKubun2, ctlKazeiKubun3\n            Select Case m_Order\n                Case ctlKazeiKubun1\n                    m_CTL_PROPERTYS(ctlKazeiKubun1).TabStop = False\n                Case ctlKazeiKubun2\n                    m_CTL_PROPERTYS(ctlKazeiKubun2).TabStop = False\n                Case ctlKazeiKubun3\n                    m_CTL_PROPERTYS(ctlKazeiKubun3).TabStop = False\n            End Select\n\n            If (m_Order = ctlKazeiKubun1 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True) Or _\n               (m_Order = ctlKazeiKubun2 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).ScrInfo.HoryuDtl = True) Or _\n               (m_Order = ctlKazeiKubun3 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).ScrInfo.HoryuDtl = True) Then\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object\n                    If m_Order = ctlKazeiKubun1 And .funBtnNo(0) = 1 Then\n                        fnc_inputPart_B = -1\n                    Else\n                        If m_Order = ctlKazeiKubun1 Then\n                            m_Order = ctlKazeiKubun2\n                            Call .ButData_Back\n                        Else\n                            Call .Sub_NowPageSet\n                        End If\n\n                        m_Order = m_Order - 1\n\n                        '単価、原価、後方値付の情報を取得してフォーカスの遷移先を判断する\n                        If .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).ScrInfo.GenkaNKbn = 0 Then\n                            '原価入力へ遷移する\n                            m_Order = m_Order - 1\n                        End If\n\n'後方値付の場合のオーダー判定（条件は修正必要有り、念のため残す）\n'                        '単価、原価、後方値付の情報を取得してフォーカスの遷移先を判断する\n'                        If .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).VTANKAFLG = 3 And _\n'                            .GENKATANKA(fnc_GetDistributionOrder - 1) = 0 Then\n'\n'                            If .BAIKATANKA(fnc_GetDistributionOrder - 1) <> 0 Or _\n'                                .BAIKA(fnc_GetDistributionOrder - 1) <> 0 Then\n'                                '金額入力へ遷移する\n'                                m_Order = m_Order - 1\n'                            Else\n'                                '数量入力へ遷移する\n'                                m_Order = m_Order - 4\n'                            End If\n'                        ElseIf .Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder - 1).ScrInfo.GenkaNKbn = 0 Then\n'                            '金額入力へ遷移する\n'                            m_Order = m_Order - 1\n'                        End If\n                    End If\n                End With\n            End If\n\n        '支払方法\n        Case ctlPayment\n            fnc_inputPart_B = -1\n\n        '支払回数\n        Case ctlPaymentCount\n            '支払方法のCaption設定\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.GMN_PaymentCountCaprionClear\n\n        '承認番号\n        Case ctlAuthoriNumber\n            fnc_inputPart_B = -1\n        Case ctlEnd\n            If m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = False Then\n                fnc_inputPart_B = -1\n            End If\n\n        Case ctlDeposit\n            fnc_inputPart_B = -1\n\n        Case ctlSelling\n\n\n        Case Else\n\n    End Select\nProcExit:      '正常終了\n    Exit Function\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：発行キー押下時のコントロール別動作の振り分け\n' 引数　　：sTextData:コントロール入力値\n' 戻値　　：-1=エラー発生時（フォーカスを移動させない)\n'         ： 0=正常\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/16\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_InputPart_H() As Long\n    Const c_strProcName As String = \"fnc_InputPart_H\"\nOn Error GoTo ProcErr\n\n    Dim ret             As Long\n    Dim m_OrderControl  As Long\n    Dim m_CdChkCard1    As GymCdChk.CARD1\n    Dim m_CdChkCard2    As GymCdChk.CARD2\n\n    '多重発行押下通信防止\n    If (m_SalesDecideTransmitting <> 0) And _\n        (m_SalesDecideTransmitting Mod 10 = 0) Then GoTo ProcExit\n\n    'm_OrderがctlPLUEndだったら処理を実行\n    If (m_Order = ctlPLUEnd) Then\n        '処理を実行させる\n        Call fnc_setPluInfo\n        m_PluBcd = \"\"\n        Call uctlGuiFrame1.GUI_GetItem(\"PLU01\").object.Clear\n        GoTo ProcExit\n    End If\n\n    '明細数が０なら発行押下は無効\n    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData.Count = 0 Then\n        GoTo ProcExit\n    Else\n        '物流明細オブジェクトを取得\n        Set m_DistributionCollect = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData\n    End If\n\n    If m_clsNWCRMSIF.glbCRMflg = 2 Or m_VipUse Then   '決済カード入力があった？\n        m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD1\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n    Else\n        m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n    End If\n\n    Select Case m_Order\n        Case ctlshocd1, ctlshocd2, ctlshocd3    '商品コードオーダー\n            'ヘッダーの支払情報を更新\n            Call sub_clsGymPaymentInfo_DataSet(m_Header.PaymentInfo, m_DistributionCollect)\n\n            'プリカ残高チェック\n            With m_Header\n                If (.NetPrica.NP_FLG = 1) Then\n                    'プリカ前回残高よりも合計金額が下回る場合(絶対値で比較)\n                    If Abs(.PaymentInfo.GOKEI) > Abs(.PaymentInfo.PRCZZAN) Then\n                        'エラーメッセージ表示\n                        Call m_ERR01.GMNSub_ErrorMsg(NetPricaBalanceError + CLng(SKBN) * 10000&)      '利用ポイント入力エラー\n\n                        '売上確定を行わない\n                        GoTo ProcExit\n                    End If\n                End If\n\n                'ポイント利用時のみ合計項目の再計算を行う\n                If .CRMInfo.CRMPPNT <> 0 Then\n\n                    'ポイントよりも合計金額が下回る場合(絶対値で比較)\n                    If Abs(.PaymentInfo.GOKEI) < Abs(.CRMInfo.CRMPPNT) Then\n                        'エラーメッセージ表示\n                        Call m_ERR01.GMNSub_ErrorMsg(RiyouPointError + CLng(SKBN) * 10000&)      '利用ポイント入力エラー\n\n                        '売上確定を行わない\n                        GoTo ProcExit\n                    End If\n\n                    'ポイント利用時は合計金額 = 合計金額 - 利用ポイント\n                    .PaymentInfo.GOKEI = .PaymentInfo.GOKEI - .CRMInfo.CRMPPNT\n\n                End If\n            End With\n\n            'オーソリ入力有無\n            If m_CdChkCard2.C2_SHIHARAI = 1 Then '０：支払方法入力なし　１：支払方法入力あり\n                m_Order = ctlAUT01\n\n                uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.CardCompany = m_CdChkCard2.C2_KAISYA  'カード会社情報を表示する\n                uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.PhoneNo = m_CdChkCard2.C2_TELNO       '電話番号情報を表示する\n\n                 'オーソリ有無に関係なく、支払方法入力オーダーへ\n                m_CTL_PROPERTYS(ctlPayment).TabStop = True          '支払方法入力\n\n                Call uctlGuiFrame1.GUI_GetItem(\"tky01\").object.KeyTypeCreditBtnSet(m_CdChkCard2, Math.Abs(m_Header.PaymentInfo.GOKEI))        '分割回数の情報をセット\n\n                Call sub_NextOrder\n\n                GoTo ProcExit\n\n            ElseIf Left(m_CdChkCard2.C2_BUNCD, 1) = \"0\" And (m_Header.SYORIKBN2 <> 1 Or m_Header.SYORIKBN2 <> 2) Then '現金カードの場合かつ取消 または 返品ではない場合\n\n                '初回表示判定のためTrueに設定\n                m_AZKFirstFlg = True\n\n                '預り金入力制御\n                Call sub_DepositProc\n                GoTo ProcExit\n\n            Else\n\n                Call sub_SalesDecide     '売上確定\n                GoTo ProcExit\n\n            End If\n\n        Case ctlPayment, ctlPaymentCount, ctlMotoTTsuban\n\n            '支払方法が未入力の場合は発行ボタン無視\n            If m_Order = ctlPayment And m_Header.PaymentInfo.PAYCODE = 0 Then\n                GoTo ProcExit\n            End If\n\n            '分割回数入力へ遷移した場合の発行ボタンチェック\n            If m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_AUTHPAYCD2 And uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlPaymentCount).strCtlName).object.Text = \"\" Then\n                GoTo ProcExit\n            End If\n\n            '条件：処理区分第二段=1：取消 または 返品 かつ 支払方法　または　支払回数のとき\n            If (m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2) And _\n                (m_Order = ctlPayment Or m_Order = ctlPaymentCount) Then\n\n                ret = uctlGuiFrame1.GUI_SetVisible(\"SKB02\", True)\n                Call uctlGuiFrame1.GUI_GetItem(\"SKB02\").ZOrder(vbBringToFront)\n\n                m_CTL_PROPERTYS(ctlSKB02).TabStop = False\n                m_CTL_PROPERTYS(ctlMotoHizuke).TabStop = True\n                m_CTL_PROPERTYS(ctlMotoTTsuban).TabStop = True\n\n                'クレジット入力取消コントロールへ遷移させる\n                Call sub_NextOrder\n                GoTo ProcExit\n            Else\n                'オーソリチェックへ\n                ret = uctlGuiFrame1.GUI_SetVisible(\"SKB02\", False)\n\n                m_CTL_PROPERTYS(ctlSKB02).TabStop = False\n                m_CTL_PROPERTYS(ctlMotoHizuke).TabStop = False\n                m_CTL_PROPERTYS(ctlMotoTTsuban).TabStop = False\n\n            End If\n\n            'フロアリミットをセットする\n            With m_Header.PaymentInfo\n               .LLIMIT = m_CdChkCard2.C2_FLIMIT\n            End With\n\n            If colSDSET011.Item(\"NegaAuthFlg\") = 0 Then 'オーソリ有無チェック\n\n                'フロアリミット <= 合計金額の場合\n                If m_CdChkCard2.C2_FLIMIT <= Math.Abs(m_Header.PaymentInfo.GOKEI) Then\n                    m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = True    '承認番号オーダー\n                    m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                Else\n                    m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = False    '承認番号オーダー\n                    m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                End If\n\n                Call sub_NextOrder\n\n            Else\n\n                '条件：処理区分第二段=1：取消、処理区分第二段=2:返品\n                If m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2 Then\n                    '項目移送する\n                    With m_Header.Authori\n                        .XDATE = uctlGuiFrame1.GUI_GetItem(\"SKB02\").object.MotoHizuke       '取消前カレンダー日付\n                        .XTUBAN = uctlGuiFrame1.GUI_GetItem(\"SKB02\").object.MotoTTsuban     '取消前端末処理通番\n                    End With\n\n                    '取消要求を行う場合\n                    ret = fnc_CancelRequest(uctlGuiFrame1.GUI_GetItem(\"AUT01\").object, m_CdChkCard1, m_CdChkCard2, m_Header, m_OrderControl, Me)\n\n                Else\n\n                    '承認番号取得を行う場合\n                    ret = fnc_SalesRequest(uctlGuiFrame1.GUI_GetItem(\"AUT01\").object, m_CdChkCard1, m_CdChkCard2, m_Header, m_OrderControl, Me)\n\n                End If\n\n                m_SalesDecideTransmitting = SD_AuthoriStart 'ｵｰｿﾘ通信中\n\n                If ret <> 0 Then\n                    'オーソリチェック結果によって\n                    If ret < 0 Then\n                        '通信中画面を閉じる\n                        Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(False, Me)\n\n                        'プログラム異常としてアライブに通知する\n                        Call m_ERR01.GMNSub_ErrorMsgStr(\"オーソリエラー\", \"センター接続異常\")\n\n                        '承認番号入力へ遷移させる\n                        m_OrderControl = 1\n                    Else\n\n                        '通信中画面を閉じる\n                        Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(False, Me)\n\n                        'プログラム異常としてアライブに通知する\n                        With uctlGuiFrame1.GUI_GetItem(\"AUT01\").object\n\n                            Call m_ERR01.GMNSub_ErrorMsgStr(\"オーソリエラー\", fnc_AuthoriCheckErr(m_Header, \"T99\", .RequestNo, m_CdChkCard2.C2_EKAIIN, CLng(m_Header.ODTBAN), \"タイムアウトエラー\"))\n\n                        End With\n\n                        '項目移送する\n                        With m_Header.Authori\n                            .REALTIME = 0                                                       'リアルタイム識別\n                            .CREDITCD = m_CdChkCard2.C2_CRECODE                                 'クレジットコード\n                            .SECURITY = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.KESSAI        'セキュリティ\n                            .ERRSTS = \"T99\"                                                     'ネガ／オーソリ結果コード\n                            .TTUBAN = uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.RequestNo       '端末処理通番\n                        End With\n\n                        '承認番号入力へ遷移させる\n                        m_OrderControl = 1\n                    End If\n\n                    m_SalesDecideTransmitting = SD_AuthoriEnd 'ｵｰｿﾘ通信済\n                End If\n\n                If m_OrderControl > 0 Then\n                    '送信データ用の支払区分コードへ変換\n                    Select Case m_Header.PaymentInfo.PAYCODE\n                        '一括\n                        Case m_CdChkCard2.C2_AUTHPAYCD1\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD1\n                        '分割\n                        Case m_CdChkCard2.C2_AUTHPAYCD2\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD2\n                        'ボーナス一括\n                        Case m_CdChkCard2.C2_AUTHPAYCD3\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD3\n                        'リボ払い\n                        Case m_CdChkCard2.C2_AUTHPAYCD4\n                             m_Header.PaymentInfo.PAYCODE = m_CdChkCard2.C2_DATAPAYCD4\n                    End Select\n                End If\n\n                Select Case m_OrderControl\n                    Case 0: 'オーソリ応答待ち\n                        m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                    Case 1: '承認番号入力へ\n                        m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = True    '承認番号入力\n                        m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                        m_Order = ctlMotoTTsuban\n                        Call sub_NextOrder\n\n                    Case 2: '売上確定\n                        'オーソリなしなので通信済みにフラグのセットを行う\n                        m_SalesDecideTransmitting = SD_AuthoriEnd 'ｵｰｿﾘ通信済\n\n                        m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n                        m_Order = ctlAuthoriNumber\n\n                        '取消または返品の場合はオーダーを先にすすめない（※元日付コントロールでオーダーを進めるため）\n                        If (m_Header.SYORIKBN2 = 1 Or m_Header.SYORIKBN2 = 2) Then\n                            GoTo ProcExit\n                        End If\n\n                        Call sub_NextOrder\n\n                    Case Else\n                End Select\n\n            End If\n\n        Case ctlEnd\n\n            ' 売上確定\n            Call sub_SalesDecide\n\n        Case ctlAZKEnd  '発行オーダー（預り金入力）\n\n            '預かり金を入れ替える\n            m_Header.PaymentInfo.AZUKARI = uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.AZUKARI\n\n            'ドロアオープン\n            Call fnc_DrawerOpen\n\n            ' 売上確定\n            Call sub_SalesDecide\n\n        Case Else\n            '発行キーオーダーは上記のオーダーのみ\n    End Select\nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    m_SalesDecideTransmitting = 0\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：売上確定\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/28\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SalesDecide()\n    Const c_strProcName As String = \"sub_SalesDecide\"\nOn Error GoTo ProcErr\n\n    Dim ret                             As Long\n    Dim errorCode                       As Long\n    Dim t_GiftAndServiceTicketCollect   As Collection\n    Dim Trnret                          As Currency\n    Dim m_CdChkCard1                    As GymCdChk.CARD1\n    Dim m_CdChkCard2                    As GymCdChk.CARD2\n    Dim m_dataproc                      As New clsGymDataProc\n    Dim strWhere                        As String\n    Dim ix                              As Integer\n    Dim lngCRMIndex                     As Long\n    Dim m_Cll                           As Collection\n    Dim m_CrmCdChkCard2                 As GymCdChk.CARD2\n\n    Set t_GiftAndServiceTicketCollect = New Collection\n\n    '<-<-<-<-<-ネットプリカ残高引き落とし通信開始->->->->->\n    If m_SalesDecideTransmitting < SD_NetPricaStart Then        'ネットプリカ通信済?\n        'プリカ残高メッセージ要求\n        If (m_clsNWCRMSIF.glbNWCRMSflg >= 2) And (m_Header.NetPrica.NP_FLG = 1) Then\n            If (m_Header.PaymentInfo.GOKEI = 0) Then\n                m_Header.PaymentInfo.PRCPAY = CCur(m_Header.PaymentInfo.GOKEI)          'プリカ支払い\n                m_Header.PaymentInfo.PRCZAN = CCur(m_Header.PaymentInfo.PRCZZAN)        'プリカ残高(前回残高をセット)\n            Else\n\n                m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n                ret = m_clsNWCRMSIF.fnc_PricaBalanceMessage(m_Header, m_DistributionCollect, m_CdChkCard1, m_CdChkCard2, 1, True, Me)\n\n                If ret = 0 Then\n                    m_clsNWCRMSIF.glbNPflg = 1\n                    m_SalesDecideTransmitting = SD_NetPricaStart  'ネットプリカ通信中\n                    GoTo ProcExit   'netプリカ通信結果イベント待ちの処理に移行する\n                Else\n                    'エラー表示\n                    Call m_clsNWCRMSIF.sub_NPErrorMsgDisp(m_clsNWCRMSIF.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n                    'エラーレシート出力\n                    Call fnc_NetPricaErrReceipt(m_Header, m_Header.PaymentInfo.GOKEI, 0)\n                    If Trnret > 0 Then\n                        'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                        ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                        'レシート発行エラーの場合\n                        If ret <> 0 Then\n                            'ログを出力する（未定）\n                        End If\n                     End If\n\n                    'トップオーダーに遷移する\n                    If p_KikiSyubetsu <> 2 Then\n                        Call sub_FormClear\n                    Else\n                        Call sub_FormClear\n                        Call p_GymCmnGuiFrame.GMN_SetProcStartUp(uctlGuiFrame1, \"1\", c_strSyoriKbn_Kyuyu)\n                    End If\n                End If\n            End If\n        End If\n    End If\n\n    '<-<-<-<-<-CRM情報通信開始->->->->->\n    If m_SalesDecideTransmitting < SD_PurchaseRltStart Then  'CRM通信済?\n        ' 売上確定情報\n        If (m_clsNWCRMSIF.glbNWCRMSflg > 0) And (m_clsNWCRMSIF.glbCRMflg > 0) Then\n            ret = m_clsNWCRMSIF.fnc_InquiryCustomerReturn(m_Header, m_DistributionCollect, True)\n            m_SalesDecideTransmitting = SD_PurchaseRltStart  'CRM通信済\n            If ret = 0 Then GoTo ProcExit   '通信が正常に行われた場合は、通信待ちを行う\n        End If\n    End If\n\n    '<-<-<-<-<-中間トランデータ更新開始->->->->->\n    m_SalesDecideTransmitting = SD_End      '売上確定\n\n    'ヘッダーのCRMデータ更新\n    With m_clsNWCRMSIF\n\n        If .glbNWCRMSflg > 0 And .glbCRMflg > 0 Then   'CRM通信有無チェック\n            If .CCustomerReturn.CommonHeader.ResultCode <> \"00\" Then\n                'CRMエラー時。\n                With m_Header.CRMInfo\n                    .CRMFLG = 1\n                    .CRMERRCD = m_clsNWCRMSIF.CCustomerReturn.CommonHeader.ResultCode\n                    .CRMTPNT = 0\n                    .CRMRPNT = 0\n                    .CRMSPNT = 0\n                    .CRMZSUR = 0\n                End With\n            Else\n                m_CrmCdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                Call sub_clsGymCRMInfo_DataSet(m_Header.CRMInfo, .CCustomerReturn, _\n                                                m_CrmCdChkCard2, m_Header.CRMInfo.CRMPPNT) 'CRM通信情報更新\n\n                'サービス券情報を中間TRN用コレクションに追加\n                If m_ServiceTicketCollect.Count > 0 Then\n                    For lngCRMIndex = 1 To m_ServiceTicketCollect.Count\n                        Call t_GiftAndServiceTicketCollect.Add(m_ServiceTicketCollect.Item(lngCRMIndex))\n                    Next lngCRMIndex\n                End If\n\n                '商品券情報を中間TRN用コレクションに追加\n                If m_GiftCertificatesCollect.Count > 0 Then\n                    For lngCRMIndex = 1 To m_GiftCertificatesCollect.Count\n                        Call t_GiftAndServiceTicketCollect.Add(m_GiftCertificatesCollect.Item(lngCRMIndex))\n                    Next lngCRMIndex\n                End If\n\n            End If\n\n            'CRM値引明細データ出力\n            Call .sub_NetworkDiscountInfoDataSet(.CPurchaseResults, m_DistributionCollect, m_DiscountDetailCollect)\n            m_clsNWCRMSIF.glbCRMflg = 0 'CRM通信状態を初期化\n        Else\n            'CRM非通信時はCRM情報を使用しないので初期値をセットする\n            With m_Header.CRMInfo\n                .CRMFLG = 0\n                .CRMERRCD = \"\"\n                .CRMPPNT = 0\n                .CRMTPNT = 0\n                .CRMRPNT = 0\n                .CRMSPNT = 0\n                .CRMZSUR = 0\n            End With\n        End If\n    End With\n\n    'ポイント利用時のみ\n    If m_Header.CRMInfo.CRMPPNT <> 0 Then\n        '物流明細オブジェクトに利用ポイントの値をセットする\n        ret = p_GymCmnCal.GMN_CalProrate(m_DistributionCollect, m_Header.CRMInfo.CRMPPNT, m_Header.SIGN)\n    End If\n\n    If m_HoryuDataCall > 0 Then   '保留呼出中の場合\n\n        strWhere = \"\"\n\n        '処理中保留呼出レコード通番取得\n        For ix = 1 To uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(ix).HoryuDtl = True Then\n                If strWhere <> \"\" Then strWhere = strWhere & \",\"\n                strWhere = strWhere & uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(ix).HoryuTrnRecNo\n            End If\n        Next ix\n\n        If strWhere <> \"\" Then\n            '保留データヘッダー処理済更新\n            ret = fnc_UpdHoryuData001(strWhere)\n            If ret <> 0 Then\n                Err.Raise (0)\n            End If\n        End If\n    End If\n\n    '中間TRN出力\n    Trnret = m_dataproc.GMN_DataOutDistribution(m_Header, m_DistributionCollect, m_DiscountDetailCollect, t_GiftAndServiceTicketCollect, m_QRCoupon)\n\n    'レシート印字\n    If Trnret > 0 Then\n        'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n        ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n        'レシート発行エラーの場合\n        If ret <> 0 Then\n            'ログを出力する（未定）\n\n        End If\n\n    End If\n\n    'プリカ利用かつ、エラーコード初期値かつ、プリカ併用運用以外\n    If (m_Header.NetPrica.NP_FLG = 1) And (m_Header.NetPrica.NP_ERRCODE = \"   \") And (m_clsNWCRMSIF.glbNWCRMSflg <> 3) Then\n        'エラーレシート出力\n        Trnret = fnc_NetPricaErrReceipt(m_Header, m_Header.PaymentInfo.GOKEI, 0)\n\n        If Trnret > 0 Then\n            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n            'レシート発行エラーの場合\n            If ret <> 0 Then\n                'ログを出力する（未定）\n            End If\n        End If\n    End If\n\n    'QR情報のクリア\n    m_Header.QR.QrChkInit\n\n    'トップオーダーに遷移する\n    If p_KikiSyubetsu <> 2 Then\n        Call sub_FormClear\n    Else\n        Call sub_FormClear\n        Call p_GymCmnGuiFrame.GMN_SetProcStartUp(uctlGuiFrame1, \"1\", c_strSyoriKbn_Kyuyu)\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    m_SalesDecideTransmitting = 0\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：次のオーダーに遷移します\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：2016/06/07 S.Ito Gemini標準_現地リポート82\n'         ：\n'*****************************************************************\nPrivate Sub sub_NextOrder()\n    Const c_strProcName As String = \"sub_NextOrder\"\nOn Error GoTo ProcErr\n\n    Dim ix As Integer\n\n    If m_Order < ctlAZKEnd Then\n        Call sub_TRNRecordObjectDataSet(m_Order)\n        For ix = m_Order To ctlAZKEnd Step 1\n            m_Order = m_Order + 1\n            If m_CTL_PROPERTYS(m_Order).TabStop = True Then Exit For\n        Next ix\n\n        Call sub_DisplayModeNo(CLng(m_Order))\n        Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n    End If\n\n   If Not (m_Order = ctlStart Or m_Order = ctlCard02) Then\n        m_CardTransmitting = 0 'カードチェック状態のクリア\n    End If\n\n    'テンキー入力モード設定\n    Call Sub_TenKeyInputModeSet\n\nProcExit:      '正常終了\n    Exit Sub\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：前のオーダーに遷移します。\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：2016/06/07 S.Ito Gemini標準_現地リポート82\n'         ：\n'*****************************************************************\nPrivate Sub sub_BeforeOrder()\n    Const c_strProcName As String = \"sub_BeforeOrder\"\nOn Error GoTo ProcErr\n\n    Dim ix As Integer\n\n    If ctlStart < m_Order Then\n        For ix = m_Order To ctlStart Step -1\n            m_Order = m_Order - 1\n            If m_CTL_PROPERTYS(m_Order).TabStop = True Then Exit For\n        Next ix\n        Call sub_DisplayModeNo(CLng(m_Order))\n        Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n    End If\n\n    'テンキー入力モード設定\n    Call Sub_TenKeyInputModeSet\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：ガイダンス番号の計算\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/06\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GuidanceNoSet() As Long\n\n    Dim t_coefficient As Long\n    Dim intMax        As Integer\n\n    t_coefficient = SKBN * 10000&\n    fnc_GuidanceNoSet = 0 + t_coefficient\n\n    Select Case m_Order\n        Case Is <= ctlHRY01                 '保留一覧\n            fnc_GuidanceNoSet = gidForm240No + t_coefficient\n        Case Is <= ctlStart                 'カード入力オブジェクト\n            fnc_GuidanceNoSet = gidForm10No + t_coefficient\n        Case Is <= m_RPIIDummyOrder         '利用ポイント入力ダミー（非表示の入力待ち部)\n            If uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.CRM_UsePointEnabled = True Then\n                fnc_GuidanceNoSet = gidForm20No + t_coefficient\n            Else\n                fnc_GuidanceNoSet = gidForm21No + t_coefficient\n            End If\n       Case Is <= ctlCard02                'カード入力（２枚入）オブジェクト\n            fnc_GuidanceNoSet = gidForm220No + t_coefficient\n        Case Is <= ctlJitsushaban           '実車番入力\n            fnc_GuidanceNoSet = gidForm50No + t_coefficient\n        Case Is <= ctlCard02_Jitsushaban    '実車番入力(カード2枚目)\n            fnc_GuidanceNoSet = gidForm50No + t_coefficient\n        Case Is <= ctlKakariinM             '係員入力メニュー\n            fnc_GuidanceNoSet = gidForm60No + t_coefficient\n        Case Is <= ctlshocd1                '商品コード入力1\n            '最大明細数の判定、ガイダンスの出力\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n\n                '最大明細数をBUT01から取得\n                intMax = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.intMaxBut\n\n                If CInt(.btnCaption) < intMax Then\n                    '商品コードを入力して下さい。またはパネルより選択して下さい。\n                    fnc_GuidanceNoSet = gidForm70No + t_coefficient\n                Else\n                    'ポイント利用時とそれ以外でガイダンスを区別する\n                    If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                        '発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm250No + t_coefficient\n                    Else\n                        '最大明細数に達しました。発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm131No + t_coefficient\n                    End If\n                End If\n\n            End With\n        Case Is <= ctlKazeiKubun1\n            fnc_GuidanceNoSet = gidForm80No + t_coefficient\n        Case Is <= ctlHoseNo1\n            fnc_GuidanceNoSet = gidForm90No + t_coefficient\n        Case Is <= ctlSuuRyou1\n            fnc_GuidanceNoSet = gidForm100No + t_coefficient\n        Case Is <= ctlBaikaTanka1\n            fnc_GuidanceNoSet = gidForm110No + t_coefficient\n        Case Is <= ctlKingaku1\n            fnc_GuidanceNoSet = gidForm120No + t_coefficient\n        Case Is <= ctlGenkaTanka1\n            fnc_GuidanceNoSet = gidForm130No + t_coefficient\n        Case Is <= ctlshocd2                '商品コード入力2\n            '最大明細数の判定、ガイダンスの出力\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n\n                '最大明細数をBUT01から取得\n                intMax = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.intMaxBut\n\n                If CInt(.btnCaption) < intMax Then\n                    '商品コードを入力して下さい。またはパネルより選択して下さい。\n                    fnc_GuidanceNoSet = gidForm70No + t_coefficient\n                Else\n                    'ポイント利用時とそれ以外でガイダンスを区別する\n                    If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                        '発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm250No + t_coefficient\n                    Else\n                        '最大明細数に達しました。発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm131No + t_coefficient\n                    End If\n                End If\n\n            End With\n        Case Is <= ctlKazeiKubun2\n            fnc_GuidanceNoSet = gidForm80No + t_coefficient\n        Case Is <= ctlHoseNo2\n            fnc_GuidanceNoSet = gidForm90No + t_coefficient\n        Case Is <= ctlSuuRyou2\n            fnc_GuidanceNoSet = gidForm100No + t_coefficient\n        Case Is <= ctlBaikaTanka2\n            fnc_GuidanceNoSet = gidForm110No + t_coefficient\n        Case Is <= ctlKingaku2\n            fnc_GuidanceNoSet = gidForm120No + t_coefficient\n        Case Is <= ctlGenkaTanka2\n            fnc_GuidanceNoSet = gidForm130No + t_coefficient\n        Case Is <= ctlshocd3                '商品コード入力3\n            '最大明細数の判定、ガイダンスの出力\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n\n                '最大明細数をBUT01から取得\n                intMax = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.intMaxBut\n\n                If CInt(.btnCaption) < intMax Then\n                    '商品コードを入力して下さい。またはパネルより選択して下さい。\n                    fnc_GuidanceNoSet = gidForm70No + t_coefficient\n                Else\n                    'ポイント利用時とそれ以外でガイダンスを区別する\n                    If m_Header.CRMInfo.CRMPPNT <> 0 Then\n                        '発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm250No + t_coefficient\n                    Else\n                        '最大明細数に達しました。発行キーを押して下さい。\n                        fnc_GuidanceNoSet = gidForm131No + t_coefficient\n                    End If\n                End If\n\n            End With\n\n        Case Is <= ctlKazeiKubun3\n            fnc_GuidanceNoSet = gidForm80No + t_coefficient\n        Case Is <= ctlHoseNo3\n            fnc_GuidanceNoSet = gidForm90No + t_coefficient\n        Case Is <= ctlSuuRyou3\n            fnc_GuidanceNoSet = gidForm100No + t_coefficient\n        Case Is <= ctlBaikaTanka3\n            fnc_GuidanceNoSet = gidForm110No + t_coefficient\n        Case Is <= ctlKingaku3\n            fnc_GuidanceNoSet = gidForm120No + t_coefficient\n        Case Is <= ctlGenkaTanka3\n            fnc_GuidanceNoSet = gidForm130No + t_coefficient\n        Case Is <= ctlPayment               '支払方法\n            fnc_GuidanceNoSet = gidForm140No + t_coefficient\n        Case Is <= ctlPaymentCount          '分割回数\n            fnc_GuidanceNoSet = gidForm150No + t_coefficient\n        Case Is <= ctlMotoHizuke            '元日付\n            fnc_GuidanceNoSet = gidForm160No + t_coefficient\n        Case Is <= ctlMotoTTsuban           '元端末処理通番\n            fnc_GuidanceNoSet = gidForm170No + t_coefficient\n        Case Is <= ctlAuthoriNumber         '承認番号入力\n            fnc_GuidanceNoSet = gidForm180No + t_coefficient\n        Case Is <= ctlEnd\n            fnc_GuidanceNoSet = gidForm190No + t_coefficient\n        Case Is <= ctlPLUinput\n            fnc_GuidanceNoSet = gidForm260No + t_coefficient\n        Case Is <= ctlSelling\n            fnc_GuidanceNoSet = gidForm270No + t_coefficient\n        Case Is <= ctlPLUEnd\n            fnc_GuidanceNoSet = gidForm280No + t_coefficient\n        Case Is <= ctlDeposit\n            fnc_GuidanceNoSet = gidForm200No + t_coefficient\n        Case Is <= ctlAZKEnd\n            fnc_GuidanceNoSet = gidForm190No + t_coefficient\n\n    End Select\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：カード読取イベント\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/07/26\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub uctlGymCardRader1_DataEvent(ISO1 As String, ISO2 As String, ISO3 As String, JIS2 As String)\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiReadCardData\"\nOn Error GoTo ProcErr\n\n    Dim CrdObject As Object\n\n    If m_CardTransmitting = 1 Then\n        GoTo ProcExit\n\n    ElseIf p_ScreenTrans <> 0 Then\n        GoTo ProcExit\n\n    End If\n\n    '文字入力フォーム又は商品一覧画面または、現金フリー、短縮カード、客名検索、車番検索画面が表示されている状態で\n    'カード読み取りが行われた場合は、カード読み取りイベントを破棄する。\n    If uctlGuiFrame1.GUI_GetItem(\"tky01\").object.GetFromVisible = True Or _\n       uctlGuiFrame1.GUI_GetItem(\"crd01\").object.SyoriSentakuVisible Or _\n       uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.FormShow = True Then\n\n        Exit Sub\n    End If\n\n    If frmSPG00110.Visible = True Then\n        p_ScreenTrans = 1   '供給からの画面遷移\n\n        uctlGuiFrame1.Visible = True\n\n        Call Unload(frmSPG00111)\n    End If\n\n    '決済カード入力か？\n    If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n        Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object\n    Else\n        Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object\n    End If\n\n    'カード情報のクリア\n    CrdObject.Clear\n\n    CrdObject.C1_JIS2 = JIS2\n    CrdObject.C1_JIS1 = ISO2\n    'カードチェックおよびカード情報表示処理（引数には動作指定を設定）\n    Call CrdObject.fun_CheckCard(2)\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：カード入力後処理\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/06\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_CardCheckEnd() As Long\n    Const c_strProcName As String = \"fnc_CardCheckEnd\"\nOn Error GoTo ProcErr\n\n    Dim ret             As Long\n    Dim errorCode       As Integer\n    Dim m_CdChkCard1    As GymCdChk.CARD1\n    Dim m_CdChkCard2    As GymCdChk.CARD2\n    '中間TRN出力変数定義\n    Dim Trnret          As Currency\n\n    Dim strArrayVip()   As String 'VIPカード分類格納変数\n    Dim i               As Integer\n\n    fnc_CardCheckEnd = -1\n\n    'NWCRMSの運用と入力されたカード情報に応じて、遷移先を変更します。\n    m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n    '兼用カードとCRM結果イベントの処理待ちのためのフェイズ\n    Select Case m_CardCheckFASE\n        Case CC_netPricaCheckEnd\n            GoTo FASE3\n        Case CC_PointCardCheckEnd\n            GoTo FASE4\n    End Select\n\n    'ヘッダーオブジェクト．カード情報（決済カード）更新\n    Call sub_clsGymCardChk_DataSet(m_Header.CardChk, m_CdChkCard1, m_CdChkCard2)\n\n    With m_Header\n        .TOKCODE = m_CdChkCard2.C2_CARDGGCD\n    End With\n\n    If m_HoryuDataCall = 1 Then     '保留呼出中（カード入力）\n        If m_HoryuHeader.CardChk.KAIIN = m_CdChkCard2.C2_KAIIN Then\n\n            '保留呼出で同一カードの場合、単価ランクを再設定\n            m_Header.CardChk.TRTBL = m_HoryuHeader.CardChk.TRTBL\n\n        End If\n    End If\n\n    'VIP併用ボタン押下済みの場合\n    If m_VipDisp Then\n\n        'VIPカード分類情報をカンマ分割\n        strArrayVip = Split(colSDSET011.Item(\"FKVipCardBunrui\"), \",\")\n\n        'カードチェック結果がVIPカードの場合、決済カード入力画面に遷移\n        For i = 0 To UBound(strArrayVip())\n            If m_CdChkCard2.C2_BUNCD = strArrayVip(i) Then\n\n                m_VipUse = True\n                m_CTL_PROPERTYS(ctlCard02).TabStop = True\n\n                m_CardTransmitting = 0 'カードチェック状態のクリア\n                GoTo FASE4\n            End If\n        Next i\n\n        'VIPカードではない場合、併用表示を消す\n        m_VipDisp = False\n        m_VipUse = False\n        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.VipVisible = m_VipDisp\n\n    End If\n\n    'CRM情報更新\n    If m_clsNWCRMSIF.glbNWCRMSflg > 0 Then\n        With m_Header.CRMInfo\n            .CRMBUNRUI = m_CdChkCard2.C2_CRM_CARDBUNRUI\n            .CRM_KAIIN = m_CdChkCard2.C2_KAIIN\n            .CRM_EKAIIN = m_CdChkCard2.C2_EKAIIN\n        End With\n    End If\n\n    'カードチェック結果で利用ポイントパーツの表示変更\n    If m_CdChkCard2.C2_CRM_POINT_USESELECT = 1 Then\n        'ポイント利用あり\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.RiyouBtn_Visible = True\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.txtRiyouPoint_Visible = True\n    Else\n        'ポイント利用なし\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.RiyouBtn_Visible = False\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.txtRiyouPoint_Visible = False\n    End If\n\n    If m_CdChkCard2.C2_CRM_POINT_DISPLAYSELECT = 1 Then\n        '累積ポイント表示あり\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.txtRuisekiPoint_Visible = True\n    Else\n        '累積ポイント表示なし\n        uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.txtRuisekiPoint_Visible = False\n    End If\n\nFASE1:\n\n    'ネガ・オーソリ運用が無い場合\n    If colSDSET011.Item(\"NegaAuthFlg\") = 0 Then\n        GoTo FASE2\n    End If\n\n    If m_HoryuSetteiKey > 0 Then\n        m_HoryuSetteiKey = 0\n        'ネガチェック入力待ちを無効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n        GoTo FASE2\n    End If\n\n    'ネガチェック要求\n    ret = fnc_NegaRequest(uctlGuiFrame1.GUI_GetItem(\"AUT01\").object, m_CdChkCard1, m_CdChkCard2)\n    If ret < 0 Then\n        Call m_ERR01.GMNSub_ErrorMsgStr(\"ネガチェックエラー\", \"センター接続異常\")\n        Call Err.Raise(ret)\n\n    ElseIf ret = 0 Then 'ネガチェック要求正常\n        'ネガチェック入力待ちを有効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = True 'ネガチェック入力ダミーフォーカス\n    Else    'ネガチェック不要\n        'ネガチェック入力待ちを無効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n    End If\nFASE2:\n\n    'netプリカ運用チェック\n    'NWCRMS運用 >= 2(ネットプリカ運用あり)\n    If m_clsNWCRMSIF.glbNWCRMSflg >= 2 Then\n\n        'netプリカ有効判定\n        '入力されたカードがnetプリカか？\n        If Not (m_CdChkCard2.C2_CARDDISCERN = 3 Or m_CdChkCard2.C2_CARDDISCERN = 5) Then\n            uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.PricaBtn_Enabled = False\n            GoTo FASE3\n        Else\n            uctlGuiFrame1.GUI_GetItem(\"RPI02\").object.PricaBtn_Enabled = True\n        End If\n\n        '補助区分は一切無効とし、エラーメッセージを表示する\n        If (m_Header.SYORIKBN2 > 0) Or _\n           (m_Header.SYORIKBN3 > 0) Or _\n           (m_Header.SYORIKBN4 > 0) Then\n            Call m_ERR01.GMNSub_ErrorMsg(NetPricaSyoriKbnError + CLng(SKBN) * 10000&)\n            Call sub_FormClear\n\n            Call Err.Raise(0)\n\n        End If\n\n        'プリカ残高メッセージ要求\n        m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n        ret = m_clsNWCRMSIF.fnc_PricaBalanceMessage(m_Header, m_DistributionCollect, m_CdChkCard1, m_CdChkCard2, 2, True, Me)\n\n        If ret = 0 Then\n            m_clsNWCRMSIF.glbNPflg = 1\n            GoTo ProcExit   'netプリカ通信結果イベント待ちの処理に移行する\n        Else\n            Call m_ERR01.GMNSub_ErrorMsg(NetPricaBalanceMessageError + CLng(SKBN) * 10000&)\n            Call sub_FormClear\n            Call Err.Raise(0)\n        End If\n    End If\n\nFASE3:\n\n    If m_HoryuDataCall = 1 Then\n        If (m_CdChkCard2.C2_CARDDISCERN = 1 Or m_CdChkCard2.C2_CARDDISCERN >= 4) Then\n            m_CardTransmitting = 0  'カードチェック状態のクリア\n            Call m_ERR01.GMNSub_ErrorMsg(CRMHoryuYobidashiFuka - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n            GoTo ProcExit\n        End If\n    End If\n\n    'ポイントカード運用チェック\n\n    '(NWCRMS運用 = 1 or 3)の場合\n    If (m_clsNWCRMSIF.glbNWCRMSflg = 1 Or m_clsNWCRMSIF.glbNWCRMSflg = 3 Or m_clsNWCRMSIF.glbNWCRMSflg = 4) Then\n        'カード識別がポイントカードではない場合、処理を中断する\n        If Not (m_CdChkCard2.C2_CARDDISCERN = 1 Or m_CdChkCard2.C2_CARDDISCERN >= 4) Then\n            GoTo FASE4\n        End If\n\n        '顧客購買実績問い合わせ\n        ret = m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 0, True, Me)\n        If ret = 0 Then\n            GoTo ProcExit   'ポイントカード通信結果イベント待ちの処理に移行する\n        Else\n            '通信エラーは現金会員として処理を継続する\n            Call m_ERR01.GMNSub_ErrorMsg(CRMTsuushinError1 - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n\n            m_clsNWCRMSIF.glbCRMflg = 3\n            m_Header.CRMInfo.CRMERRCD = \"--\"\n\n            '中間TRN出力\n            Trnret = fnc_ErrReceipt(m_Header, m_Header.CRMInfo.CRMERRCD)\n\n            If Trnret > 0 Then\n                'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                'レシート発行エラーの場合\n                If ret <> 0 Then\n                    'ログを出力する（未定）\n\n                End If\n            End If\n        End If\n    End If\n\nFASE4:\n    ' 正常終了の場合は、次のオーダーへ移行する\n    fnc_CardCheckEnd = 0\n    Call sub_NextOrder\n\nProcExit:      '正常終了\n    m_CardCheckFASE = 0\n\n    Exit Function\n\nProcErr:       '異常終了\n    m_CardTransmitting = 0 'カードチェック状態のクリア\n    fnc_CardCheckEnd = Err.Number\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：カード（２枚目）入力後処理\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/06\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_CARD2_CardCheckEnd() As Long\n    Const c_strProcName As String = \"fnc_CARD2_CardCheckEnd\"\nOn Error GoTo ProcErr\n\n    Dim ret          As Long\n    Dim t_PRESETVAL  As String\n    Dim m_CdChkCard1 As GymCdChk.CARD1\n    Dim m_CdChkCard2 As GymCdChk.CARD2\n\n    fnc_CARD2_CardCheckEnd = -1\n\n    'NWCRMSの運用と入力されたカード情報に応じて、遷移先を変更します。\n    m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD1\n    m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n\n    '購買値引適用可否設定\n    Call setUnitPrice(m_CdChkCard2.C2_CRM_NEBIKISELECT)\n\n    'ヘッダーオブジェクト．カード情報（２枚読み用）更新\n    Call sub_clsGymCardChkDouble_DataSet(m_Header.CardChkDouble, m_CdChkCard1, m_CdChkCard2)\n\n    If m_HoryuDataCall = 1 Then\n        If m_HoryuHeader.CardChkDouble.CARD2_KAIIN = m_CdChkCard2.C2_KAIIN Then\n            m_Header.CardChkDouble.CARD2_TRTBL = m_HoryuHeader.CardChkDouble.CARD2_TRTBL\n        End If\n    End If\n\n    'カード識別（[カード分類]テーブル）０：通常カード  １：ポイントカード  ２：決済カード  ３：ｎｅｔプリカ ４〜５：併用カード\n    If m_CdChkCard2.C2_CARDDISCERN < 2 Or m_CdChkCard2.C2_CARDDISCERN = 5 Then\n        Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェックエラー\", \"決済不可カードです。\")\n        Err.Raise (0)\n    End If\n\n    '決済カードチェック結果がポイント利用不可かつポイント使用中の場合は警告表示\n    If m_CdChkCard2.C2_CRM_POINT_USESELECT = 0 And m_Header.CRMInfo.CRMPPNT > 0 Then\n        Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェック情報\", \"ポイント利用不可カードです。ポイントは適用されません。\")\n        m_Header.CRMInfo.CRMPPNT = 0\n        uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.PointText = 0\n    End If\n\nFASE1:\n\n    'ネガ・オーソリ運用が無い場合\n    If colSDSET011.Item(\"NegaAuthFlg\") = 0 Then\n        GoTo FASE2\n    End If\n\n    If m_HoryuSetteiKey > 0 Then\n        m_HoryuSetteiKey = 0\n        'ネガチェック入力待ちを無効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n        GoTo FASE2\n    End If\n\n    'ネガチェック要求\n    ret = fnc_NegaRequest(uctlGuiFrame1.GUI_GetItem(\"AUT01\").object, m_CdChkCard1, m_CdChkCard2)\n    If ret < 0 Then\n        Call m_ERR01.GMNSub_ErrorMsgStr(\"ネガチェックエラー\", \"センター接続異常\")\n\n        Err.Raise (0)\n    ElseIf ret = 0 Then 'ネガチェック要求正常\n        'ネガチェック入力待ちを有効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = True 'ネガチェック入力ダミーフォーカス\n    Else    'ネガチェック不要\n        'ネガチェック入力待ちを無効にする\n        m_CTL_PROPERTYS(ctlNegaHide).TabStop = False 'ネガチェック入力ダミーフォーカス\n    End If\n\nFASE2:\n    'netプリカ運用チェック\n    'NWCRMS運用 >= 2\n    If m_clsNWCRMSIF.glbNWCRMSflg >= 2 Then\n\n        '入力されたカードがnetプリカでない場合(C2_CARDDISCERN = 3、5以外)は次フェーズへ\n        If Not (m_CdChkCard2.C2_CARDDISCERN = 3 Or m_CdChkCard2.C2_CARDDISCERN = 5) Then\n            GoTo FASE3\n        End If\n\n        '決済カード入力で、決済不可のnetプリカ入力は無効とする(2012/08/15では存在しない)\n        If m_clsNWCRMSIF.glbCRMflg = 2 And _\n           (m_CdChkCard2.C2_CARDDISCERN = 3 Or m_CdChkCard2.C2_CARDDISCERN = 5) Then\n            Call m_ERR01.GMNSub_ErrorMsgStr(\"カードチェックエラー\", \"決済不可カードです。\")\n            Err.Raise (0)\n        End If\n\n        '補助区分は一切無効とし、エラーメッセージを表示する\n        If (m_Header.SYORIKBN2 > 0) Or _\n           (m_Header.SYORIKBN3 > 0) Or _\n           (m_Header.SYORIKBN4 > 0) Then\n            Call m_ERR01.GMNSub_ErrorMsg(NetPricaSyoriKbnError + CLng(SKBN) * 10000&)\n            Call sub_FormClear\n\n            Call Err.Raise(0)\n        End If\n\n        m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD1\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n        ret = m_clsNWCRMSIF.fnc_PricaBalanceMessage(m_Header, m_DistributionCollect, m_CdChkCard1, m_CdChkCard2, 2, False, Me)\n        m_clsNWCRMSIF.glbNPflg = 1\n        GoTo FASE3   'netプリカ通信結果イベント待ちの処理に移行する\n    End If\n\nFASE3:\n    '適用単価選択は、物流明細オブジェクトで行う\n\n    If m_HoryuDataCall = 1 Then\n        If (m_CdChkCard2.C2_CARDDISCERN = 1 Or m_CdChkCard2.C2_CARDDISCERN >= 4) Then\n            m_CardTransmitting = 0  'カードチェック状態のクリア\n            Call m_ERR01.GMNSub_ErrorMsg(CRMHoryuYobidashiFuka - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n            GoTo ProcExit\n        End If\n    End If\n\nFASE4:\n    ' 正常終了の場合は、次のオーダーへ移行する\n    fnc_CARD2_CardCheckEnd = 0\n    Call sub_NextOrder\n\nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    m_CardTransmitting = 0 'カードチェック状態のクリア\n    fnc_CARD2_CardCheckEnd = Err.Number\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：NWCRMSの通信結果をイベントとして受け取る\n' 引数　　：CRMEnumRespose:メッセージ通信番号(Response)\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2012/12/05\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub m_clsNWCRMSIF_mNWCRMResponseSuccessful(ByVal CRMEnumRespose As Long)\n    Const c_strProcName As String = \"m_clsNWCRMSIF_mNWCRMResponseSuccessful\"\nOn Error GoTo ProcErr\n\n    Dim m_CdChkCard1 As GymCdChk.CARD1\n    Dim m_CdChkCard2 As GymCdChk.CARD2\n\n    '中間TRN出力変数定義\n    Dim Trnret       As Currency\n    Dim errorCode    As Integer\n    Dim ret          As Long\n    Dim bolRet       As Boolean\n    Dim CrdObject    As Object\n\n    'カード情報を変数に格納\n    If m_clsNWCRMSIF.glbCRMflg = 2 Then   '決済カード入力があった？\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n    Else\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n    End If\n\n    Select Case CRMEnumRespose\n        Case EnmCWSInquiryPurchaseResults           '顧客購買実績問合せ-顧客購買実績(CPurchaseResults)\n            With m_clsNWCRMSIF\n                If .glbCRMflg = 9 Then     'キャンセル応答\n                    .glbCRMflg = 0      'CRM通信状態の初期化\n\n                    Call sub_Initialize\n                    GoTo ProcExit\n                End If\n\n                'ＣＲＭエラー時は処理続行\n                If .CPurchaseResults.CommonHeader.ResultCode <> \"00\" Then\n\n                    'ポイント＆プリカ併用の場合処理停止\n                    If m_clsNWCRMSIF.glbNWCRMSflg = 3 And m_CdChkCard2.C2_CARDDISCERN = 5 Then\n                        Call m_ERR01.GMNSub_ErrorMsgStr(\"顧客購買実績問合せ\" & .CPurchaseResults.CommonHeader.ResultCode, \"会員情報の取得に失敗しました。\")\n                        Call sub_FormClear\n\n                        GoTo ProcExit\n                    Else\n                        .glbCRMflg = 3  '通信異常(現金カード扱い）\n                        m_Header.CRMInfo.CRMFLG = 1\n                        m_Header.CRMInfo.CRMERRCD = .CPurchaseResults.CommonHeader.ResultCode\n                        Call m_ERR01.GMNSub_ErrorMsg(CRMTsuushinError1 - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                        '中間TRN出力\n                        Trnret = fnc_ErrReceipt(m_Header, .CPurchaseResults.CommonHeader.ResultCode)\n\n                        If Trnret > 0 Then\n                            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                            'レシート発行エラーの場合\n                            If ret <> 0 Then\n                                'ログを出力する（未定）\n                            End If\n                        End If\n                        Call sub_NextOrder\n                        GoTo ProcExit\n                    End If\n\n                End If\n\n                'カードロックチェック\n                'カードロック：有効(<> 00)の場合、カード再入力\n                If .CPurchaseResults.CardLockInfo <> \"00\" Then\n\n                    Call m_ERR01.GMNSub_ErrorMsg(CRMCardLockError - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                    Call sub_FormClear\n\n                    GoTo ProcExit\n                End If\n\n                'カード排他チェック\n                'カード排他(<> 0)の場合、カード再入力\n                If .CPurchaseResults.ExclusionResponse <> \"0\" Then\n\n                    Call m_ERR01.GMNSub_ErrorMsg(CRMHaitaError - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n                    Call sub_FormClear\n\n                    GoTo ProcExit\n                End If\n\n                .glbCRMflg = 1  '通信正常(確定/決済押下待ち）\n                m_Header.CRMInfo.CRMFLG = 1\n                m_Header.CRMInfo.CRMERRCD = \"00\"\n                Call m_clsNWCRMSIF.sub_CRMWSPurchaseResults(.CPurchaseResults, m_Header)\n\n                '利用ポイント入力コントロールに処理区分第二段をプロパティ値をセット\n                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.SYORIKBN2 = m_Header.SYORIKBN2\n\n                'チャンス情報の表示\n                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.CustomerInfomationChanceInfoAddItem = .CPurchaseResults\n                '会員様へのお知らせの表示\n                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.ServiceInfomationChanceInfoAddItem = .CPurchaseResults\n                'お買上げ履歴の表示\n                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PurchaseInfomationChanceInfoAddItem = .CPurchaseResults\n                '累積ポイントの表示\n                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.RuisekiPointTxt = CStr(CInt(\"00000\" & .CPurchaseResults.AccumulatedPoint))\n\n                '利用ポイント入力を制御する\n                If uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.CRM_UsePointEnabled = True Then\n                    m_CTL_PROPERTYS(m_RPIOrder).TabStop = True\n                    m_CTL_PROPERTYS(m_RPIIDummyOrder).TabStop = False\n                Else\n                    m_CTL_PROPERTYS(m_RPIOrder).TabStop = False\n                    m_CTL_PROPERTYS(m_RPIIDummyOrder).TabStop = True\n                End If\n\n                'CRM残高表示\n                Call uctlGuiFrame1.GUI_SetText(Format(CCur(.CPurchaseResults.DiscountAmount), \"#,##0\"), \"ZDKGuiTXT02\")\n\n                Call sub_NextOrder\n            End With\n        Case EnmCWSInquiryCustomerReturn            '顧客還元データ問合せ-顧客還元データ(CCustomerReturn)\n            With m_clsNWCRMSIF\n                Call m_clsNWCRMSIF.sub_CWSInquiryCustomerReturn(.CCustomerReturn, m_GiftCertificatesCollect, m_ServiceTicketCollect)\n            End With\n            m_SalesDecideTransmitting = SD_PurchaseRltEnd           'CRM通信済\n            Call sub_SalesDecide\n        Case EnmCWSRequestCardLock                  'カードロック登録依頼-カードロック登録応答(CCardLockRequestResponse)\n        Case EnmCWSRequestGiftCertificateReissue    '商品券再発行依頼-顧客還元データ(CCustomerReturn)\n        Case EnmCWSRequestServiceTicketReissue      'サービス券再発行依頼-顧客還元データ(CCustomerReturn)\n        Case EnmCWSPricaBalanceMessage              'プリカ残高照会引落し-残高メッセージ応答(CPricaBalanceMessageResponse)\n            With m_clsNWCRMSIF\n\n                If (.CPricaBalanceMessage.MessageType = 2) Then      '[2：残高照会]の場合\n\n                    If (.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode = \"Z00\") Then\n\n                        '月内給油残量表示・・・非表示\n                        Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption02).strCtlName, False)\n                        Call uctlGuiFrame1.GUI_SetText(\"\", \"ZDKGuiTXT02\")\n\n                        'プリカ残高表示\n                        Call uctlGuiFrame1.GUI_SetVisible(m_CTL_PROPERTYS(ctlZDKTotalCaption03).strCtlName, True)\n                        Call uctlGuiFrame1.GUI_SetText(Format(CCur(.CPricaBalanceMessageResponse.PricaBalance), \"#,##0\"), \"ZDKGuiTXT03\")\n\n                        'プリカ前回残高セット\n                        m_Header.PaymentInfo.PRCZZAN = CCur(.CPricaBalanceMessageResponse.PricaBalance)\n\n                        'NWCRMS+プリカ併用ありの場合\n                        If m_clsNWCRMSIF.glbNWCRMSflg = 3 Then\n\n                            Select Case m_CdChkCard2.C2_CARDDISCERN\n\n                                'プリカ単体\n                                Case 3\n                                    '残高ゼロチェック\n                                    If (m_Header.PaymentInfo.PRCZZAN = 0) Then\n                                        'エラー表示\n                                        Call m_ERR01.GMNSub_ErrorMsg(NetPricaBalanceZeroError + CLng(SKBN) * 10000&)       '残高ゼロエラー\n                                        Call sub_FormClear\n                                        GoTo ProcExit\n                                    Else\n                                        '利用ポイントパーツを使わない設定\n\n                                    End If\n\n                                'ポイント+プリカ併用カード\n                                Case 5\n\n                                    '残高ゼロチェック\n                                    If (m_Header.PaymentInfo.PRCZZAN = 0) Then\n                                        'プリカボタンを無効に設定し処理継続\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PricaBtn_Enabled = False\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.KessaiBtn_Enabled = True\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.GenkinBtn_Enabled = True\n                                    ElseIf colSDSET011.Item(\"CRM_ZanAriKessai\") = \"0\" Then\n                                        'プリカボタンのみを有効に設定\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PricaBtn_Enabled = True\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.KessaiBtn_Enabled = False\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.GenkinBtn_Enabled = False\n                                    Else\n                                        '全ボタンを有効に設定\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PricaBtn_Enabled = True\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.KessaiBtn_Enabled = True\n                                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.GenkinBtn_Enabled = True\n                                    End If\n\n                                Case Else\n\n                            End Select\n\n                        Else\n\n                            '併用無しで残高０はエラー\n                            If (m_Header.PaymentInfo.PRCZZAN = 0) Then\n                                'エラー表示\n                                Call m_ERR01.GMNSub_ErrorMsg(NetPricaBalanceZeroError + CLng(SKBN) * 10000&)       '残高ゼロエラー\n\n                                Call sub_FormClear\n                                GoTo ProcExit\n                            End If\n\n                        End If\n\n                        'プリカ情報を退避\n                        p_CdchkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n                        p_CdchkFlg = True '退避中\n\n                        'カード情報入れ替え\n                        bolRet = fun_CardCheck_NetPricaDaihyou(m_CdChkCard1, m_CdChkCard2, m_Header.SYORIKBN1, p_KikiSyubetsu)\n\n                        If (bolRet = True) Then\n\n                            Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object\n\n                            'カード情報のクリア\n                            CrdObject.Clear\n\n                            Select Case m_CdChkCard2.C2_CTYPE\n                                Case 1, 4       'カード種別が(1:JIS1 4:JIS1国内専用)の場合\n                                    CrdObject.C1_JIS1 = Trim(m_CdChkCard1.C1_JIS1)\n                                Case Else       'カード種別が(2:JIS2 3:手入力 の場合)の場合\n                                    CrdObject.C1_JIS2 = Trim(m_CdChkCard1.C1_JIS2)\n                            End Select\n\n                            '「CrdObject」=「uctlGuiFrame1.GUI_GetItem(\"Crd01\").object」\n                            Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CheckCard(62)\n                            m_CardInfoExchange = 1         'カードチェック処理結果の受信を無視するための制御\n\n                            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1 = m_CdChkCard1\n                            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = m_CdChkCard2\n\n                            'カードコントロールの表示情報更新\n                            Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CardView\n\n                            'NWCRMS+プリカ併用時のみ\n                            If m_clsNWCRMSIF.glbNWCRMSflg = 3 Then\n\n                                '利用ポイントパーツにプリカ残高セット\n                                uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PricaZanTxt = Format(CCur(.CPricaBalanceMessageResponse.PricaBalance), \"#,##0\")\n\n                                'プリカ併用(識別区分=5)の場合、購買実績問い合わせを実施する\n                                If m_CdChkCard2.C2_CARDDISCERN = 5 Then\n\n                                   '顧客購買実績問い合わせ\n                                    ret = m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 0, True, Me)\n\n                                    If ret = 0 Then\n                                        GoTo ProcExit   'ポイントカード通信結果イベント待ちの処理に移行する\n                                    Else\n                                        '通信エラーは処理を終了する\n                                        Call m_ERR01.GMNSub_ErrorMsg(CRMTsuushinError1 - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n\n                                        Call sub_FormClear\n                                        GoTo ProcExit\n\n                                    End If\n\n                                'プリカ単体(識別区分=3)の場合、利用ポイント画面は使わない\n                                ElseIf m_CdChkCard2.C2_CARDDISCERN = 3 Then\n\n                                    m_CTL_PROPERTYS(m_RPIOrder).TabStop = False\n                                    m_CTL_PROPERTYS(m_RPIIDummyOrder).TabStop = False\n\n                                End If\n\n                                Call sub_NextOrder\n                            Else\n\n                                '次のオーダーへ\n                                Call sub_NextOrder\n                            End If\n                        Else\n                            'エラー表示\n                            Call m_ERR01.GMNSub_ErrorMsg(NetPricaTansyukuCardError + CLng(SKBN) * 10000&)         '短縮カード未登録エラー\n\n                            'ローカル排他解除\n                            Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n                            strExclusionLocalKAIIN = \"\"\n\n                            Call sub_FormClear\n                            GoTo ProcExit\n                        End If\n\n                    Else\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        'ローカル排他解除\n                        Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n                        strExclusionLocalKAIIN = \"\"\n\n                        Call sub_FormClear\n                        GoTo ProcExit\n                    End If\n                Else\n                    m_Header.NetPrica.NP_YUKO = Replace(DateAdd(\"d\", colSDSET011.Item(\"NetPricaEnableDays\"), Date), \"/\", \"\") '有効期限\n                    m_Header.NetPrica.NP_SYONINNO = .CPricaBalanceMessageResponse.AthoriInfo.ApprovalNnumber                 '承認番号\n                    m_Header.NetPrica.NP_KANRINO = .CPricaBalanceMessage.SystemManagementNumber                              'システム管理番号\n                    m_Header.NetPrica.NP_RETNO = .CPricaBalanceMessage.RetrievalReferenceNumber                              'リトリーバル番号\n                    m_Header.NetPrica.NP_ERRCODE = .CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode                'エラーコード\n                    m_Header.NetPrica.NP_ERRMSGE = .CPricaBalanceMessageResponse.AthoriInfo.ResultMessage                    'エラーメッセージ\n                    m_Header.PaymentInfo.PRCPAY = CCur(m_Header.PaymentInfo.GOKEI)                                           'プリカ支払い\n                    m_Header.PaymentInfo.PRCZAN = CCur(.CPricaBalanceMessageResponse.PricaBalance)                           'プリカ残高\n\n                    If (.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode = \"Z00\") Then\n                        '中間トラン出力\n                        m_SalesDecideTransmitting = SD_NetPricaEnd  '29: netプリカ通信済\n\n                        Call sub_SalesDecide\n\n                    ElseIf (.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode = \"   \") Then 'タイムアウトの場合\n\n                        '中間トラン出力\n                        m_SalesDecideTransmitting = SD_NetPricaEnd  '29: netプリカ通信済\n\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        'ローカル排他解除\n                        Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n                        strExclusionLocalKAIIN = \"\"\n\n                        Call sub_SalesDecide\n\n                    Else\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        'ローカル排他解除\n                        Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n                        strExclusionLocalKAIIN = \"\"\n\n                        'エラーレシート出力\n                        Trnret = fnc_NetPricaErrReceipt(m_Header, m_Header.PaymentInfo.GOKEI, 0)\n\n                        If Trnret > 0 Then\n                            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                            'レシート発行エラーの場合\n                            If ret <> 0 Then\n                                'ログを出力する（未定）\n                            End If\n                        End If\n\n                        Call sub_FormClear\n                    End If\n                End If\n            End With\n        Case EnmCWSPricaBalanceCharge               'プリカ残高チャージ-残高チャージ応答(CPricaBalanceChargeResponse)\n    End Select\n\nProcExit:      '正常終了\n    'カードチェック状態のクリア\n    m_CardTransmitting = 0\n\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：NWCRMSの通信結果をエラーイベントとして受け取る\n' 引数　　：CRMEnumRespose:メッセージ通信番号(Response)\n'*****************************************************************\nPrivate Sub m_clsNWCRMSIF_mNWCRMResponseException(ByVal CRMEnumRespose As Long)\n    Const c_strProcName As String = \"m_clsNWCRMSIF_mNWCRMResponseException\"\nOn Error GoTo ProcErr\n\n    Dim m_CdChkCard1 As GymCdChk.CARD1\n    Dim m_CdChkCard2 As GymCdChk.CARD2\n    Dim Trnret       As Currency\n    Dim errorCode    As Integer\n    Dim ret          As Long\n    Dim bolRet       As Boolean\n    Dim CrdObject    As Object\n\n    'カード情報を変数に格納\n    If m_clsNWCRMSIF.glbCRMflg = 2 Then   '決済カード入力があった？\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n    Else\n        m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n    End If\n\n    Select Case CRMEnumRespose\n        Case EnmCWSInquiryPurchaseResults           '顧客購買実績問合せ-顧客購買実績(CPurchaseResults)\n\n            With m_clsNWCRMSIF\n\n                If .glbCRMflg = 9 Then  'キャンセル応答\n                    .glbCRMflg = 0      'CRM通信状態の初期化\n\n                    Call sub_Initialize\n                    GoTo ProcExit\n                End If\n\n                'ポイント＆プリカ併用の特別運用の場合、購買実績問合せエラー発生時は処理を停止する\n                If m_clsNWCRMSIF.glbNWCRMSflg = 3 And m_CdChkCard2.C2_CARDDISCERN = 5 Then\n                    '暫定エラー表示\n                    Call m_ERR01.GMNSub_ErrorMsgStr(\"顧客購買実績問合せ\", \"会員情報の取得に失敗しました。\")\n                    Call sub_FormClear\n                    GoTo ProcExit\n\n                Else\n                    Call m_ERR01.GMNSub_ErrorMsg(CRMTsuushinError1 - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n\n                    'ＣＲＭエラー時は処理続行\n                    .glbCRMflg = 3  '通信異常\n                    m_Header.CRMInfo.CRMFLG = 1\n                    m_Header.CRMInfo.CRMERRCD = \"--\"\n\n                    '中間TRN出力\n                    Trnret = fnc_ErrReceipt(m_Header, m_Header.CRMInfo.CRMERRCD)\n                    If Trnret > 0 Then\n                        'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                        ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                        'レシート発行エラーの場合\n                        If ret <> 0 Then\n                            'ログを出力する（未定）\n                        End If\n                    End If\n\n                    '現金代表コードへの切替\n                    If (m_clsNWCRMSIF.glbNWCRMSflg = 1 Or m_clsNWCRMSIF.glbNWCRMSflg = 3) And m_CdChkCard2.C2_CARDDISCERN = 5 Then\n                        ChangeGenkinDaihyou m_CdChkCard1, m_CdChkCard2\n                    End If\n\n                    Call sub_NextOrder\n\n                End If\n            End With\n        Case EnmCWSInquiryCustomerReturn            '顧客還元データ問合せ-顧客還元データ(CCustomerReturn)\n            m_SalesDecideTransmitting = SD_PurchaseRltEnd           'CRM通信済\n            Call sub_SalesDecide\n        Case EnmCWSRequestCardLock                  'カードロック登録依頼-カードロック登録応答(CCardLockRequestResponse)\n        Case EnmCWSRequestGiftCertificateReissue    '商品券再発行依頼-顧客還元データ(CCustomerReturn)\n        Case EnmCWSRequestServiceTicketReissue      'サービス券再発行依頼-顧客還元データ(CCustomerReturn)\n        Case EnmCWSPricaBalanceMessage              'プリカ残高照会引落し-残高メッセージ応答(CPricaBalanceMessageResponse)\n            With m_clsNWCRMSIF\n                If (.CPricaBalanceMessage.MessageType = 2) Then      '[2：残高照会]の場合\n\n                    'ポイント＆プリカ併用かつ併用ありカードの場合、プリカ残高照会エラー発生時は処理を継続する\n                    If m_clsNWCRMSIF.glbNWCRMSflg = 3 And m_CdChkCard2.C2_CARDDISCERN = 5 Then\n                        '暫定エラー表示\n                        Call m_ERR01.GMNSub_ErrorMsgStr(\"プリカ残高照会\", \"プリカ情報の取得に失敗しました。\")\n\n                        'プリカボタンを無効に設定し処理継続\n                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.PricaBtn_Enabled = False\n                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.KessaiBtn_Enabled = True\n                        uctlGuiFrame1.GUI_GetItem(m_RPIObj).object.GenkinBtn_Enabled = True\n\n                        '顧客購買実績問い合わせ\n                        ret = m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 0, True, Me)\n\n                        If ret = 0 Then\n                            GoTo ProcExit   'ポイントカード通信結果イベント待ちの処理に移行する\n                        Else\n                            '通信エラーは処理を終了する\n                            Call m_ERR01.GMNSub_ErrorMsg(CRMTsuushinError1 - CRMlowerErrorNumber + CLng(SKBN) * 10000&)\n\n                            Call sub_FormClear\n                            GoTo ProcExit\n\n                        End If\n\n                    Else\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        Call sub_FormClear\n                        GoTo ProcExit\n\n                    End If\n\n                Else\n                    m_Header.NetPrica.NP_YUKO = Replace(DateAdd(\"d\", colSDSET011.Item(\"NetPricaEnableDays\"), Date), \"/\", \"\")      '有効期限\n                    m_Header.NetPrica.NP_SYONINNO = .CPricaBalanceMessageResponse.AthoriInfo.ApprovalNnumber    '承認番号\n                    m_Header.NetPrica.NP_KANRINO = .CPricaBalanceMessage.SystemManagementNumber                 'システム管理番号\n                    m_Header.NetPrica.NP_RETNO = .CPricaBalanceMessage.RetrievalReferenceNumber                 'リトリーバル番号\n                    m_Header.NetPrica.NP_ERRCODE = .CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode   'エラーコード\n                    m_Header.NetPrica.NP_ERRMSGE = .CPricaBalanceMessageResponse.AthoriInfo.ResultMessage       'エラーメッセージ\n                    m_Header.PaymentInfo.PRCPAY = CCur(m_Header.PaymentInfo.GOKEI)                              'プリカ支払い\n                    m_Header.PaymentInfo.PRCZAN = CCur(.CPricaBalanceMessageResponse.PricaBalance)              'プリカ残高\n\n                    If (.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode = \"Z00\") Then\n                        '中間トラン出力\n                        m_SalesDecideTransmitting = SD_NetPricaEnd  '29: netプリカ通信済\n\n                        Call sub_SalesDecide\n                    ElseIf (.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode = \"   \") Then 'タイムアウトの場合\n\n                        '中間トラン出力\n                        m_SalesDecideTransmitting = SD_NetPricaEnd  '29: netプリカ通信済\n\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        Call sub_SalesDecide\n\n                    Else\n                        'エラー表示\n                        Call .sub_NPErrorMsgDisp(.CPricaBalanceMessageResponse.AthoriInfo.InternalErrorCode)      '通信異常エラー\n\n                        'エラーレシート出力\n                        Trnret = fnc_NetPricaErrReceipt(m_Header, m_Header.PaymentInfo.GOKEI, 0)\n\n                        If Trnret > 0 Then\n                            'レシート発行（パラメータ：レコード通番, ホース(給油以外は0), エラーコード）\n                            ret = frmSPG00110.uctlGymPrintReq1.GymPrintReq(Trnret, 0, errorCode)\n\n                            'レシート発行エラーの場合\n                            If ret <> 0 Then\n                                'ログを出力する（未定）\n                            End If\n                        End If\n\n                        Call sub_FormClear\n                    End If\n                End If\n            End With\n        Case EnmCWSPricaBalanceCharge               'プリカ残高チャージ-残高チャージ応答(CPricaBalanceChargeResponse)\n    End Select\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：中間ＴＲＮデータオブジェクトのデータを更新します\n'            入力オーダー別にセットする必要のあるデータが異なります｡\n' 引数　　：sData:メッセージ通信番号(Response)\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2012/09/01\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_TRNRecordObjectDataSet(ByVal h_order As Long)\n    Const c_strProcName As String = \"sub_TRNRecordObjectDataSet\"\nOn Error GoTo ProcErr\n\n    Dim m_CdChkCard1    As GymCdChk.CARD1\n    Dim m_CdChkCard2    As GymCdChk.CARD2\n    Dim lntTemp         As Integer\n    Dim strTemp         As String\n    Dim ix              As Integer\n\n    Select Case h_order\n        Case ctlStart\n\n            m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n            m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n            'ヘッダーオブジェクト．カード情報（決済カード）更新\n            Call sub_clsGymCardChk_DataSet(m_Header.CardChk, m_CdChkCard1, m_CdChkCard2)\n\n            With m_Header\n                .TOKCODE = m_CdChkCard2.C2_CARDGGCD\n            End With\n\n            'ヘッダーオブジェクト．netプリカ情報更新\n            '処理日付表示\n            Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1)\n\n            With m_Header\n                '元処理日付の設定はこの後行っている\n                Call p_GymCmnSysSts.GMN_SyoriHizukeGet(strTemp)\n                .SYORIBI = strTemp\n            End With\n\n            '物流明細使用情報送信\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n\n            If m_HoryuDataCall = 1 Then      '保留呼出（初期メニューから選択時）\n\n                '保留データ作成\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_Clear\n\n                '取得データの初期化\n\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_HoryuDistributionCollect\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_FirstPageSet\n\n                '再値付(別カード使用の場合）\n                If m_HoryuHeader.CardChk.KAIIN <> m_CdChkCard2.C2_KAIIN Then\n                    '数量を再設定＝単価再値付を行う\n                    Dim svrSHOCD As String\n                    svrSHOCD = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.TradeItem.GOODSCD\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.TradeItem.GOODSCD = \"\"\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ShouhinCode_LostFocus\n                    m_HoryuDistributionCollect(1).TradeItem.GOODSCD = svrSHOCD\n\n                    'ＱＲクーポン値引き対象商品チェック\n\n\n                    'ホース番号の設定\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.LineInfo.HoseNo = m_HoryuDistributionCollect(1).LineInfo.HoseNo  'ホース\n\n                    '数量の初期化は商品コード入力時に終わっている\n                    Call uctlGuiFrame1.GUI_SetText(CStr(m_HoryuDistributionCollect(1).TradeItem.INP), m_CTL_PROPERTYS(ctlSuuRyou1).strCtlName)\n                    Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).SuuRyou_LostFocus           '再値付\n\n\n                    '売価単価の初期化\n                    uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.TradeItem.BAIKATANKA = 0\n\n                    '後方値付の場合には下記の処理を行わない\n                    If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData.TradeItem.VTANKAFLG <> 3 Then\n                        '売価単価\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).BaikaTanka_LostFocus(True)  '再値付\n\n                        '売価金額\n                        Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).Kingaku_LostFocus           '再値付\n                    End If\n\n                    '給油関連情報の再設定\n                    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ButData\n                        '重複チェック番号\n                        .TradeItem.DUPCHKNO = m_HoryuDistributionCollect(1).TradeItem.DUPCHKNO\n                        'インライン情報\n                        .LineInfo.LINEFLG = m_HoryuDistributionCollect(1).LineInfo.LINEFLG 'インライン／オフラインフラグ\n                        .LineInfo.HoseNo = m_HoryuDistributionCollect(1).LineInfo.HoseNo  'ホース\n                        .LineInfo.TANKNO = m_HoryuDistributionCollect(1).LineInfo.TANKNO  'タンク\n                        .LineInfo.STIME = m_HoryuDistributionCollect(1).LineInfo.STIME    '給油開始時刻\n                        .LineInfo.ETIME = m_HoryuDistributionCollect(1).LineInfo.ETIME    '給油終了時刻\n                        .LineInfo.LANENO = m_HoryuDistributionCollect(1).LineInfo.LANENO  'レーン\n                    End With\n\n\n                    m_CTL_PROPERTYS(ctlBaikaTanka1).TabStop = True     '一明細目の単価入力は動的に入力可能とする\n                    m_CTL_PROPERTYS(ctlKingaku1).TabStop = True        '一明細目の金額入力は単価入力が可能になった場合、入力可能とする\n                End If\n\n                '保留明細データフラグ・レコード通番設定\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuDtlON\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuTrnRecNo = m_TrnRecNo\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_check(0)     '保留データをオブジェクトに追加\n\n            End If\n\n\n            '初期値設定が無い場合は、物流明細オブジェクトを初期化\n            Set m_DistributionCollect = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData\n            If m_DistributionCollect.Count <> 0 Then\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_DistributionCollect\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_FirstPageSet\n            End If\n\n            'ヘッダーデータオブジェクト更新\n            Call sub_clsGymHeader_DataSet(m_Header)\n\n            '当日外？\n            If m_Header.SYORIKBN4 = 1 Or m_Header.SYORIKBN4 = 9 Then\n                m_Header.MOTOSYORIBI = uctlGuiFrame1.GUI_GetItem(\"SKB01\").object.Text '元処理日付（指定日付)\n                Call p_GymCmnGuiFrame.GMN_DispSyoriDate(uctlGuiFrame1, m_Header.MOTOSYORIBI)\n            End If\n\n            m_Header.RYOF = m_CdChkCard2.C2_RYOFLG          '領収書発行可否区分\n            m_Header.CRETRNFLG = m_CdChkCard2.C2_CRETRNFLG  'クレジットTRN出力フラグ\n\n            '実車番入力制御\n            If m_CdChkCard2.C2_SYABAN = 1 And m_CdChkCard2.C2_SYABANKETA > 0 Then      '実車番入力が有効の場合のみ\n                m_CTL_PROPERTYS(ctlJitsushaban).TabStop = True                          '実車番入力\n                uctlGuiFrame1.GUI_GetItem(\"txtJitsuShaban\").object.MaxLength = m_CdChkCard2.C2_SYABANKETA\n            ElseIf m_CdChkCard2.C2_SYABAN = 2 And _\n                    m_CdChkCard2.C2_SYABANKETA > 0 And _\n                    Trim(m_CdChkCard2.C2_JSYABAN) = \"0000\" Then\n                m_CTL_PROPERTYS(ctlJitsushaban).TabStop = True                          '実車番入力\n                uctlGuiFrame1.GUI_GetItem(\"txtJitsuShaban\").object.MaxLength = m_CdChkCard2.C2_SYABANKETA\n            Else\n                m_CTL_PROPERTYS(ctlJitsushaban).TabStop = False                         '実車番入力\n            End If\n\n            If m_HoryuDataCall = 1 Then      '保留データ利用中の場合\n                '実車番表示制御,項目移送制御\n                '保留ﾃﾞｰﾀに実車番がない時:車番、実車番共にｶｰﾄﾞﾃﾞｰﾀから格納\n                '　　　　〃　　　　ある時:車番はｶｰﾄﾞﾃﾞｰﾀから、実車番は未処理ﾃﾞｰﾀから格納\n\n                m_Header.CardChk.SYABAN = m_CdChkCard2.C2_JSYABAN   'ｶｰﾄﾞ上の車番を設定\n\n                m_Header.CardChk.JSYABAN = m_CdChkCard2.C2_JSYABAN  'ｶｰﾄﾞ上の実車番を設定\n\n                If Len(Trim(m_Header.CardChk.JSYABAN)) <> 0 Then\n                    If CLng(Trim(m_Header.CardChk.SYABAN)) = 0 Then\n                        m_Header.CardChk.SYABAN = \"\"\n                    End If\n                End If\n\n                Call uctlGuiFrame1.GUI_SetText(m_Header.CardChk.JSYABAN, m_CTL_PROPERTYS(ctlJitsushaban).strCtlName) '一旦、カード情報のカードチェック結果を設定\n                If Trim(m_HoryuHeader.CardChk.JSYABAN) <> \"\" Then       '未処理ﾃﾞｰﾀに実車番があればそれを優先\n                    If CLng(Trim(m_HoryuHeader.CardChk.JSYABAN)) > 0 Then\n                        m_Header.CardChk.JSYABAN = m_HoryuHeader.CardChk.JSYABAN\n                        Call uctlGuiFrame1.GUI_SetText(Trim(m_HoryuHeader.CardChk.JSYABAN), m_CTL_PROPERTYS(ctlJitsushaban).strCtlName)\n                    End If\n                End If\n            End If\n\n        'カード入力（２枚入）オブジェクト\n        Case ctlCard02\n            m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n            m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n            'ヘッダーオブジェクト．カード情報（２枚読み用）更新\n            Call sub_clsGymCardChkDouble_DataSet(m_Header.CardChkDouble, m_CdChkCard1, m_CdChkCard2)\n\n            '物流明細使用情報(ポイントカード情報)送信\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                .PointCard2 = m_CdChkCard2\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                .PointCard2 = m_CdChkCard2\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                .PointCard2 = m_CdChkCard2\n            End With\n\n            m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD1\n            m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.CARD2\n            'ヘッダーオブジェクト．カード情報（２枚読み用）更新\n            Call sub_clsGymCardChk_DataSet(m_Header.CardChk, m_CdChkCard1, m_CdChkCard2)\n\n            With m_Header\n                .TOKCODE = m_CdChkCard2.C2_CARDGGCD\n            End With\n\n            m_Header.RYOF = m_CdChkCard2.C2_RYOFLG          '領収書発行可否区分\n            m_Header.CRETRNFLG = m_CdChkCard2.C2_CRETRNFLG  'クレジットTRN出力フラグ\n\n            If m_VipUse Then\n                'ＶＩＰ併用時の単価ランクは、ＶＩＰカードの情報を使用する\n                m_Header.CardChk.TMNO = m_Header.CardChkDouble.CARD2_TMNO\n                m_Header.CardChk.TRTBL = m_Header.CardChkDouble.CARD2_TRTBL\n                m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n            End If\n\n            '物流明細使用情報送信\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n\n            If m_HoryuDataCall = 1 Then      '保留データ利用中の場合\n                '未処理データ作成\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_Clear\n\n                '取得データの初期化\n\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_HoryuDistributionCollect\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_FirstPageSet\n\n                '再値付(別カード使用の場合）\n                With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                    If m_HoryuHeader.CardChkDouble.CARD2_KAIIN <> m_CdChkCard2.C2_KAIIN Then\n                        '数量を再設定＝単価再値付を行う\n                        .ButData.TradeItem.INP = 0\n                        Call .SuuRyou_LostFocus             '再値付\n\n                        .ButData.TradeItem.BAIKATANKA = 0\n\n                        '後方値付の場合には下記の処理を行わない\n                        If .ButData.TradeItem.VTANKAFLG <> 3 Then\n\n                            Call .BaikaTanka_LostFocus(True)    '再値付\n\n                            Call .Kingaku_LostFocus             '再値付\n\n                        End If\n\n                        m_CTL_PROPERTYS(ctlBaikaTanka1).TabStop = True     '一明細目の単価入力は動的に入力可能とする\n                        m_CTL_PROPERTYS(ctlKingaku1).TabStop = True        '一明細目の金額入力は単価入力が可能になった場合、入力可能とする\n                    End If\n                End With\n\n                '保留明細データフラグ・レコード通番設定\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuDtlON\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).HoryuTrnRecNo = m_TrnRecNo\n\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData_check(0)     '保留データをオブジェクトに追加\n            End If\n\n            '初期値設定が無い場合は、物流明細オブジェクトを初期化\n            Set m_DistributionCollect = uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData\n            If m_DistributionCollect.Count <> 0 Then\n                uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ButData = m_DistributionCollect\n                Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Sub_FirstPageSet\n            End If\n\n            'カード２枚目の実車番入力制御\n            m_CTL_PROPERTYS(ctlJitsushaban).TabStop = False     '一枚目の実車番入力はスキップ\n            If m_CdChkCard2.C2_SYABAN = 1 And m_CdChkCard2.C2_SYABANKETA > 0 Then      '実車番入力が有効の場合のみ\n                m_CTL_PROPERTYS(ctlCard02_Jitsushaban).TabStop = True                          '実車番入力\n                uctlGuiFrame1.GUI_GetItem(\"txtCard02_JitsuShaban\").object.MaxLength = m_CdChkCard2.C2_SYABANKETA\n            ElseIf m_CdChkCard2.C2_SYABAN = 2 And _\n                    m_CdChkCard2.C2_SYABANKETA > 0 And _\n                    Trim(m_CdChkCard2.C2_JSYABAN) = \"0000\" Then\n                m_CTL_PROPERTYS(ctlCard02_Jitsushaban).TabStop = True                          '実車番入力\n                uctlGuiFrame1.GUI_GetItem(\"txtCard02_JitsuShaban\").object.MaxLength = m_CdChkCard2.C2_SYABANKETA\n            Else\n                m_CTL_PROPERTYS(ctlCard02_Jitsushaban).TabStop = False                         '実車番入力\n            End If\n\n        '利用ポイント入力\n        Case m_RPIOrder, m_RPIIDummyOrder\n            m_CdChkCard1 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1\n            m_CdChkCard2 = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2\n\n            '物流明細使用情報送信(現金代表へ切替時を想定)\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n            With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2)\n                .Header = m_Header\n                .CARD2 = m_CdChkCard2\n                .SIGN = m_Sign\n            End With\n\n        Case ctlKakariin\n            m_Header.STAFFCD = uctlGuiFrame1.GUI_GetItem(\"KKT01\").object.StaffCode   '係員コード\n            m_Header.STAFFNM = uctlGuiFrame1.GUI_GetItem(\"KKT01\").object.StaffName   '係員名\n\n            '保留明細は商品コード・ホースａE数量は変更不可\n            If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.TransmitNega = False Then   'ネガ・チェック応答待ちではない？\n                If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True Then\n                    Call sub_DisplayModeNo(ctlshocd1)   '商品明細を表示\n                    m_Order = ctlshocd2 - 1             '保留呼び出し時の初期表示は一明細目のオーダーをパス\n                End If\n            End If\n\n        Case ctlNegaHide\n            '保留明細は商品コード・ホースａE数量は変更不可\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True Then\n                Call sub_DisplayModeNo(ctlshocd1)   '商品明細を表示\n                m_Order = ctlshocd2 - 1             '保留呼び出し時の初期表示は一明細目のオーダーをパス\n            End If\n\n        Case ctlEnd\n\n    End Select\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：預り金処理制御\n' 引数　　：なし\n' 作成者　：Y.Sekiguchi\n' 作成日付：2013/02/08\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_DepositProc()\n    Const c_strProcName As String = \"sub_DepositProc\"\nOn Error GoTo ProcErr\n\n    Dim ret                    As Long\n    Dim lngTurisenNo           As String    '釣銭機No.\n    Dim lngAzukariKinInputNone As String    '現金カード預り金入力\n\n    '自動釣銭機運用無し\n    If colSDSET011(\"PosTsurisenkiNo\") <> 0 Then\n\n        '売り上げレシート、釣銭確認レシート発行\n        'ここで釣銭機入金額に入れ替え\n\n        ' 売上確定\n        Call sub_SalesDecide\n\n        GoTo ProcExit\n    End If\n\n    '預り金運用判断\n    Select Case colSDSET011(\"AzukariKinInputNone\")\n\n        Case 0  '預り金入力：無し　ドロアオープン：無し\n\n            '売り上げレシート、釣銭確認レシート発行\n\n            ' 売上確定\n            Call sub_SalesDecide\n\n\n        Case 1  '預り金入力：無し　ドロアオープン：有り\n\n            'ドロアオープンのみ\n\n            'ドロアオープン\n            Call fnc_DrawerOpen\n\n            ' 売上確定\n            Call sub_SalesDecide\n\n        Case 2  '預り金入力：有り　ドロアオープン：有り\n\n            '預り金入力\n            m_Order = ctlAZK01\n            m_CTL_PROPERTYS(ctlDeposit).TabStop = True      '預り金入力へ\n            Call sub_NextOrder\n\n        Case Else\n    End Select\n\nProcExit:      '正常終了\n    Exit Sub\nProcErr:\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　　: ドロアオープン\n' 引数  　　:\n' 戻値　　　:\n' 作成者　　: Y.sekiguchi\n' 作成日付　: 2012/11/29\n' 変更履歴　:\n'*****************************************************************\nPrivate Function fnc_DrawerOpen()\n    Const c_strProcName As String = \"fnc_DrawerOpen\"\nOn Error GoTo ProcErr\n\n    Dim errorCode As Long       'ドロアオープンエラーコード\n    Dim ret       As Long       'ドロアオープンリターン値\n    Dim lngIniErr As Long       '初期化エラーコード\n    Dim lngIniRet As Long       '初期化リターン値\n\n    '初期化\n    lngIniRet = DrawerIF1.IfInitial(p_GymCmnSysSts.GMN_KikiIdGet, lngIniErr)\n\n    'ドロアオープン\n    ret = DrawerIF1.DrawerOpen(p_GymCmnSysSts.GMN_KikiIdGet, errorCode)\n\n    fnc_DrawerOpen = ret\n\nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n\n'*****************************************************************\n' 機能    ：テンキー入力モード設定\n' 引数　　：\n' 戻値　　：\n' 作成者　：H.nakajima\n' 作成日付：2012/09/12\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub Sub_TenKeyInputModeSet()\n\n    With uctlGuiFrame1.GUI_GetItem(\"tky01\").object\n        Select Case m_Order\n\n            '税区分\n            Case ctlKazeiKubun1, ctlKazeiKubun2, ctlKazeiKubun3\n                '税区分入力のみ\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeTaxKbn)\n\n            'ホースNo、単価、原価入力\n            Case ctlHoseNo1, ctlBaikaTanka1, ctlGenkaTanka1, _\n              ctlHoseNo2, ctlBaikaTanka2, ctlGenkaTanka2, _\n              ctlHoseNo3, ctlBaikaTanka3, ctlGenkaTanka3\n\n                'デフォルトテンキー､テンキー\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeSuji)\n\n            '数量入力\n            Case ctlSuuRyou1, ctlSuuRyou2, ctlSuuRyou3\n                '処理キーの有効無効切替\n                With uctlGuiFrame1.GUI_GetItem(\"tky01\").object\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyGenka, True)      '原価ボタン\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyHoryuYobi, False) '保留呼出ボタン　保留呼出対応\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyTanka, True)      '単価ボタン\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyLineC, False)     'ラインＣボタン\n                End With\n                'デフォルトテンキー､テンキーと特殊切替\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeSuji, GuiTKY01v2.c_keyTypeTanka)\n\n            '金額入力\n            Case ctlKingaku1, ctlKingaku2, ctlKingaku3\n                'デフォルトテンキー､テンキー切替\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeSuji)\n\n            '商品コード､商品検索一覧\n            Case ctlshocd1, ctlshocd2, ctlshocd3\n                '処理キーの有効無効切替\n                With uctlGuiFrame1.GUI_GetItem(\"tky01\").object\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyGenka, False)     '原価ボタン\n                    If m_HoryuDataCall = -1 Then    '取消・日付指定の場合、保留呼出不可\n                        Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyHoryuYobi, False)\n                    Else\n                        Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyHoryuYobi, True)\n                    End If\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyTanka, False)     '単価ボタン\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyLineC, True)      'ラインＣボタン\n                End With\n                'デフォルト商品キー､テンキーと特殊と商品キー切替\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeShohin, GuiTKY01v2.c_keyTypeSuji, GuiTKY01v2.c_keyTypeTanka)\n\n            '支払方法\n            Case ctlAUT01, ctlPayment\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeCreditHouhou)\n\n                '初期値をセット(暫定対応)\n                'ヘッダーオブジェクト.ネガオーソリ情報\n                With m_Header.Authori\n                    .XDATE = \"00000000\"                                                 '取消前カレンダー日付\n                    .XTUBAN = \"00000\"                                                   '取消前端末処理通番\n                End With\n\n\n            '分割回数\n            Case ctlPaymentCount\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeCreditKaisu)\n\n            'その他､デフォルトテンキーの切り替えなし\n            Case Else\n\n                '処理キーの有効無効切替\n                With uctlGuiFrame1.GUI_GetItem(\"tky01\").object\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyGenka, False)     '原価ボタン\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyHoryuYobi, False) '保留呼出ボタン　保留呼出対応\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyTanka, False)     '単価ボタン\n                    Call .subKeyEnableSet(GuiKEY01.DMNc_KeyTkyLineC, False)     'ラインＣボタン\n                End With\n\n                Call .sub_InputModeEnable(GuiTKY01v2.c_keyTypeSuji)\n\n        End Select\n    End With\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：オーダーの遷移と同時の画面内容の切り替え\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_DisplayModeNo(ByRef h_EnumOrderNo As Long)\n    Const c_strProcName As String = \"sub_DisplayModeNo\"\nOn Error GoTo ProcErr\n\n    Dim ret As Long\n\n    '売上処理は、トップオーダーで共通関数を呼び出し\n    Select Case h_EnumOrderNo\n        Case ctlStart, ctlMotohiduke\n            '保留呼び出し時は簡易メニューボタンの押下無効\n            If m_HoryuDataCall <= 0 Then\n                Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n            Else\n                Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n            End If\n        Case Else\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n    End Select\n\n    Select Case h_EnumOrderNo\n\n        Case ctlHRY01  '保留データ一覧\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"tky01\", \"SKB01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"HRY01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n\n            Call uctlGuiFrame1.GUI_GetItem(\"HRY01\").ZOrder(vbBringToFront)   '最前面に移動する\n\n        Case ctlMotohiduke  '元日付入力\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"tky01\", \"SKB01\")\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"HRY01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", True)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n\n            ret = uctlGuiFrame1.GUI_SetTextFocus(\"SKB01\")       'フォーカスを遷移\n            Call uctlGuiFrame1.GUI_GetItem(\"SKB01\").ZOrder(vbBringToFront)   '最前面に移動する\n\n        Case ctlStart  'トップオーダー\n\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = p_GymCmnGuiFrame.GMNc_frmMaxWidth - p_GymCmnGuiFrame.GMNc_frmTopMenuModeWidth\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmTopMenuModeWidth\n            End If\n\n            Call uctlGuiFrame1.GUI_GetItem(\"SMN01\").object.UserControl_Initialize\n\n            InitGuis Array(\"tky01\", \"SMN01\")\n\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 1\n            uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1\n\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CouponVisible = True\n\n\n            If m_HoryuDataCall > 0 Then\n                If Not p_KikiSyubetsu = 2 Then\n                    Me.Left = 0\n                    Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n                End If\n\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.C2_CardCheckState = 0\n                uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.C2_CardCheckState = 0\n                uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n                uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = True\n                ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            Else\n                uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = True\n                uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n                ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", False)\n            End If\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n\n            ret = uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(ctlStart).strCtlName)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"HRY01\", False)   '保留データ一覧の表示\n\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AUT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"PLU01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AZK01\", False)\n\n            m_CTL_PROPERTYS(ctlRPT).TabStop = False                     '利用ポイント入力\n            m_CTL_PROPERTYS(ctlRiyouPointInput).TabStop = False         '利用ポイント入力\n            m_CTL_PROPERTYS(ctlRiyouPointInputDummy).TabStop = False    '利用ポイント入力ダミー（非表示の入力待ち部)\n\n            m_CTL_PROPERTYS(ctlRPT2).TabStop = False                    '利用ポイント入力2\n            m_CTL_PROPERTYS(ctlRiyouPointInput2).TabStop = False        '利用ポイント入力2\n            m_CTL_PROPERTYS(ctlRiyouPointInputDummy2).TabStop = False   '利用ポイント入力ダミー2（非表示の入力待ち部)\n\n            m_CTL_PROPERTYS(ctlCard02Dummy).TabStop = False             'カード入力（２枚入）\n            m_CTL_PROPERTYS(ctlCard02).TabStop = False                  'カード入力（２枚入）オブジェクト\n            m_CTL_PROPERTYS(ctlCard02_Jitsushaban).TabStop = False      '実車番入力（２枚入）\n            m_CTL_PROPERTYS(ctlAUT02).TabStop = False                   'ネガチェック入力（フォーム表示範囲外）\n            m_CTL_PROPERTYS(ctlNegaHide).TabStop = False                'ネガチェック入力ダミーフォーカス\n            m_CTL_PROPERTYS(ctlAUT01).TabStop = False                   'オーソリ入力\n            m_CTL_PROPERTYS(ctlPayment).TabStop = False                 '支払方法入力\n\n            m_CTL_PROPERTYS(ctlSKB02).TabStop = False                   'クレジット取消入力コントロール\n            m_CTL_PROPERTYS(ctlMotoHizuke).TabStop = False              '元日付入力\n            m_CTL_PROPERTYS(ctlMotoTTsuban).TabStop = False             '元端末処理通番入力\n\n            m_CTL_PROPERTYS(ctlPaymentCount).TabStop = False            '分割回数入力\n            m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = False           '承認番号入力\n            m_CTL_PROPERTYS(ctlEnd).TabStop = False                     'オーソリ情報確認発行オーダー\n\n            m_CTL_PROPERTYS(ctlSelling).TabStop = False                     'オーソリ情報確認発行オーダー\n            m_CTL_PROPERTYS(ctlDeposit).TabStop = False                 '預り金入力\n            m_CTL_PROPERTYS(ctlAZKEnd).TabStop = False                  '確認発行オーダー\n\n        Case ctlCard02  'カード２枚目\n\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"SMN03\", \"tky01\")\n            m_CTL_PROPERTYS(ctlCard02).TabStop = True                  'カード入力（２枚入）オブジェクト\n            m_CTL_PROPERTYS(ctlCard02_Jitsushaban).TabStop = True      '実車番入力（２枚入）\n            m_CTL_PROPERTYS(ctlJitsushaban).TabStop = False            '実車番入力\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = True\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)    'クーポンおよびVIP表示用\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n\n            Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n\n        Case m_RPIOrder, m_RPIIDummyOrder '利用ポイント入力\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"tky01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(m_RPIObj, True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n            Call uctlGuiFrame1.GUI_GetItem(m_RPIObj).ZOrder(vbBringToFront)   '最前面に移動する\n\n        Case ctlCard02_Jitsushaban  'カード２枚目の実車番入力\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 1\n            uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 0\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n\n            Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n\n        Case ctlJitsushaban  'テンキー押下/実車番入力\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n            uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1\n\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n\n        Case ctlKakariin  '係員入力\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n            InitGuis Array(\"tky01\", \"KKT01\", \"KKM01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n                uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 1\n                uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 0\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", False)\n\n            Call uctlGuiFrame1.GUI_GetItem(\"KKM01\").ZOrder(vbBringToFront)   '最前面に移動する\n\n        Case ctlNegaHide    'ネガチェック入力待ち\n            If uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.TransmitNega = True Then\n                Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.sub_HID07_Visible(True, Me)\n            End If\n        Case ctlshocd1  '物流明細入力(トップオーダー)\n            If Not p_KikiSyubetsu = 2 Then\n                Me.Left = 0\n                Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n            End If\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n                uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 1\n                uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 0\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n\n            ret = uctlGuiFrame1.GUI_SetVisible(\"HRY01\", False)   '保留呼出対応\n\n        Case ctlBaikaTanka1  '売価単価１　保留呼出時、物流明細トップオーダー\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).ScrInfo.HoryuDtl = True Then\n                If Not p_KikiSyubetsu = 2 Then\n                    Me.Left = 0\n                    Me.Width = p_GymCmnGuiFrame.GMNc_frmMaxWidth\n                End If\n                uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n                uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n                uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n                ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n                If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 0\n                    uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 1\n                    ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                    ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n                Else\n                    uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.Style = 1\n                    uctlGuiFrame1.GUI_GetItem(\"Crd02\").object.Style = 0\n                    ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                    ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                    Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n                End If\n                ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n            End If\n\n        Case ctlPayment  '支払方法\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AUT01\", True)\n\n            m_CTL_PROPERTYS(ctlPayment).TabStop = True          '支払方法入力\n            m_CTL_PROPERTYS(ctlPaymentCount).TabStop = False    '分割回数入力\n            m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = False   '承認番号入力\n            m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").ZOrder(vbBringToFront)\n\n            '支払方法のCaption設定\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.GMN_PaymentCaprionSet\n\n        Case ctlPaymentCount  '支払回数\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AUT01\", True)\n\n            m_CTL_PROPERTYS(ctlPayment).TabStop = True          '支払方法入力\n            m_CTL_PROPERTYS(ctlPaymentCount).TabStop = True     '分割回数入力\n            m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = False   '承認番号入力\n            m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").ZOrder(vbBringToFront)\n\n            '支払回数のCaption設定\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.GMN_PaymentCountCaprionSet\n\n        Case ctlAuthoriNumber   '承認番号\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AUT01\", True)\n\n            m_CTL_PROPERTYS(ctlPayment).TabStop = False         '支払方法入力\n            m_CTL_PROPERTYS(ctlPaymentCount).TabStop = False    '分割回数入力\n            m_CTL_PROPERTYS(ctlAuthoriNumber).TabStop = True    '承認番号入力\n            m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").ZOrder(vbBringToFront)\n\n            '承認番号のCaption設定\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").object.GMN_AuthoriNumberCaprionSet\n\n        Case ctlEnd  '発行オーダー\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AUT01\", True)\n\n            m_CTL_PROPERTYS(ctlPayment).TabStop = False         '支払方法入力\n            m_CTL_PROPERTYS(ctlPaymentCount).TabStop = False    '分割回数入力\n            m_CTL_PROPERTYS(ctlEnd).TabStop = True              'オーソリ情報確認発行オーダー\n\n            Call uctlGuiFrame1.GUI_GetItem(\"AUT01\").ZOrder(vbBringToFront)\n\n        Case ctlPLU01\n\n            'レコードがなかった場合は、商品コードと売価を登録できるように変更する。\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False      '最初のメニュー\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False      '最初のメニュー下のほう\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)       'テンキー\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)       'カード入力コントロール\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)      'カード入力コントロール(テキストボックスひとつだけ\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", False)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)       '係員入力コントロール\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)      '係員パネルコントロー\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)       '物流明細入力\n            ret = uctlGuiFrame1.GUI_SetVisible(\"PLU01\", True)       'PLU入力コントロール\n\n            m_Order = ctlPLU01\n\n            m_CTL_PROPERTYS(ctlPLUinput).TabStop = True              'PLU入力\n            m_CTL_PROPERTYS(ctlSelling).TabStop = True              'PLU入力\n\n            Call uctlGuiFrame1.GUI_GetItem(\"PLU01\").ZOrder(vbBringToFront)\n\n        Case ctlDeposit '預り金入力\n\n            InitGuis Array(\"tky01\", \"KKT01\", \"BUT01\")\n            uctlGuiFrame1.GUI_GetItem(\"SMN01\").Visible = False      '最初のメニュー\n            uctlGuiFrame1.GUI_GetItem(\"SMN05\").Visible = False\n            uctlGuiFrame1.GUI_GetItem(\"SMN03\").Visible = False      '最初のメニュー下のほう\n            ret = uctlGuiFrame1.GUI_SetVisible(\"tky01\", True)       'テンキー\n            ret = uctlGuiFrame1.GUI_SetVisible(\"SKB01\", False)   '元日付入力の表示\n            If (m_clsNWCRMSIF.glbCRMflg < 2 Or m_clsNWCRMSIF.glbCRMflg = 3) And Not m_VipUse Then\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)       'カード入力コントロール\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", False)      'カード入力コントロール(テキストボックスひとつだけ\n            Else\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd01\", True)\n                ret = uctlGuiFrame1.GUI_SetVisible(\"Crd02\", True)\n\n                Call uctlGuiFrame1.GUI_GetItem(\"Crd02\").ZOrder(vbBringToFront)  'カード２枚目を最前面に\n            End If\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI01\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"RPI02\", False)\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKT01\", True)       '係員入力コントロール\n            ret = uctlGuiFrame1.GUI_SetVisible(\"KKM01\", False)      '係員パネルコントロー\n            ret = uctlGuiFrame1.GUI_SetVisible(\"BUT01\", True)       '物流明細入力\n            ret = uctlGuiFrame1.GUI_SetVisible(\"AZK01\", True)       '預り金入力コントロール\n\n            '売上合計に合計金額を代入\n            uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.GOKEI = m_Header.PaymentInfo.GOKEI\n\n            '初回起動判定\n            If m_AZKFirstFlg Then\n                '預り金に0を代入\n                uctlGuiFrame1.GUI_GetItem(\"AZK01\").object.AZUKARI = 0\n            End If\n\n            m_CTL_PROPERTYS(ctlDeposit).TabStop = True              '預り金入力\n            m_CTL_PROPERTYS(ctlAZKEnd).TabStop = True               '確認発行オーダー\n\n            Call uctlGuiFrame1.GUI_GetItem(\"AZK01\").ZOrder(vbBringToFront)\n\n            m_AZKFirstFlg = False\n\n    End Select\n\n    If (m_Header.NetPrica.NP_FLG = 1) And uctlGuiFrame1.GUI_GetItem(\"BUT01\").Visible = True Then\n        Call uctlGuiFrame1.GUI_SetVisible(\"ZDK01\", True) '\n    ElseIf colSDSET011(\"CRM_NebikiZanCheck\") <> 0 And uctlGuiFrame1.GUI_GetItem(\"BUT01\").Visible = True And m_clsNWCRMSIF.glbCRMflg > 0 Then\n        Call uctlGuiFrame1.GUI_SetVisible(\"ZDK01\", True)    '値引可能残フラグ\n    Else\n        Call uctlGuiFrame1.GUI_SetVisible(\"ZDK01\", False)   '値引可能残フラグ\n    End If\n\n    'バーコードリーダーの制御\n'    If m_Order < ctlshocd1 Then 商品コード入力でバーコード入力を有効にする。須賀川バーコード読取対応 Changed By H.Tsuji On 2017/08/04\n    If m_Order <= ctlshocd1 Or _\n       m_Order = ctlshocd2 Or _\n       m_Order = ctlshocd3 Then\n        'バーコードリーダー有効化\n        Call Me.uctlGymBarcodeReader1.BarcodeEnable\n        m_BarcodeState = True\n    Else\n        'バーコードリーダー無効化\n        Call Me.uctlGymBarcodeReader1.BarcodeDisable\n        m_BarcodeState = False\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：戻るキー押下時のカード再入力を無効にするかチェックする\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2013/01/15\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_NWCRMS_BackKeyCheck() As Long\n\n    Dim ix As Integer\n\n    If ctlStart < m_Order Then\n        For ix = m_Order - 1 To ctlStart Step -1   '直前入力位置を検索\n            If m_CTL_PROPERTYS(ix).TabStop = True Then Exit For\n        Next ix\n        If ix = ctlStart Or _\n            ix = ctlCard02 Then    'カード入力の場合は無効にする\n            fnc_NWCRMS_BackKeyCheck = -1\n        Else\n            fnc_NWCRMS_BackKeyCheck = 0\n        End If\n    End If\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：戻るキー押下時のトップオーダー遷移時の情報初期化\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2013/02/20\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_BackKeyCheck() As Long\n\n    Dim ix As Integer\n\n    If ctlStart < m_Order Then\n        For ix = m_Order - 1 To ctlStart Step -1   '直前入力位置を検索\n            If m_CTL_PROPERTYS(ix).TabStop = True Then Exit For\n        Next ix\n        If ix = ctlStart Then    'カード入力の場合は無効にする\n\n            Dim Card1Clear As GymCdChk.CARD1\n            Dim Card2Clear As GymCdChk.CARD2\n\n            m_Header.STAFFCD = 0     '係員コード\n            m_Header.STAFFNM = \"\"    '係員名\n\n            Call sub_clsGymCardChk_DataSet(m_Header.CardChk, Card1Clear, Card2Clear)    '決済カード情報のクリア\n\n            With m_Header\n                .TOKCODE = \"00000\"\n            End With\n\n            Call sub_clsGymCardChkDouble_DataSet(m_Header.CardChkDouble, Card1Clear, Card2Clear)    'ポイントカード情報のクリア\n\n            If Not m_clsNWCRMSIF Is Nothing Then\n                m_clsNWCRMSIF.glbCRMflg = 0\n            End If\n\n            With m_Header.Authori\n                .REALTIME = 0\n                .CREDITCD = \"\"\n                .SECURITY = 0\n                .ERRSTS = \"\"\n                .TTUBAN = \"\"\n                .XDATE = Space(8)\n                .XTUBAN = Space(5)\n            End With\n\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlZDKGuiTXT01).strCtlName)\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlZDKGuiTXT02).strCtlName)\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlZDKGuiTXT03).strCtlName)\n\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(m_RPIOrder).strCtlName)          '利用ポイント入力\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlJitsushaban).strCtlName)      '実車番入力\n            Call uctlGuiFrame1.GUI_SetText(\"\", m_CTL_PROPERTYS(ctlKakariin).strCtlName)         '係員入力\n\n            fnc_BackKeyCheck = 0\n        Else\n            fnc_BackKeyCheck = 0\n        End If\n    End If\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：初期化処理\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：S.Ochiai\n' 作成日付：2013/02/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_FormClear()\n    Const c_strProcName As String = \"sub_FormClear\"\nOn Error GoTo ProcErr\n\n    Dim ret      As Long\n    Dim strWhere As String\n    Dim ix       As Integer\n\n    '保留データ呼出中の場合、保留データ排他レコード削除\n     If m_HoryuDataCall > 0 Then\n\n        strWhere = \"\"\n\n        '処理中保留呼出レコード通番取得\n        For ix = 1 To uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count\n            If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(ix).HoryuDtl = True Then\n                If strWhere <> \"\" Then strWhere = strWhere & \",\"\n                strWhere = strWhere & uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo(ix).HoryuTrnRecNo\n            End If\n        Next ix\n\n        If strWhere <> \"\" Then\n            '保留データ排他レコード削除\n            ret = fnc_DelSDMNG018(strWhere)\n            If ret <> 0 Then\n                Err.Raise (0)\n            End If\n        End If\n    End If\n\n    If Not m_clsNWCRMSIF Is Nothing Then\n\n        If m_clsNWCRMSIF.glbNWCRMSflg > 0 Then\n            If m_clsNWCRMSIF.glbCRMflg = 9 Then GoTo ProcExit    'CRM排他解除の多重送信防止\n    '        ' 保留呼出データはローカル排他解除しない\n    '        ' ローカル排他解除\n    '        UnlockLocalExclcution\n            If (m_clsNWCRMSIF.glbCRMflg > 0) And (m_clsNWCRMSIF.glbCRMflg <> 3) Then\n                m_clsNWCRMSIF.glbCRMflg = 9 'キャンセル中\n                ' 顧客購買実績問合せ　ｷｬﾝｾﾙ処理\n                ret = m_clsNWCRMSIF.fnc_InquiryPurchaseResults(m_Header, 2, True, Me)\n                'キャンセル応答待ちを行います\n\n            End If\n        End If\n\n        'キャンセル応答待ち以外なら初期化(応答待ちフラグの切り替えタイミングに注意[DoEvents導入時には見直し]）\n        If m_clsNWCRMSIF.glbCRMflg <> 9 Then\n            Call sub_Initialize\n        End If\n\n    Else\n        Call sub_Initialize\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：未処理データの初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：T.Endo\n' 作成日付：2013/06/07\n' 変更履歴：引数にレーンｂ指定できるように修正\n'         ：引数に仮レシートNoを追加 (2014/12/17 N.Aoki)\n'*****************************************************************\nPublic Function sub_HoryuDataInit(Optional h_LANENO As String = \"\", Optional ByVal h_DENBAN As Long = 0) As Long\n\n    Dim rs  As Recordset\n    Dim ret As Long\n\n    '保留対象のレコード通番を初期化\n    m_TrnRecNo = 0                              '保留データレコード通番\n    Set m_HoryuHeader = Nothing                 '保留データヘッダートラン\n    Set m_HoryuDistributionCollect = Nothing    '保留データ物流トラン\n\n    m_CardInfoExchange = 0                      '保留呼出カードチェック後処理制御\n    m_HoryuSetteiKey = 0                        '保留呼出カードネガチェック制御\n\n    '保留データ一覧を未処理データ表示モードに変更\n    uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.RECSBT1 = 7\n\n    Set rs = fnc_GetHoryuData001(-1, h_LANENO)\n\n    If h_DENBAN <> 0 Then                       '仮レシートNoを指定する 2014/12/17\n        Set rs = fnc_GetHoryuData001(-1, h_LANENO, h_DENBAN)\n    Else\n        Set rs = fnc_GetHoryuData001(-1, h_LANENO)\n    End If\n\n    If rs.EOF = False And m_SalesDecideTransmitting <> SD_End And rs.RecordCount = 1 Then\n        m_TrnRecNo = rs(\"HB.TRNRECNO\").Value\n\n        m_Order = ctlHRY01\n        ret = fnc_inputPart_S           '保留データの初期表示\n\n        If m_HoryuDataCall = 1 Then     '保留データ利用中(カード入力)\n            m_Order = ctlStart - 1      '初期位置をカード入力へ\n        End If\n    Else    '複数件存在する場合\n\n        '【保留呼出レーンモニタ対応】\n        If Trim(h_LANENO) <> \"\" Then\n            '取得データの表示依頼(レーンモニタから保留呼出)\n            Call uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.GMN_HRYDisp(h_LANENO)\n        Else\n            '取得データの表示依頼(処理選択メニューから保留呼出)\n            Call uctlGuiFrame1.GUI_GetItem(\"HRY01\").object.GMN_HRYDisp(-1)\n        End If\n        '【保留呼出レーンモニタ対応】\n\n        m_Order = ctlHRY01 - 1  '初期位置をアイドル画面へ\n    End If\n\n    Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, True)\n\n    If rs.EOF Then\n        sub_HoryuDataInit = -1\n    Else\n        sub_HoryuDataInit = 0\n    End If\n\n    Call sub_NextOrder\n\nEnd Function\n\n'////////////////////////////////////////////////////////////////////////////////////\n' GUIコントロールの初期化\n' Initメソッドのあるコントロールの初期化を行う。\n' Initメソッドの呼び出しは一度だけになるようコントロールする。\n'////////////////////////////////////////////////////////////////////////////////////\nPrivate Sub InitGuis(inGuiIds As Variant)\n    Const c_strProcName As String = \"InitGuis\"\nOn Error GoTo ErrorTrap\n\n    Dim i          As Long\n    Dim rsSDMDLREP As Recordset\n    Dim lngRet     As Long\n\n    For i = LBound(inGuiIds) To UBound(inGuiIds)\n        If mGuiInitFlags.Exists(inGuiIds(i)) = False Then\n            mGuiInitFlags.Add inGuiIds(i), False\n            Debug.Print inGuiIds(i) & \"存在しないので追加\"\n        End If\n\n        If mGuiInitFlags.Item(inGuiIds(i)) = True Then\n            If (inGuiIds(i) = \"KKM01\") Or (inGuiIds(i) = \"tky01\") Then\n                uctlGuiFrame1.GUI_GetItem(inGuiIds(i)).object.Sub_DbReload\n                Call GMN_Log(inGuiIds(i) & \"再初期化完了\", c_strProcName, LL_INFO)\n            End If\n        Else\n            uctlGuiFrame1.GUI_GetItem(inGuiIds(i)).object.Init\n            mGuiInitFlags.Item(inGuiIds(i)) = True\n\n            Call GMN_Log(inGuiIds(i) & \"初期化完了\", c_strProcName, LL_INFO)\n        End If\n\n    Next\n\n    Exit Sub\n\nErrorTrap:\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume Next\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：短縮カード呼出(ネットプリカ代表カード)\n' 引数　　：h_CARD1             - カードチェック引数１\n'           h_CARD2             - カードチェック引数２\n'           h_ShorikubunCode\n'           h_KikiSyubetsu      - 機器種別\n' 戻値　　： False=異常 True=正常\n' 作成者　：J.Akiba\n' 作成日付：2014/10/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fun_CardCheck_NetPricaDaihyou(ByRef h_Card1 As GymCdChk.CARD1, _\n                                              ByRef h_Card2 As GymCdChk.CARD2, _\n                                              ByVal h_ShorikubunCode As Long, _\n                                              ByVal h_KikiSyubetsu As Long) As Boolean\n    Const c_strProcName As String = \"fun_CardCheck_NetPricaDaihyou\"\nOn Error GoTo ProcErr\n    fun_CardCheck_NetPricaDaihyou = False\n\n    Dim ret         As Long\n    Dim lngSqlErr   As Long\n    Dim lngVbErr    As Long\n    Dim rcsData     As Recordset\n    Dim strSQL      As String\n\n    '短縮カードマスタのレコード値\n    Dim strCARDINFO     As String\n    Dim lngCARDKBNLEN   As Long\n    Dim strKYAKUNM      As String\n    Dim strCARNO        As String\n    Dim strTANKARANK    As String\n\n    'カードチェック引数の初期化\n    Dim newCard1 As GymCdChk.CARD1\n    Dim newCard2 As GymCdChk.CARD2\n    h_Card1 = newCard1\n    h_Card2 = newCard2\n\n    '短縮カードマスタからネットプリカ代表カードのレコードを取得\n    strSQL = strSQL & \" SELECT\"\n    strSQL = strSQL & \"  KAIIN, CARDKBNLEN, KYAKUNM, CARNO, TANKARANK\"\n    strSQL = strSQL & \"   FROM SDCRD001\"\n    strSQL = strSQL & \"  WHERE SYUBETU = 8 \"\n    strSQL = strSQL & \"    AND RECNO = 1\"\n    strSQL = strSQL & \";\"\n\n    'レコード読み込み\n    lngSqlErr = p_GymCmnDB.GMN_GetRecordset(strSQL, rcsData, lngVbErr)\n    If lngVbErr <> 0 Then\n        Call Err.Raise(lngVbErr)\n    End If\n\n    'レコード取得できない場合は異常終了\n    If rcsData.EOF = True Then\n        fun_CardCheck_NetPricaDaihyou = False\n        GoTo ProcExit\n    End If\n\n    '値を取得\n    With rcsData\n        strCARDINFO = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"KAIIN\").Value)\n        lngCARDKBNLEN = CLng(p_GymCmnValChk.GMN_NuLLConvTo0(.Fields(\"CARDKBNLEN\").Value))\n        strKYAKUNM = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"KYAKUNM\").Value)\n        strCARNO = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"CARNO\").Value)\n        strTANKARANK = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"TANKARANK\").Value)\n    End With\n\n    'カードチェック引数に値をセットする\n    With h_Card1\n        .C1_DOUSASITEI = 5\n        If (h_KikiSyubetsu = 2) Then\n            .C1_CUST = 1    '1:OPT\n        Else\n            .C1_CUST = 0    '0:POS\n        End If\n    End With\n    With h_Card2\n        .C2_CARDKBN = Mid$(strCARDINFO, 1, lngCARDKBNLEN) 'カード情報の先頭からカード区分桁数の文字数切り出す\n        .C2_KAIIN = strCARDINFO\n        .C2_JSYABAN = strCARNO\n        .C2_TANKARANK = Left$(Trim$(strTANKARANK) & \"000000000\", 9) 'Trim＋右側を9桁で0埋め\n        .C2_KYAKUNM = strKYAKUNM\n    End With\n\n    'カードチェック処理\n    If GymCdChk.GymCardCheck(h_Card1, h_Card2) > 0 Then\n        fun_CardCheck_NetPricaDaihyou = False\n        GoTo ProcExit\n    End If\n\n    '処理区分別有効カード分類チェック\n    If fnc_CheckCardBunrui(h_ShorikubunCode, h_Card2.C2_BUNCD) = False Then\n       '無効カードへ設定\n       h_Card2.C2_CHECKRESULT = 1\n    End If\n\n    'チェック正常終了\n    fun_CardCheck_NetPricaDaihyou = True\n\nProcExit:\n\n    'Recordsetを閉じる\n    If Not rcsData Is Nothing Then\n        rcsData.Close\n        Set rcsData = Nothing\n    End If\n\n    Exit Function\n\nProcErr:\n    fun_CardCheck_NetPricaDaihyou = False\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：短縮カード呼出(現金代表カード)\n' 引数　　：h_CARD1             - カードチェック引数１\n'           h_CARD2             - カードチェック引数２\n'           h_ShorikubunCode\n'           h_KikiSyubetsu      - 機器種別\n' 戻値　　： False=異常 True=正常\n' 作成者　：S.Ito\n' 作成日付：2017/07/05\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fun_CardCheck_GenkinDaihyou(ByRef h_Card1 As GymCdChk.CARD1, _\n                                            ByRef h_Card2 As GymCdChk.CARD2, _\n                                            ByVal h_ShorikubunCode As Long, _\n                                            ByVal h_KikiSyubetsu As Long) As Boolean\n    Const c_strProcName As String = \"fun_CardCheck_GenkinDaihyou\"\nOn Error GoTo ProcErr\n    fun_CardCheck_GenkinDaihyou = False\n\n    Dim ret         As Long\n    Dim lngSqlErr   As Long\n    Dim lngVbErr    As Long\n    Dim rcsData     As Recordset\n    Dim strSQL      As String\n\n    '短縮カードマスタのレコード値\n    Dim strCARDINFO     As String\n    Dim lngCARDKBNLEN   As Long\n    Dim strKYAKUNM      As String\n    Dim strCARNO        As String\n    Dim strTANKARANK    As String\n\n    'カードチェック引数の初期化\n    Dim newCard1 As GymCdChk.CARD1\n    Dim newCard2 As GymCdChk.CARD2\n    h_Card1 = newCard1\n    h_Card2 = newCard2\n\n    '短縮カードマスタから現金代表カードのレコードを取得\n    strSQL = strSQL & \" SELECT KAIIN, CARDKBNLEN, KYAKUNM, CARNO, TANKARANK\"\n    strSQL = strSQL & \"   FROM SDCRD001\"\n    strSQL = strSQL & \"  WHERE SYUBETU = 8 \"\n    strSQL = strSQL & \"    AND RECNO = 3\"\n    strSQL = strSQL & \";\"\n\n    'レコード読み込み\n    lngSqlErr = p_GymCmnDB.GMN_GetRecordset(strSQL, rcsData, lngVbErr)\n    If lngVbErr <> 0 Then\n        Call Err.Raise(lngVbErr)\n    End If\n\n    'レコード取得できない場合は異常終了\n    If rcsData.EOF = True Then\n        fun_CardCheck_GenkinDaihyou = False\n        GoTo ProcExit\n    End If\n\n    '値を取得\n    With rcsData\n        strCARDINFO = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"KAIIN\").Value)\n        lngCARDKBNLEN = CLng(p_GymCmnValChk.GMN_NuLLConvTo0(.Fields(\"CARDKBNLEN\").Value))\n        strKYAKUNM = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"KYAKUNM\").Value)\n        strCARNO = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"CARNO\").Value)\n        strTANKARANK = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"TANKARANK\").Value)\n    End With\n\n    'カードチェック引数に値をセットする\n    With h_Card1\n        .C1_DOUSASITEI = 5\n        If (h_KikiSyubetsu = 2) Then\n            .C1_CUST = 1    '1:OPT\n        Else\n            .C1_CUST = 0    '0:POS\n        End If\n    End With\n    With h_Card2\n        .C2_CARDKBN = Mid$(strCARDINFO, 1, lngCARDKBNLEN) 'カード情報の先頭からカード区分桁数の文字数切り出す\n        .C2_KAIIN = strCARDINFO\n        .C2_JSYABAN = strCARNO\n        .C2_TANKARANK = Left$(Trim$(strTANKARANK) & \"000000000\", 9) 'Trim＋右側を9桁で0埋め\n        .C2_KYAKUNM = strKYAKUNM\n    End With\n\n    'カードチェック処理\n    If GymCdChk.GymCardCheck(h_Card1, h_Card2) > 0 Then\n        fun_CardCheck_GenkinDaihyou = False\n        GoTo ProcExit\n    End If\n\n    '処理区分別有効カード分類チェック\n    If fnc_CheckCardBunrui(h_ShorikubunCode, h_Card2.C2_BUNCD) = False Then\n       '無効カードへ設定\n       h_Card2.C2_CHECKRESULT = 1\n    End If\n\n    'チェック正常終了\n    fun_CardCheck_GenkinDaihyou = True\n\nProcExit:\n\n    'Recordsetを閉じる\n    If Not rcsData Is Nothing Then\n        rcsData.Close\n        Set rcsData = Nothing\n    End If\n\n    Exit Function\n\nProcErr:\n    fun_CardCheck_GenkinDaihyou = False\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Function\n\n'↓CRD01からコピペ\n'*****************************************************************\n' 機能　　：処理区分別有効カード分類チェック\n' 引数　　：処理区分､カード分類\n' 戻値　　：TRUE-チェック結果OK　FALSE-チェック結果NG\n' 作成者  ：Miyamoto.F\n' 作成日付：2012/07/11\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Function fnc_CheckCardBunrui(ByVal h_intSYORIKBN1 As Integer, ByVal h_strBUNCD As String) As Boolean\n\n    Dim strSQL      As String\n    Dim rs          As Recordset\n    Dim ret         As Long\n    Dim errorCode   As Long\n\n    fnc_CheckCardBunrui = False\n\n    strSQL = \"SELECT\"\n    strSQL = strSQL & \"   *\"\n    strSQL = strSQL & \" FROM\"\n    strSQL = strSQL & \"   SDSET008 \"\n    strSQL = strSQL & \"   JOIN SDSET011 ON SEARCHKEY = 'ServiceForm' \"\n    strSQL = strSQL & \" WHERE\"\n    strSQL = strSQL & \"   SDSET008.SYORIKBN1 = \" & h_intSYORIKBN1 & \" AND\"\n    strSQL = strSQL & \"   SDSET008.BUNCD = '\" & h_strBUNCD & \"' AND\"\n    strSQL = strSQL & \"   ( \"\n    strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '0' AND SDSET008.UNYOKBN IN(0,1) ) OR\"    '0:フルサービスの場合     0: 全運用､1: フルのみ\n    strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '1' AND SDSET008.UNYOKBN IN(0,2) ) OR\"    '1:セルフサービスの場合   0: 全運用､2: セルフのみ\n\n    '自機端末種別判定\n    Select Case p_GymCmnSysSts.GMN_KikiSyubetsu\n    Case 0, 1:       ' POS , SSC\n            strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '2' AND SDSET008.UNYOKBN IN(0,1,2) ) OR\"  '2:スプリットでPOSの場合  0: 全運用､1: フルのみ､2: セルフのみ\n    Case 2:          ' OPT\n        Select Case p_GymCmnSysSts.GMN_OPTSyubetsu\n        Case 0:      'フル端末\n            strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '2' AND SDSET008.UNYOKBN IN(0,1) ) OR\"    '2:スプリットでフル外設の場合   0: 全運用､1: フルのみ\n        Case 1, 2, 3: 'セルフ端末\n            strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '2' AND SDSET008.UNYOKBN IN(0,2) ) OR\"    '2:スプリットでセルフ外設の場合 0: 全運用､2: セルフのみ\n        End Select\n    End Select\n\n    strSQL = strSQL & \"      ( trim(SDSET011.PRESETVAL) = '3' AND SDSET008.UNYOKBN IN(0,2) )\"       '3:後払いセルフの場合     0: 全運用､2: セルフのみ\n    strSQL = strSQL & \"   )  \"\n    strSQL = strSQL & \" ;\"\n\n    ret = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, errorCode)\n\n    If ret = 0 Then\n        If rs.EOF = True Then\n            fnc_CheckCardBunrui = False\n        Else\n            fnc_CheckCardBunrui = True\n        End If\n\n    End If\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：バーコードデータ通知イベント\n' 作成者　：S.Ito\n' 作成日付：2017/07/14\n'*****************************************************************\nPrivate Sub uctlGymBarcodeReader1_DataEvent(ByVal BDataType As Long, ByVal BDataLen As Long, BData As String)\n    Const c_strProcName As String = \"uctlGymBarcodeReader1_DataEvent\"\nOn Error GoTo ProcErr\n\n    Call GMN_Log(\"BDataType=\" & CStr(BDataType) & \" BDataLen=\" & CStr(BDataLen) & \" BData=\" & BData, c_strProcName, LL_FATAL)\n\n\n    Call GMN_Log(\"Barcode_POS_SSC flag : \" & colSDSET011.Item(\"Barcode_POS_SSC\"), \"nakaima\", LL_FATAL)\n    Call GMN_Log(\"m_Order : \" & m_Order, \"nakaima\", LL_FATAL)\n\n    'バーコードリーダー運用がない場合終了\n    If colSDSET011.Item(\"Barcode_POS_SSC\") <> 1 Then\n        GoTo ProcExit\n    End If\n\n    Call GMN_Log(\"BDataType : \" & BDataType, \"nakaima\", LL_FATAL)\n\n    'Select Case BDataType\n    Select Case m_Order\n        Case Is < ctlshocd1\n            'QRクーポン運用がない場合終了\n            Call GMN_Log(\"CouponFlg : \" & colSDSET011.Item(\"CouponFlg\"), \"nakaima\", LL_FATAL)\n            If colSDSET011.Item(\"CouponFlg\") <> 4 Then\n                GoTo ProcExit\n            End If\n\n            ' QRコードの場合\n            If BDataType = 204 Then\n                With m_Header.QR\n                    '読み取ったバーコードデータをチェックパーツへセット\n                    .QRfull = BData\n\n                    'チェック処理開始\n                    .GymQrCheck\n\n                    Call GMN_Log(\"QRChk_Result : \" & .QRChk_Result, \"nakaima\", LL_FATAL)\n                    Select Case .QRChk_Result\n\n                    Case 0 '正常終了\n                        'クーポン欄に名称をセット\n                        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CouponName = .QrTitle\n\n                    Case 10 '特約店コード エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkTOKCDError + CLng(SKBN) * 10000&)\n\n                    Case 20 'ＳＳコード エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkSSCDError + CLng(SKBN) * 10000&)\n\n                    Case 30 '識別コード エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkIDCDError + CLng(SKBN) * 10000&)\n\n                    Case 40 '有効期間前 エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkPERIODFError + CLng(SKBN) * 10000&)\n\n                    Case 50 '有効期間切れ エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkPERIODTError + CLng(SKBN) * 10000&)\n\n                    Case 60 '検索訂正済み エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkCANCELError + CLng(SKBN) * 10000&)\n\n                    Case 70 '利用回数上限 エラー\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkMAXCNTError + CLng(SKBN) * 10000&)\n\n                    Case Else 'その他\n                        Call m_ERR01.GMNSub_ErrorMsg(QrChkOTHERError + CLng(SKBN) * 10000&)\n\n                    End Select\n\n                    If .QRChk_Result > 0 Then\n                       .QrChkInit\n                        'クーポン欄をリセット\n                        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CouponName = \"\"\n                    End If\n                End With\n            Else\n                Call m_ERR01.GMNSub_ErrorMsgStr(\"バーコードエラー\", \"対応していないバーコードです。\")\n                sub_BarcodeReaderReEnable\n                GoTo ProcExit\n            End If\n\n        Case ctlshocd1, ctlshocd2, ctlshocd3\n            Call GMN_Log(\"p_KikiSyubetsu : \" & p_KikiSyubetsu, \"nakaima\", LL_FATAL)\n            'START 商品コード入力でバーコード入力を有効にする。須賀川バーコード読取対応 Changed By H.Tsuji On 2017/08/04\n            'JAN8/JAN13のとき\n            If BDataType = 103 Or BDataType = 104 Then\n\n                Dim lngSqlErr As Long\n                Dim lngVbErr  As Long\n                Dim rcsData   As Recordset\n                Dim strSQL    As String\n\n                Dim ret As Long\n\n                '最大明細数 + 1 <= 現在の明細数 + 1 の場合は無効とする\n                If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.intMaxBut <= uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count + 1 Then\n                    GoTo ProcExit\n                End If\n\n                strSQL = strSQL & \"SELECT\"\n                strSQL = strSQL & \" SDSYO001.TAXKBN,\"\n                strSQL = strSQL & \" SDSYO004.BCD,\"\n                strSQL = strSQL & \" SDSYO004.GOODSCD,\"\n                strSQL = strSQL & \" SDSYO004.GOODSNM,\"\n                strSQL = strSQL & \" SDSYO004.HANBAITANKA,\"\n                strSQL = strSQL & \" SDSYO004.GENKATANKA,\"\n                strSQL = strSQL & \" SDSYO004.YUKOUFROM,\"\n                strSQL = strSQL & \" SDSYO004.YUKOUTO \"\n                strSQL = strSQL & \"FROM SDSYO004\"\n                strSQL = strSQL & \" LEFT JOIN SDSYO001 ON SDSYO001.GOODSCD = SDSYO004.GOODSCD \"\n                strSQL = strSQL & \"WHERE BCD = '\" & BData & \"'\"\n                strSQL = strSQL & \";\"\n\n                'レコード読み込み\n                lngSqlErr = p_GymCmnDB.GMN_GetRecordset(strSQL, rcsData, lngVbErr)\n                If lngVbErr <> 0 Then\n                    Call Err.Raise(lngVbErr)\n                End If\n\n                m_PluBcd = BData\n                'レコード取得できない場合は異常終了　そのうち商品登録するよう変更する。\n                If rcsData.EOF = True Then\n                    Call fnc_setPluInfo\n                    Call sub_DisplayModeNo(ctlPLU01)\n                    Call sub_NextOrder\n                    sub_BarcodeReaderReEnable\n                    GoTo ProcExit\n                End If\n\n                Call fnc_setBarcodeProductInfo(rcsData)\n\n                If Not rcsData Is Nothing Then\n                    rcsData.Close\n                    Set rcsData = Nothing\n                End If\n            Else\n                Call m_ERR01.GMNSub_ErrorMsgStr(\"バーコードエラー\", \"対応していないバーコードです。\")\n                sub_BarcodeReaderReEnable\n                GoTo ProcExit\n            End If\n            'END   商品コード入力でバーコード入力を有効にする。須賀川バーコード読取対応 Changed By H.Tsuji On 2017/08/04\n\n        Case Else\n            GoTo ProcExit\n\n    End Select\n\n    sub_BarcodeReaderReEnable\n\nProcExit:      '正常終了\n    m_PluBcd = \"\"\n    Call GMN_Log(\"ProcExit\", \"nakaima\", LL_FATAL)\nExit Sub\n\nProcErr:       '異常終了\n    m_Header.QR.QrChkCancel\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：バーコードリーダー再起動\n' 作成者　：I.Nakaima\n' 作成日付：2018/03/06\n'*****************************************************************\nPrivate Sub sub_BarcodeReaderReEnable()\n    Const c_strProcName As String = \"sub_BarcodeReaderReEnable\"\n\n    'フル外設またはPOSの場合\n    If p_KikiSyubetsu = 0 Or p_KikiSyubetsu = 2 Then\n        '読込後にリーダーが止まるため､一度無効化して再起動させる\n        Call Me.uctlGymBarcodeReader1.BarcodeDisable\n        m_BarcodeState = False\n        If m_Order <= ctlshocd3 Then\n            Call Me.uctlGymBarcodeReader1.BarcodeEnable\n            m_BarcodeState = True\n        End If\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：バーコードで読み取りPLUに登録されていない商品の登録\n' 作成者　：T.Sato\n' 作成日付：2018/02/05\n'*****************************************************************\nPublic Function fnc_setPluInfo() As Long\n    Const c_strProcName As String = \"fnc_setPluInfo\"\n\n    Dim strSQL()     As String\n    Dim selectSQL    As String\n    Dim rcsData      As Recordset\n    Dim strGoodsCode As String\n    Dim strPrice     As String\n    Dim ret          As Long\n    Dim lngVbErr     As Long\n\n    ReDim Preserve strSQL(1)\n    strGoodsCode = uctlGuiFrame1.GUI_GetItem(\"PLU01\").object.SHOHINCD\n    strPrice = uctlGuiFrame1.GUI_GetItem(\"PLU01\").object.BAIKATANKA\n\n    If (Len(m_PluBcd) > 0) And (strGoodsCode <> 0) And (strPrice <> 0) Then\n\n        '桁数の0埋め\n        If (Len(strGoodsCode) = 1) Then\n            strGoodsCode = \"0000\" & strGoodsCode\n        ElseIf (Len(strGoodsCode) = 2) Then\n            strGoodsCode = \"000\" & strGoodsCode\n        ElseIf (Len(strGoodsCode) = 3) Then\n            strGoodsCode = \"00\" & strGoodsCode\n        ElseIf (Len(strGoodsCode) = 4) Then\n            strGoodsCode = \"0\" & strGoodsCode\n        End If\n\n        strSQL(0) = \"INSERT INTO SDSYO004\"\n        strSQL(0) = strSQL(0) & \" ( \"\n        strSQL(0) = strSQL(0) & \"BCD,\"              'PLUコード\n        strSQL(0) = strSQL(0) & \"GOODSCD,\"          '商品コード\n        strSQL(0) = strSQL(0) & \"HANBAITANKA,\"       '売価\n        strSQL(0) = strSQL(0) & \"YUKOUFROM,\"        '有効期限F\n        strSQL(0) = strSQL(0) & \"YUKOUTO,\"          '有効期限T\n        strSQL(0) = strSQL(0) & \"UPKBN,\"            '更新区分\n        strSQL(0) = strSQL(0) & \"UPTIMD\"            '更新日時\n        strSQL(0) = strSQL(0) & \" ) \"\n        strSQL(0) = strSQL(0) & \" VALUES\"\n        strSQL(0) = strSQL(0) & \" ( \"\n        strSQL(0) = strSQL(0) & \"'\" & m_PluBcd & \"'\" & \",\"\n        strSQL(0) = strSQL(0) & \"'\" & strGoodsCode & \"'\" & \",\"\n        strSQL(0) = strSQL(0) & strPrice & \",\"\n        strSQL(0) = strSQL(0) & \"'\" & \"00000000\" & \"'\" & \",\"\n        strSQL(0) = strSQL(0) & \"'\" & \"99999999\" & \"'\" & \",\"\n        strSQL(0) = strSQL(0) & \"0\" & \",\"\n        strSQL(0) = strSQL(0) & \"'\" & Format(Now, \"yyyyMMddhhmmss\") & \"'\"\n        strSQL(0) = strSQL(0) & \" ); \"\n        ret = p_GymCmnDB.GMN_ExecuteSQL(strSQL, lngVbErr)\n\n        fnc_setPluInfo = ret\n\n        '物流明細レコード再表示\n\n        If uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count = 0 Then\n            m_Order = ctlshocd1\n        ElseIf uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count = 1 Then\n            m_Order = ctlshocd2\n        ElseIf uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.ScrInfo.Count = 2 Then\n            m_Order = ctlshocd3\n        End If\n\n        sub_DisplayModeNo (m_Order)\n        Call uctlGuiFrame1.GUI_SetTextFocus(m_CTL_PROPERTYS(m_Order).strCtlName)\n        Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(fnc_GuidanceNoSet))\n        Call uctlGuiFrame1.GUI_SetVisible(\"PLU01\", False)       'PLU入力コントロール\n\n        selectSQL = selectSQL & \"SELECT\"\n        selectSQL = selectSQL & \" SDSYO001.TAXKBN,\"\n        selectSQL = selectSQL & \" SDSYO004.BCD,\"\n        selectSQL = selectSQL & \" SDSYO004.GOODSCD,\"\n        selectSQL = selectSQL & \" SDSYO004.GOODSNM,\"\n        selectSQL = selectSQL & \" SDSYO004.HANBAITANKA,\"\n        selectSQL = selectSQL & \" SDSYO004.GENKATANKA,\"\n        selectSQL = selectSQL & \" SDSYO004.YUKOUFROM,\"\n        selectSQL = selectSQL & \" SDSYO004.YUKOUTO \"\n        selectSQL = selectSQL & \"FROM SDSYO004\"\n        selectSQL = selectSQL & \" LEFT JOIN SDSYO001 ON SDSYO001.GOODSCD = SDSYO004.GOODSCD \"\n        selectSQL = selectSQL & \"WHERE BCD = '\" & m_PluBcd & \"'\"\n        selectSQL = selectSQL & \";\"\n\n        ret = 0\n        ret = p_GymCmnDB.GMN_GetRecordset(selectSQL, rcsData, lngVbErr)\n\n        Call fnc_setBarcodeProductInfo(rcsData)\n\n    End If\n\nProcExit:      '正常終了\n\n    Exit Function\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：バーコードで読み取り商品明細へ貼り付ける処理\n' 作成者　：T.Sato\n' 作成日付：2018/02/05\n'*****************************************************************\nFunction fnc_setBarcodeProductInfo(ByVal rcsData As Recordset) As Long\n    Const c_strProcName As String = \"fnc_setBarcodeProductInfo\"\n\n    Dim strFrom      As String\n    Dim strTo        As String\n    Dim strDate      As String\n    Dim strGoodsCode As String\n    Dim strGoodsName As String\n    Dim crnTanka     As Currency\n    Dim crnGenka     As Currency\n    Dim lngTaxKbn    As Long\n\n    With rcsData\n        lngTaxKbn = p_GymCmnValChk.GMN_NuLLConvTo0(.Fields(\"SDSYO001.TAXKBN\").Value)\n        strGoodsCode = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"SDSYO004.GOODSCD\").Value)\n        strGoodsName = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"SDSYO004.GOODSNM\").Value)\n        crnTanka = p_GymCmnValChk.GMN_NuLLConvTo0(.Fields(\"SDSYO004.HANBAITANKA\").Value)\n        crnGenka = p_GymCmnValChk.GMN_NuLLConvTo0(.Fields(\"SDSYO004.GENKATANKA\").Value)\n        strFrom = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"SDSYO004.YUKOUFROM\").Value)\n        strTo = p_GymCmnValChk.GMN_NuLLConv(.Fields(\"SDSYO004.YUKOUTO\").Value)\n    End With\n\n\n    '有効期限チェック\n    Call p_GymCmnSysSts.GMN_SyoriHizukeGet(strDate)\n    If CLng(strFrom) > CLng(strDate) Or CLng(strTo) < CLng(strDate) Then\n        Call m_ERR01.GMNSub_ErrorMsgStr(\"バーコードエラー\", \"商品の有効期限内ではありません。\")\n        GoTo ProcExit\n    End If\n\n    With uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", fnc_GetDistributionOrder)\n    '            .ButData.TradeItem.BAIKATANKA = crnTanka\n    '            .ButData.TradeItem.BAIKA = crnTanka\n    '            .ButData.TradeItem.GOODSCD = strGoodsCode\n    '            .ButData.TradeItem.GOODSNM = strGoodsName\n    ''           .ButData.TradeItem.INP = 1\n    '            .ButData.TradeItem.BARA = 1\n    '            .ButData.TradeItem.TAXKBN = lngTaxKbn\n\n        .Controls(\"txtShouhinCode\").Text = strGoodsCode\n        Call .ShouhinCode_LostFocus\n        If .ButSeniFlg = 0 Then\n            GoTo ProcExit\n        End If\n\n        .ButData.TradeItem.BCD = m_PluBcd 'ShouhinCode_LostFocus でButDataの初期化をしているので、ここでバーコードを設定。\n        .ButData.TradeItem.GOODSNM = strGoodsName\n        .Controls(\"txtShouhinName\").Caption = strGoodsName\n        .Controls(\"txtKazeiKubun\").Text = CStr(lngTaxKbn)\n\n        .Controls(\"txtSuuRyou\").Text = \"1\"\n        Call .SuuRyou_LostFocus\n        '単価キー入力フラグがONの場合は、強制的に値付け\n        If m_TankaFlg = True Then\n            .BaikaTankaNKbn = 1\n        End If\n\n    '            .Controls(\"txtBaikaTanka\").Text = CStr(crnTanka) '.SuuRyou_LostFocusで単価をセットしているので、ここでは設定しない。設定すると時間帯値引がうまくいかない。\n        Call .BaikaTanka_LostFocus(m_TankaFlg)\n        If .ButSeniFlg = 0 Then\n            Select Case m_Order\n                Case ctlshocd1 '商品コード入力1\n                    m_Order = ctlSuuRyou1\n                Case ctlshocd2 '商品コード入力2\n                    m_Order = ctlSuuRyou2\n                Case ctlshocd3 '商品コード入力3\n                    m_Order = ctlSuuRyou3\n            End Select\n\n    '                Call sub_SetFocusOrder\n            Call sub_NextOrder\n            GoTo ProcExit\n        End If\n\n    '            .Controls(\"txtKingaku\").Text = CStr(crnTanka) '.BaikaTanka_LostFocusで単価をセットしているので、ここでは設定しない。設定すると取消がうまくいかない。\n        Call .Kingaku_LostFocus\n        If .ButSeniFlg = 0 Then\n            Select Case m_Order\n                Case ctlshocd1 '商品コード入力1\n                    m_Order = ctlSuuRyou1\n                Case ctlshocd2 '商品コード入力2\n                    m_Order = ctlSuuRyou2\n                Case ctlshocd3 '商品コード入力3\n                    m_Order = ctlSuuRyou3\n            End Select\n\n    '                Call sub_SetFocusOrder\n            Call sub_NextOrder\n            GoTo ProcExit\n        End If\n\n        .Controls(\"txtGenkaTanka\").Text = CStr(crnGenka)\n        Call .GenkaTanka_LostFocus\n    End With\n\n    '次の明細に移動。\n    Select Case m_Order\n        Case ctlshocd1 '商品コード入力1\n            m_Order = ctlGenkaTanka1\n        Case ctlshocd2 '商品コード入力2\n            m_Order = ctlGenkaTanka2\n        Case ctlshocd3 '商品コード入力3\n            m_Order = ctlGenkaTanka3\n    End Select\n\n    Call sub_SetFocusOrder\n\n    If fnc_inputPart_S() = 0 Then\n        Call sub_NextOrder\n    End If\n\nProcExit:      '正常終了\n    Exit Function\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n\n'*****************************************************************\n' 機能　　：購買値引適用可否設定\n' 作成者　：S.Ito\n' 作成日付：2017/07/14\n'*****************************************************************\nPrivate Sub setUnitPrice(ByVal h_NebikiSelect As Long)\n    Const c_strProcName As String = \"setUnitPrice\"\nOn Error GoTo ProcErr\n\n    Dim strPrice() As String\n    Dim i          As Integer\n\n    With m_clsNWCRMSIF\n\n        ReDim strPrice(.CPurchaseResults.NetworkDiscountInfoArrayUBound)\n\n        '購買値引適用可否が利用不可設定の場合、値引情報をすべて0で更新する\n        If h_NebikiSelect = 0 Then\n\n            '配列0埋め\n            For i = 0 To UBound(strPrice)\n                strPrice(i) = \"0\"\n            Next i\n\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, strPrice)\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, strPrice)\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, strPrice)\n        Else\n\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 0).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, .NetworkDiscountInfoArrayUnitPrice)\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 1).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, .NetworkDiscountInfoArrayUnitPrice)\n            Call uctlGuiFrame1.GUI_GetItem(\"BUT01\").object.Controls(\"uctlGuiBUT012\", 2).GoodsCode( _\n                    .NetworkDiscountInfoArrayGoodsCode, .NetworkDiscountInfoArrayUnitPrice)\n        End If\n    End With\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：バーコードリーダー監視用タイマ\n' 作成者　：sakuma\n' 作成日付：2017/08/01\n'*****************************************************************\nPrivate Sub tmrBarcodeWatch_Timer()\n    Const c_strProcName As String = \"tmrBarcodeWatch_Timer\"\nOn Error GoTo ProcErr\n\n    '*****************************************************\n    '論理オフの時にバーコードを無効にするための監視タイマ\n    '*****************************************************\n\n    Dim machineState As Long\n    Dim ret As Long\n\n    ret = p_GymCmnSysSts.GMN_SystemStatusGet(machineState)\n\n    '論理オフで無い場合でバーコードが無効となっていた\n    '場合のみバーコードを一度無効にした後有効とする。\n    If machineState <> 1 Then\n        If m_BarcodeState = False Then\n            Call Me.uctlGymBarcodeReader1.BarcodeDisable\n            m_BarcodeState = False\n            If m_Order < ctlshocd1 Then\n                Call Me.uctlGymBarcodeReader1.BarcodeEnable\n                m_BarcodeState = True\n            End If\n        End If\n    Else\n        Call Me.uctlGymBarcodeReader1.BarcodeDisable\n        m_BarcodeState = False\n    End If\n\nProcExit:\n    Exit Sub\n\nProcErr:\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：現金代表コードへの切り替え\n' 引数　　：なし\n' 戻値　　：なし\n' 作成者　：K.Tanaka\n' 作成日付：2017/09/05\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub ChangeGenkinDaihyou(m_CdChkCard1 As GymCdChk.CARD1, m_CdChkCard2 As GymCdChk.CARD2)\n    Const c_strProcName As String = \"ChangeGenkinDaihyou\"\n\n    Dim CrdObject   As Object\n    Dim bolRet      As Boolean\n\n    'カード情報入れ替え\n    bolRet = fun_CardCheck_GenkinDaihyou(m_CdChkCard1, m_CdChkCard2, m_Header.SYORIKBN1, p_KikiSyubetsu)\n    If (bolRet = True) Then\n\n        '現金代表コード切替済\n        m_ChgGenkin = \"1\"\n\n        Set CrdObject = uctlGuiFrame1.GUI_GetItem(\"Crd01\").object\n\n        'カード情報のクリア\n        CrdObject.Clear\n\n        Select Case m_CdChkCard2.C2_CTYPE\n            Case 1, 4       'カード種別が(1:JIS1 4:JIS1国内専用)の場合\n                CrdObject.C1_JIS1 = Trim(m_CdChkCard1.C1_JIS1)\n            Case Else       'カード種別が(2:JIS2 3:手入力 の場合)の場合\n                CrdObject.C1_JIS2 = Trim(m_CdChkCard1.C1_JIS2)\n        End Select\n\n        Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CheckCard(62)\n        m_CardInfoExchange = 1         'カードチェック処理結果の受信を無視するための制御\n\n        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD1 = m_CdChkCard1\n        uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.CARD2 = m_CdChkCard2\n\n        '現金代表コードの実車番をセット\n        uctlGuiFrame1.GUI_GetItem(m_CTL_PROPERTYS(ctlJitsushaban).strCtlName).object.Text = m_CdChkCard2.C2_JSYABAN\n\n        'レシート印字のため、カードチェック結果に現金代表コード情報をセット\n        Call sub_clsGymCardChk_DataSet(m_Header.CardChk, m_CdChkCard1, m_CdChkCard2)\n\n        'カードコントロールの表示情報更新\n        Call uctlGuiFrame1.GUI_GetItem(\"Crd01\").object.fun_CardView\n\n    Else\n        'エラー表示\n        Call m_ERR01.GMNSub_ErrorMsg(NetPricaTansyukuCardError + CLng(SKBN) * 10000&)         '短縮カード未登録エラー\n\n        'ローカル排他解除\n        Call fnc_DelSDMNG005(strExclusionLocalKAIIN)\n        strExclusionLocalKAIIN = \"\"\n\n        Call sub_FormClear\n    End If\n\nEnd Sub\n\n",
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
					"file_size": 327078,
					"file_write_time": 131648108796554942,
					"settings":
					{
						"buffer_size": 295316,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"contents": "VERSION 5.00\nObject = \"{13DF3BF4-6FF1-4649-99E2-70C5CA3854A1}#1.0#0\"; \"aiBarcode.ocx\"\nBegin VB.UserControl uctlGymBarcodeReader \n   ClientHeight    =   1605\n   ClientLeft      =   0\n   ClientTop       =   0\n   ClientWidth     =   1590\n   ScaleHeight     =   1605\n   ScaleWidth      =   1590\n   Begin VB.Timer Timer_Initialize \n      Enabled         =   0   'False\n      Interval        =   1000\n      Left            =   1080\n      Top             =   1080\n   End\n   Begin AIBARCODELib.AiBarcode AiBarcode1 \n      Height          =   735\n      Left            =   120\n      TabIndex        =   1\n      Top             =   720\n      Width           =   1335\n      _Version        =   65536\n      _ExtentX        =   2355\n      _ExtentY        =   1296\n      _StockProps     =   0\n   End\n   Begin VB.Label Label1 \n      Caption         =   \"GymBarcodeReader OCX\"\n      Height          =   375\n      Left            =   120\n      TabIndex        =   0\n      Top             =   120\n      Width           =   1335\n   End\nEnd\nAttribute VB_Name = \"uctlGymBarcodeReader\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = True\nAttribute VB_PredeclaredId = False\nAttribute VB_Exposed = True\n'***************************************************\n'* 処理内容：バーコードリーダー\n'* 作成日  ：2017/03/31\n'* 作成者  ：N.Toyoda\n'* 変更履歴：\n'***************************************************\nOption Explicit\n\n'**************************************************************** プライベート変数定義\nPrivate m_intBarcodeState   As Integer                              'バーコードリーダーの状態(-1:初期化前 0:無効 1:有効)\nPrivate m_GymCmnSysSts      As New GymCmnSysSts.clsGymCmnSysSts\nPrivate m_GymCmnDB          As New GymCmnDB.clsGymCmnDB\nPrivate m_GymCmnMaster      As New GymCmnMaster.clsGymCmnMaster\n\n'***************************************************************** イベント定義\nPublic Event DataEvent(ByVal BDataType As Long, ByVal BDataLen As Long, BData As String)\n\nPrivate Declare Sub Sleep Lib \"kernel32\" (ByVal dwMilliseconds As Long)\n\n'*****************************************************************\n' 機能　　：ユーザーコントロールの初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2017/03/31\n' 変更履歴：\n'*****************************************************************\nPrivate Sub UserControl_Initialize()\n    Const c_strProcName As String = \"UserControl_Initialize\"\nOn Error GoTo ProcErr\n    \n    Dim strBarcodeFlg   As String       'バーコード接続有無 (0:接続無し 1:接続有り)\n    Dim TID_OPT         As String       '自身の機器ＩＤ\n    Dim strOPTNO        As String       '自身の屋外端末No\n    Dim lngRet          As Long         '戻り値\n    \n    'フラグ初期化\n    m_intBarcodeState = -1\n\n    'バーコードリーダーの運用有無フラグを取得\n    Select Case m_GymCmnSysSts.GMN_KikiSyubetsu\n    Case 0, 1:\n        'POS/SSC\n        Call m_GymCmnMaster.GMN_GetSDSET011(\"Barcode_POS_SSC\", strBarcodeFlg)\n    \n    Case 2\n        'OPT\n        \n'Upd Start 2017/07/17 J.Akiba [福井石油 QRクーポン対応]\n'        Call m_GymCmnMaster.GMN_GetSDSET011(\"Barcode_OPT\", strBarcodeFlg)\n        \n        '機器IDの取得\n        TID_OPT = m_GymCmnSysSts.GMN_KikiIdGet()\n        \n        '屋外端末No(機器ID−10)\n        strOPTNO = CStr(CInt(TID_OPT) - 10)\n        \n        lngRet = fun_GetSDDEXT01_BCUMU(strOPTNO, strBarcodeFlg)\n'Upd End 2017/07/17 J.Akiba [福井石油 QRクーポン対応]\n        \n    End Select\n    \n    '運用無しの場合は初期化せず終了\n    If strBarcodeFlg <> \"1\" Then GoTo ProcExit\n    \n    'バーコードリーダーAPIの初期化\n    Call AiBarcodeInit\n    \nProcExit:          '正常終了\n    Exit Sub\n    \nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n    \nEnd Sub\n\n'*****************************************************************\n' 機能　　：バーコードリーダーAPIの初期化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2017/03/31\n' 変更履歴：\n'*****************************************************************\nPrivate Sub AiBarcodeInit()\n    Const c_strProcName As String = \"AiBarcodeInit\"\nOn Error GoTo ProcErr\n    \n    Dim ret     As Long '関数戻り値\n    Dim errCode As Long '詳細エラーポインタ\n    \n    Dim lngCnt  As Long 'リトライカウンタ\n    \n    '初期化\n    lngCnt = 0\n    \n    Do\n        'カウントアップ\n        lngCnt = lngCnt + 1\n        \n        Call GMN_Log(lngCnt & \"回目：バーコードリーダー初期化開始\", c_strProcName, LL_INFO)\n        \n        'APIの初期化\n        ret = AiBarcode1.BcInit(m_GymCmnSysSts.GMN_KikiIdGet, errCode)\n        \n        If ret <> 0 Then\n            Call GMN_Log(lngCnt & \"回目：バーコードリーダー初期化失敗: AiBarcode1.BcInit ret=\" & ret & \" errCode=\" & errCode, c_strProcName, LL_ERROR)\n            Sleep 500\n        Else\n            Call GMN_Log(lngCnt & \"回目：バーコードリーダー初期化成功: AiBarcode1.BcInit ret=\" & ret & \" errCode=\" & errCode, c_strProcName, LL_INFO)\n            \n            m_intBarcodeState = 0\n        End If\n        \n    Loop Until ret = 0 Or lngCnt >= 100\n    \nProcExit:      '正常終了\n    Exit Sub\n    \nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n    \nEnd Sub\n\n'*****************************************************************\n' 機能　　：バーコードリーダーの有効化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2017/03/31\n' 変更履歴：\n'*****************************************************************\nPublic Function BarcodeEnable() As Long\n    Const c_strProcName As String = \"BarcodeEnable\"\nOn Error GoTo ProcErr\n    \n    Dim ret     As Long '関数戻り値\n    Dim errCode As Long '詳細エラーポインタ\n    \n    BarcodeEnable = -1\n    \n    'バーコードリーダーが無効以外の場合は処理を行わない\n    If m_intBarcodeState = 0 Then\n        \n        ret = AiBarcode1.BcEnable(m_GymCmnSysSts.GMN_KikiIdGet, errCode)\n        \n        If ret <> 0 Then\n            Call GMN_Log(\"バーコードリーダー有効化失敗: AiBarcode1.BcEnable ret=\" & ret & \" errCode=\" & errCode, c_strProcName, LL_FATAL)\n        Else\n            'バーコードリーダーの状態を保持\n            m_intBarcodeState = 1\n        End If\n        \n        'エラーコードが-9 or 302以上の場合は機器エラー状況を更新する\n        If errCode = -9 Or errCode >= 302 Then\n            Call fun_UpdSDMNG015_BARR(errCode)\n        End If\n        \n    End If\n    \n    BarcodeEnable = ret\n        \nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　： バーコードリーダーの無効化処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2017/03/31\n' 変更履歴：\n'*****************************************************************\nPublic Function BarcodeDisable() As Long\n    Const c_strProcName As String = \"BarcodeDisable\"\nOn Error GoTo ProcErr\n    \n    Dim ret     As Long '関数戻り値\n    Dim errCode As Long '詳細エラーポインタ\n    \n    BarcodeDisable = -1\n    \n    'バーコードリーダーが有効以外の場合は処理を行わない\n    If m_intBarcodeState = 1 Then\n        \n        ret = AiBarcode1.BcDisable(m_GymCmnSysSts.GMN_KikiIdGet, errCode)\n        \n        If ret <> 0 Then\n            Call GMN_Log(\"バーコードリーダー無効化失敗: AiBarcode1.BcDisable ret=\" & ret & \" errCode=\" & errCode, c_strProcName, LL_FATAL)\n        Else\n            'バーコードリーダーの状態を保持\n            m_intBarcodeState = 0\n        End If\n        \n    End If\n    \n    BarcodeDisable = ret\n    \nProcExit:      '正常終了\n    Exit Function\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Function\n\n'*****************************************************************\n' 機能　　：バーコードデータの通知イベント\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2017/03/31\n' 変更履歴：\n'*****************************************************************\nPrivate Sub AiBarcode1_DataEvent(ByVal BDataType As Long, ByVal BDataLen As Long, BData As String)\n\n    'DataEventイベント\n    RaiseEvent DataEvent(BDataType, BDataLen, BData)\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：機器エラー状況.バーコードリーダーの値をクリアする\n' 引数　　：\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2014/02/07\n' 変更履歴：\n'*****************************************************************\nPublic Function fun_ClearSDMNG015_BARR() As Long\n    Const c_strProcName As String = \"fun_ClearSDMNG015_BARR\"\nOn Error GoTo ProcErr\n    \n    Dim strSQL()    As String\n    Dim ret         As Long\n    Dim errorCode   As Long\n    \n    ret = -1\n    \n    ReDim Preserve strSQL(1)\n    \n    '機器エラー状況.バーコードリーダーを0に更新する\n    strSQL(0) = \"UPDATE SDMNG015 SET \"\n    strSQL(0) = strSQL(0) & \" BARR = 0 \"\n    strSQL(0) = strSQL(0) & \" WHERE TID = \" & CStr(m_GymCmnSysSts.GMN_KikiIdGet)\n    strSQL(0) = strSQL(0) & \";\"\n    \n    ret = m_GymCmnDB.GMN_ExecuteSQL(strSQL(), errorCode)\n    \nProcExit:      '正常終了\n    fun_ClearSDMNG015_BARR = ret\n    Exit Function\n    \nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n    \nEnd Function\n\n'*****************************************************************\n' 機能　　：機器エラー状況.バーコードリーダーの値を更新する\n' 引数　　：バーコードリーダーAPIのエラーコード\n' 戻値　　：\n' 作成者　：N.Toyoda\n' 作成日付：2014/02/07\n' 変更履歴：\n'*****************************************************************\nPrivate Function fun_UpdSDMNG015_BARR(ByVal h_ErrorCode As Long) As Long\n    Const c_strProcName As String = \"fun_UpdSDMNG015_BARR\"\nOn Error GoTo ProcErr\n    \n    Dim strSQL()    As String\n    Dim ret         As Long\n    Dim errorCode   As Long\n    \n    ret = -1\n    \n    ReDim Preserve strSQL(1)\n    \n    '機器エラー状況.バーコードリーダーをエラーコードの値に更新する\n    strSQL(0) = \"UPDATE SDMNG015 SET \"\n    strSQL(0) = strSQL(0) & \" BARR = \" & CStr(h_ErrorCode) & \" \"\n    strSQL(0) = strSQL(0) & \" WHERE TID = \" & CStr(m_GymCmnSysSts.GMN_KikiIdGet)\n    strSQL(0) = strSQL(0) & \";\"\n    \n    ret = m_GymCmnDB.GMN_ExecuteSQL(strSQL(), errorCode)\n    \nProcExit:      '正常終了\n    fun_UpdSDMNG015_BARR = ret\n    Exit Function\n    \nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n    \nEnd Function\n\n\n'*****************************************************************\n' 機能　　：OPTマスタ取得\n' 引数　　：(IN)  h_strOPTNO        :屋外端末No\n'         ：(OUT) h_strBarcodeFlg   :バーコード有無     0：無し 1：有り\n' 戻値　　： 0：正常    -1：異常\n' 作成者  ：J.Akiba\n' 作成日  ：2017/07/17\n' 変更履歴：2017/07/17 J.Akiba      [福井石油 QRクーポン対応]\n'         ：\n'*****************************************************************\nPrivate Function fun_GetSDDEXT01_BCUMU(ByVal h_strOPTNO As String, ByRef h_strBarcodeFlg As String) As Long\n    Const c_strProcName As String = \"fun_GetSDDEXT01_BCUMU\"\nOn Error GoTo ProcErr\n    \n    Dim lngSqlErr   As Long\n    Dim lngVbErr    As Long\n    Dim rcsData     As Recordset\n    \n    Dim strSQL      As String\n    \n    fun_GetSDDEXT01_BCUMU = -1\n    \n    h_strBarcodeFlg = \"0\"\n    \n    'SQL文(現在のフェイズ番号・画面番号のDB値を取得)\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" BCUMU \"\n    strSQL = strSQL & \" FROM SDDEXT01\"                      'OPTマスタ\n    strSQL = strSQL & \" WHERE OPTNO = \" & h_strOPTNO & \"\"   'OPT番号を条件に取得\n    strSQL = strSQL & \";\"\n    \n    'レコード読み込み\n    lngSqlErr = m_GymCmnDB.GMN_GetRecordset(strSQL, rcsData, lngVbErr)\n    If lngVbErr <> 0 Then\n        Call Err.Raise(lngVbErr)\n    End If\n    \n    If lngSqlErr = 0 Then\n        If Not (rcsData Is Nothing) Then\n            If (rcsData.EOF = False) Then\n                If (rcsData!BCUMU = 1) Or (rcsData!BCUMU = 2) Then\n                    h_strBarcodeFlg = \"1\"\n                Else\n                    h_strBarcodeFlg = \"0\"\n                End If\n                \n                '戻値に[0:正常]をセット\n                fun_GetSDDEXT01_BCUMU = 0\n            End If\n        End If\n    ElseIf lngSqlErr = 1 Then\n        '開発時のエラー\n        Call GMN_Log(\"GMN_GetRecordset Err[\" & lngSqlErr & \"]\", c_strProcName, LL_ERROR)\n    Else\n        '致命的なエラー\n        Call GMN_Log(\"GMN_GetRecordset Err[\" & lngSqlErr & \"]\", c_strProcName, LL_ERROR)\n    End If\n    \nProcExit:\n    'Recordsetを閉じる\n    If Not rcsData Is Nothing Then\n        rcsData.Close\n        Set rcsData = Nothing\n    End If\n    \n    Exit Function\n\nProcErr:\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n    \nEnd Function\n",
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.ctl",
					"file_size": 13053,
					"file_write_time": 131647964053601391,
					"settings":
					{
						"buffer_size": 11589,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.vbp",
					"settings":
					{
						"buffer_size": 1608,
						"line_ending": "Windows"
					}
				},
				{
					"contents": "VERSION 5.00\nObject = \"{886410AC-E106-4DF9-909E-EF6D2F379A76}#9.4#0\"; \"GuiFrame.ocx\"\nObject = \"{13DF3BF4-6FF1-4649-99E2-70C5CA3854A1}#1.0#0\"; \"aiBarcode.ocx\"\nBegin VB.Form frmSPG00111 \n   BackColor       =   &H00FFCC99&\n   BorderStyle     =   3  '固定ﾀﾞｲｱﾛｸﾞ\n   ClientHeight    =   6360\n   ClientLeft      =   1485\n   ClientTop       =   1485\n   ClientWidth     =   13830\n   ControlBox      =   0   'False\n   LinkTopic       =   \"Form14\"\n   LockControls    =   -1  'True\n   MaxButton       =   0   'False\n   MinButton       =   0   'False\n   Moveable        =   0   'False\n   ScaleHeight     =   6360\n   ScaleWidth      =   13830\n   ShowInTaskbar   =   0   'False\n   Begin AIBARCODELib.AiBarcode AiBarcode1 \n      Height          =   615\n      Left            =   360\n      TabIndex        =   1\n      Top             =   360\n      Visible         =   0   'False\n      Width           =   615\n      _Version        =   65536\n      _ExtentX        =   1085\n      _ExtentY        =   1085\n      _StockProps     =   0\n   End\n   Begin GuiFrame.uctlGuiFrame uctlGuiFrame1 \n      Height          =   6450\n      Left            =   0\n      TabIndex        =   0\n      Top             =   0\n      Width           =   15360\n      _ExtentX        =   27093\n      _ExtentY        =   11377\n      GuiModel        =   \"\"\n      GuiServerName   =   \"MainWnd\"\n      GuiIniFileName  =   \"\"\n      GuiKeyHookEnabled=   -1  'True\n   End\nEnd\nAttribute VB_Name = \"frmSPG00111\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\nOption Explicit\n'*****************************************************************\n'* 処理内容：レーンモニタ\n'* 作成日  ：2013/03/15\n'* 作成者  ：Y.sekiguchi\n'* 変更履歴：2014/12/17 TBE140912_01_33：後払い対応 N.Aoki\n'*         ：2015/01/07 ﾊﾞｰｺｰﾄﾞOCXを非表示にする (TBE150106_01_193 N.Aoki)\n'*****************************************************************\n'定数---------------------------------------------------\nPrivate Const c_m_gidForm10No As Long = \"111001\"\n'【保留呼出レーンモニタ対応】\nPrivate Const strBtnCRM As String = \"CRM情報\\n表示\"     'CRM情報表示ボタン判定用\nPrivate Const strBtnHoryu As String = \"保留呼出\"        '保留呼出ボタン判定用\nPrivate Const strBtnCancel As String = \"ｷｬﾝｾﾙ\"          'ｷｬﾝｾﾙボタン判定用\nPrivate m_GuiKAK01 As GuiKAK01.clsGuiKAK01              '汎用確認コントロール(処理選択用)\n'【保留呼出レーンモニタ対応】\n'モジュール変数---------------------------------------------------\nPrivate m_KikiSyubetsu As Integer       '機器種別　０：POS　１：SSC　２：OPT（フル）\nPrivate m_iniFileNm1 As String          'ロードするINIファイル名\nPublic m_HoryuFlg As Integer            '保留呼出処理選択フラグ　0:保留呼出処理未選択 1:保留呼出処理選択中\n\n\n'パブリック変数---------------------------------------------------\n#Const DEBUG_MODE = True\n\n'*****************************************************************\n' 機能　　：画面の大きさにあわせコントロールの比率を変化させる。\n' 引数　　：\n' 戻値　　：\n' 作成者　：Miyamoto F.\n' 作成日付：2012/08/28\n' 変更履歴：\n'*****************************************************************\nPrivate Sub sun_ControlRatioSet()\n    Me.Width = 12000\n    Me.Height = 5145\n    Me.Top = 3180\n    Me.Left = 0\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　　: バーコード読み取りイベント\n' 引数 1　　: バーコードタイプ\n' 引数 2　　: バーコードデータ長\n' 引数 3　　: バーコードデータ\n' 戻値　　　:\n' 作成者　　: N.Aoki\n' 作成日付　: 2014/12/17\n' 変更履歴　:\n'*****************************************************************\nPrivate Sub AiBarcode1_DataEvent(ByVal BDataType As Long, ByVal BDataLen As Long, BData As String)\n    Const c_strProcName As String = \"AiBarcode1_DataEvent\"\nOn Error GoTo ProcErr\n\n    Call GMN_Log(BData & \"(\" & CStr(BDataLen) & \")\", c_strProcName, LL_INFO)\n    If BDataLen <> 8 Then\n        Call GMN_Log(\"バーコードデータ長異常(\" & CStr(BDataLen) & \")\", c_strProcName, LL_FATAL)\n        Exit Sub\n    End If\n    Dim rs As Recordset\n    Set rs = fnc_GetHoryuData001(, , CLng(Mid(BData, 4, 4)))\n    If rs.RecordCount = 0 Then\n        '該当レシ−トが無い場合は表示を行なわない\n        Exit Sub\n    End If\n\n    'モードキーウィンドウを非表示に(押せるタイミングがないように)\n    \n    p_ScreenTrans = 2   'レーンモニタから画面遷移中\n\n    Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, False)\n\n    DoEvents\n\n    Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n\n    'レーンモニタ画面を閉じる(先に閉じてあげないとｷｬﾝｾﾙキー押下時にレーンモニタに返ってきてしまう)\n    Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"close_frmSPG00111\")\n    \n    m_HoryuDataCall = 1     '1:保留データ利用中(カード入力)\n    m_HoryuFlg = 1\n    \n    '仮レシートNoで保留データ検索を行なう\n    Call GMN_Log(\"仮レシートNo(\" & Mid(BData, 4, 4) & \")\", c_strProcName, LL_INFO)\n    Call frmSPG00110.sub_HoryuDataInit(, CLng(Mid(BData, 4, 4)))   '仮レシートNoを渡す\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：フォームロード\n' 引数　　：\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2012/10/02\n' 変更履歴：2014/12/17 バーコード・リーダを読み取り有効にする処理を追加(N.Aoki)\n'         ：\n'*****************************************************************\nPrivate Sub Form_Load()\n    Const c_strProcName As String = \"Form_Load\"\nOn Error GoTo ProcErr\n    Call GMN_Log(\"*** SPG00110 *** :<レーンモニター> Start(起動開始) \", c_strProcName, LL_INFO)\n    \n    'フォームサイズの変更\n    Call sub_Init\n\n    'バーコード・リーダを読み取り有効にする 2014/12/17\n    Dim ret As Long\n    Dim ec As Long\n    ret = AiBarcode1.BcInit(m_KikiSyubetsu, ec)\n    If (ret <> 0 Or ec <> 0) Then\n        Call GMN_Log(\"BcInit \" & CStr(ret) & \" \" & CStr(ec), c_strProcName, LL_FATAL)\n    Else\n        ret = AiBarcode1.BcEnable(m_KikiSyubetsu, ec)\n        If (ret <> 0 Or ec <> 0) Then\n            Call GMN_Log(\"BcEnable \" & CStr(ret) & \" \" & CStr(ec), c_strProcName, LL_FATAL)\n        End If\n    End If\n\n'Del Start 2016/07/12 J.Akiba [レーンモニタ動作変更対応]\n'    Call CreateTrigger\n'Del End   2016/07/12 J.Akiba [レーンモニタ動作変更対応]\n\n    'レーンモニター\n    With uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object\n        .KikiSyubetsu = m_KikiSyubetsu                                              '機器種別設定\n        Call .InitLMonitor                                                          '初期表示\n        'DB問い合わせ\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosC\").object.sub_Monitor\n        Call .IniVIsible\n\n    End With\n    \n    \n    'DB監視OCX\n    With uctlGuiFrame1.GUI_GetItem(\"GuiPosC\").object\n        Call .MonitorStart(colSDSET011.Item(\"PosLaneMonRefInterval\"))               '監視開始（SDSET011 -各種設定- から更新間隔を設定。デフォルト3000ms）\n    End With\n    \n    'ガイダンスを表示\n    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, c_m_gidForm10No)\n\n    p_ScreenTrans = 0   '画面遷移中ﾌﾗｸﾞの初期化\n\n    Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n    \n    '安全策として残す\n    'モードキーウィンドウの表示を復活させる(CRM情報表示で消したため)\n    Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n    \n    Call GMN_Log(\"*** SPG00110 *** :<レーンモニター> End(正常起動) \", c_strProcName, LL_INFO)\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：フォームサイズの変更\n' 引数　　：\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2012/10/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_Init()\n    Const c_strProcName As String = \"sub_Init\"\nOn Error GoTo ProcErr\n\n    m_KikiSyubetsu = p_GymCmnSysSts.GMN_KikiSyubetsu\n\n    If m_KikiSyubetsu = 2 Then\n        '画面の大きさにあわせコントロールの比率を変化させる。\n        Call sun_ControlRatioSet\n        m_iniFileNm1 = \"SOG00111.ini\"\n    Else\n        m_iniFileNm1 = \"SPG00111.ini\"\n    End If\n    Call uctlGuiFrame1.GUI_Create(m_iniFileNm1)\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n\n'*****************************************************************\n' 機能　　：フォームアンロード\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Kuriki\n' 作成日付：2012/08/21\n' 変更履歴：2014/12/17 バーコード・リーダを読み取り無効にする処理を追加(N.Aoki)\n'         ：\n'*****************************************************************\nPrivate Sub Form_Unload(Cancel As Integer)\n    Const c_strProcName As String = \"Form_Unload\"\nOn Error GoTo ProcErr\n    \n    'バーコード・リーダを読み取り無効にする 2014/12/17\n    Dim ret As Long\n    Dim ec As Long\n    ret = AiBarcode1.BcDisable(m_KikiSyubetsu, ec)\n    If (ret <> 0 Or ec <> 0) Then\n        Call GMN_Log(\"BcDisable \" & CStr(ret) & \" \" & CStr(ec), c_strProcName, LL_FATAL)\n    End If\n    \n    'ガイダンスのクリア処理\n    Call sub_ClearGuid\n\n    'ガイダンス表示(供給のガイダンス表示処理を呼び出す)\n    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, CStr(frmSPG00110.fnc_GuidanceNoSet))\n\n    '画面クリア\n    uctlGuiFrame1.GUI_Clear\n    \n    If Not (m_GuiKAK01 Is Nothing) Then Set m_GuiKAK01 = Nothing\n    \n    If m_HoryuFlg = 1 Then\n        \n        '保留呼出対応で使用する1回目のカードチェックを無視するフラグをクリアした状態にする\n        m_CardInfoExchange = 0  '最初のカードチェックを無視するため、フラグをクリアする\n        \n        '保留呼出処理選択フラグをクリアする\n        m_HoryuFlg = 0\n        \n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：サブウインドウにメッセージを送信してガイダンスを消去します\n' 引数　　：\n' 戻値　　：\n' 作成者　：E.yamazaki\n' 作成日付：2012/12/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_ClearGuid()\n    Call p_GymCmnGuiFrame.GMN_DispGuid(uctlGuiFrame1, \"\")\nEnd Sub\n\n'*****************************************************************\n' 機能　　：終了処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiEndRequest()\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiEndRequest\"\nOn Error GoTo ProcErr\n\n    'exeの終了\n    Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"close_Form\")\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　： データ受信処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2012/10/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiGetData(ByVal sData As String)\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiGetData(F2)\"\nOn Error GoTo ProcErr\n\n    Dim a_strDataList() As String       '受信データ\n    Dim intLNo As Integer               'レーンNo.\n    Dim intFreeFLG As Integer           '赤枠表示フラグ     ０：赤枠表示不要　１：赤枠表示必要\n    Dim intNWFLG As Integer             '儲かるねっと対象フラグ  ０：儲かるねっと対象外　１：儲かるねっと対象\n    Dim intKDTRECNO As Integer          '給油データレコードＮｏ\n    Dim intFlg As Integer\n    Dim lngNum As Long\n    Dim strText As String\n    Dim strText2 As String\n    Dim intKYUYUSTS As Integer          '計量機ステータス\n    Dim intHORYUCNT As Integer          '保留件数(イベントで受け取った値をパーツに渡すために使用)\n    \n'Upd Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n    Dim intOptFlg       As Integer      'OPT操作フラグ\n    Dim strCardName     As String       'カード名称\n    Dim lngInMoney      As Long         '投入金額\n    Dim lngOilCode      As Long         '油種コード\n    Dim lngHoseNo       As Long         'ホースNo\n    Dim intFixedFlg     As Integer      'プリセット区分\n    Dim curNum          As Currency     '定量または定額\n    Dim lngKINGAKU      As Long         '金額\n    Dim curKYUYURYO     As Currency     '給油量\n    Dim strCardErrDt    As String       'カードエラー情報\n'Upd End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\n    Call GMN_Log(\"他ウィンドウよりデータ受信処理 引数（Data）：[\" & sData & \"]\", c_strProcName, LL_INFO)\n\n    a_strDataList = Split(sData, \",\")\n    Select Case a_strDataList(0)\n\n        '///////////////////////////////////////////////////////////////\n        '//         DB監視OCX（GuiPosC2）から受信                   ////\n        '///////////////////////////////////////////////////////////////\n        \n        \n        '////   操作状況通知    ////\n        Case \"0901\"\n    \n            '【受信データ】 イベントID(0901) , レーンNo. , OPTフラグ\n\n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            intOptFlg = CInt(a_strDataList(2))          'OPT操作フラグ　０：アイドル状態　１：操作中\n            \n            'レーン表示クリア\n            Call sub_Clear(intLNo, intOptFlg)\n            \n            \n        '////   カード関連情報通知  ////\n        Case \"0902\"\n            'カード関連情報通知\n            '【受信データ】イベントID , レーンNo. , カード名称 , 赤枠フラグ , 緑枠フラグ\n\n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n            strCardName = a_strDataList(2)          'カード名称\n'Add Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n            strCardErrDt = a_strDataList(3)         'カード関連エラー情報 SDMNG006 CardErrDt\n            intFreeFLG = CInt(a_strDataList(4))     '赤枠フラグ           SDMNG006 FreeFLG\n            intNWFLG = CInt(a_strDataList(5))       '緑枠フラグ           SDMNG006 NWFLG\n'Add End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\n            'カード関連情報通知\n'Upd Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'            Call sub_CardInfo(intLNo, strCardName)\n            Call sub_CardInfo(intLNo, strCardName, strCardErrDt, intFreeFLG, intNWFLG, sData)\n'Upd End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\n        '////   枠関連    ////\n        Case \"0903\"\n            \n            '【受信データ：定量時】イベントID , レーンNo. , 赤枠フラグ , 緑枠フラグ\n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            intFreeFLG = CInt(a_strDataList(2))         '赤枠フラグ\n            intNWFLG = CInt(a_strDataList(3))           '緑枠フラグ\n            \n            '枠制御\n            Call sub_SetFrame(intLNo, intFreeFLG, intNWFLG)\n\n\n        '////   投入金額情報通知    ////\n        Case \"0904\"\n            \n            intLNo = CInt(a_strDataList(1))        'レーンNo\n            lngInMoney = a_strDataList(2)          '投入金額\n            \n            '投入金額設定\n            Call sub_InMoney(intLNo, lngInMoney)\n            \n            \n        '////  油種    ////\n        Case \"0906\"\n        \n            '【受信データ：定量時】イベントID , レーンNo. , 油種コード\n           \n            '選択油種情報通知\n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n            lngOilCode = CInt(a_strDataList(2))     '油種コード\n            \n            '油種コード設定\n            Call sub_SetOil(intLNo, lngOilCode)\n            \n            \n        '////   プリセット  ////\n        Case \"0907\"\n            'プリセット情報通知\n            \n            '【受信データ：定量時】イベントID , レーンNo. , プリセット区分 , 定量時数量\n            '【受信データ：定額時】イベントID , レーンNo. , プリセット区分 , 定額時金額\n            '【受信データ：満タン、初期値】イベントID , レーンNo. , プリセット区分\n            \n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n            intFixedFlg = CInt(a_strDataList(2))    'プリセット区分\n            \n            If intFixedFlg >= 1 Then\n                \n                curNum = CCur(a_strDataList(3))         '定量または定額\n                'プリセット情報セット\n                Call sub_SetPreset(intLNo, intFixedFlg, curNum)\n            Else\n                'プリセット情報セット\n                Call sub_SetPreset(intLNo, intFixedFlg)\n            End If\n            \n            \n        '////   計量機状況  ////\n        Case \"0908\"\n\n            '【受信データ】 イベントID , レーンNo. , 計量機ステータス , 給油データレコードＮｏ , 緑枠フラグ\n        \n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            intKYUYUSTS = CInt(a_strDataList(2))        '計量機状況 0:ノズル掛､1: ノズル外､3: 給油中､４：給油終了(ﾉｽﾞﾙ掛)、５：給油終了(ﾉｽﾞﾙ外) 9:  通信エラー\n            intKDTRECNO = CInt(a_strDataList(3))        '給油データレコードＮｏ．\n            \n            '計量機情報セット\n            Call sub_SetKYUYUSTS(intLNo, intKYUYUSTS, intKDTRECNO)\n            \n            \n        '////   給油レコードNo.変更通知 ////\n        Case \"0909\"\n        \n            '【受信データ】 イベントID , レーンNo. , 給油データレコードＮｏ\n        \n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            intKDTRECNO = CInt(a_strDataList(2))        '給油データレコードＮｏ．\n\n            Call sub_SetKDTRECNO(intLNo, intKDTRECNO)\n            \n            \n        '////   給油中  ////\n        Case \"0910\"\n        \n            '給油中イベント\n            '【 受信データ】 イベントID , レーンNo. , 計量機ステータス , 金額 , 給油量\n        \n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            lngKINGAKU = CLng(a_strDataList(2))         '金額\n            curKYUYURYO = a_strDataList(3)              '給油量\n\n            Call sub_SetRefueling(intLNo, lngKINGAKU, curKYUYURYO)\n            \n            \n        '////   アプリデータ通知    ////\n        Case \"0911\"\n                    \n            'アプリデータの変更\n            \n            '【受信データ】 イベントID , レーンNo. , アプリデータ\n            Dim lngAplRecNo As Long                     'アプリデータ\n            \n            intLNo = CInt(a_strDataList(1))             'レーンNo.\n            lngAplRecNo = CLng(a_strDataList(2))\n            \n            Call sub_SetAPLRECNO(intLNo, lngAplRecNo)\n            \n            \n        '////  カードエラー    ////\n        Case \"0912\"\n        \n            'カードエラー\n            \n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n'Upd Start 2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n'            strCardErrDt = a_strDataList(2)          'カードエラー情報\n            strCardErrDt = a_strDataList(3)         'カード関連エラー情報 SDMNG006 CardErrDt\n'Upd End   2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n            \n            Call sub_SetCardError(intLNo, strCardErrDt)\n           \n                  \n        '////   通信エラー通知  ////\n        Case \"0913\"\n        \n            '【受信データ】 イベントID , レーンNo. , 計量機状況\n\n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n            intKYUYUSTS = CInt(a_strDataList(2))    '計量機状況\n\n            If intKYUYUSTS = 9 Then\n                '通信エラー通知\n                Call sub_SetCommunicationError(intLNo)\n            End If\n            \n            \n        '【保留呼出レーンモニタ対応】\n        '////   保留件数の表示  ////\n        Case \"0914\"\n            '【受信データ】 イベントID , レーンNo. , 保留件数\n\n            intLNo = CInt(a_strDataList(1))         'レーンNo.\n            intHORYUCNT = CInt(a_strDataList(2))    '保留件数\n\n            '通信エラー通知\n            Call sub_SetHoryuCnt(intLNo, intHORYUCNT)\n                        \n        '【保留呼出レーンモニタ対応】\n       \n        \n        Case Else\n\n    End Select\n\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　　: キー入力処理\n' 引数 1　　: キー名\n' 引数 2　　: キータイプ\n' 引数 3　　: キー値\n' 引数 4　　: テキスト値\n' 戻値　　　:\n' 作成者　　: Y.sekiguchi\n' 作成日付　: 2013/03/22\n' 変更履歴　:\n'*****************************************************************\nPrivate Sub uctlGuiFrame1_GuiKeyClick(ByVal sKeyName As String, ByVal sKeyType As String, ByVal sKeyVal As String, ByVal sTextData As String)\n    Const c_strProcName As String = \"uctlGuiFrame1_GuiKeyClick(F2)\"\nOn Error GoTo ProcErr\n    \n'【保留呼出レーンモニタ対応】\nDim strRecieve() As String  'イベント引数(strRecieve(0):PosL2から発生するイベントキー、strRecieve(1):クリックされたレーン番号)\n\n    Call GMN_Log(\"キー入力処理 引数（KeyName）：[\" & sKeyName & \"]　引数（KeyType）：[\" & sKeyType & \"]　引数（KeyVal）：[\" & sKeyVal & \"]\", c_strProcName, LL_INFO)\n    \n    Set m_GuiKAK01 = CreateObject(\"GuiKAK01.clsGuiKAK01\")\n    strRecieve = Split(sKeyName, \",\")\n                             \n    If p_ScreenTrans > 0 Then\n        Exit Sub\n    End If\n\n                \n    '取消時は保留呼び出し無効\n    If m_HoryuDataCall < 0 Then 'm_HoryuDataCall = -1(取消)\n        Select Case strRecieve(0)\n            'キャンセル\n            Case DMNc_KeyCancel\n            Case \"0201\" '(CRM情報のみあり)\n            Case \"0202\" '(CRM情報＋保留データあり)\n                 strRecieve(0) = \"0201\" 'CRM情報呼び出しに変換\n            Case \"0203\" '(CRM情報なし＋保留データのみ存在)\n                 strRecieve(0) = \"\"     '保留データ呼び出し無効\n        End Select\n    End If\n\n    Select Case strRecieve(0)\n    \n        'キャンセル\n        Case DMNc_KeyCancel\n\n            p_ScreenTrans = 2   'レーンモニタから画面遷移中\n\n            DoEvents\n\n            Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n\n            '画面終了\n            Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"close_frmSPG00111\")\n            \n        '////   レーンモニタークリックイベント  ////(CRM情報のみあり)\n        Case \"0201\"\n\n            'モードキーウィンドウを非表示に(押せるタイミングがないように)\n            \n            p_ScreenTrans = 2   'レーンモニタから画面遷移中\n            \n            Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, False)\n            \n            DoEvents\n\n            Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_INFO)\n\n            '保留データが存在しない場合は、そのままCRM情報の表示を行う\n            p_CRMRecNo = CLng(sKeyVal)\n            \n            '画面表示\n            Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"Show_frmSPG00112\")\n        \n        '////   レーンモニタークリックイベント  ////(CRM情報＋保留データあり)\n        Case \"0202\"\n\n            'モードキーウィンドウを非表示に(押せるタイミングがないように)\n\n            p_ScreenTrans = 2   'レーンモニタから画面遷移中\n            DoEvents\n\n            Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, False)\n            Dim strAns As String\n            strAns = m_GuiKAK01.GMNFun_KakuninMsgStr(\"処理選択\", \"CRM情報の表示または保留呼出を選択してください\", strBtnCRM, strBtnHoryu, strBtnCancel)\n            Call p_GymCmnGuiFrame.GMN_SetTopOrderState(uctlGuiFrame1, True)\n\n            Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, False)\n            \n            If strAns = strBtnCRM Then\n\n                'CRM情報の表示を行う\n                p_CRMRecNo = CLng(sKeyVal)\n                \n                '画面表示\n                Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"Show_frmSPG00112\")\n            ElseIf strAns = strBtnHoryu Then\n\n                'レーンモニタ画面を閉じる(先に閉じてあげないとｷｬﾝｾﾙキー押下時にレーンモニタに返ってきてしまう)\n                Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"close_frmSPG00111\")\n                \n                m_HoryuDataCall = 1     '1:保留データ利用中(カード入力)\n                m_HoryuFlg = 1\n\n                '保留呼出ボタン押下(SPG00110の保留データ表示処理にレーンNoを引数で渡してあげる)\n                Call frmSPG00110.sub_HoryuDataInit(strRecieve(1))\n            \n            Else\n                'ｷｬﾝｾﾙ押下はレーンモニタに戻る\n\n                'モードキーウィンドウを表示する(レーンモニタに戻るため復活させる)\n                \n                p_ScreenTrans = 0   'レーンモニタから画面遷移中\n                \n                Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n                \n                Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, True)\n                \n            End If\n           \n        '////   レーンモニタークリックイベント  ////(CRM情報なし＋保留データのみ存在)\n        Case \"0203\"\n                \n                'モードキーウィンドウを非表示に(押せるタイミングがないように)\n                \n                p_ScreenTrans = 2   'レーンモニタから画面遷移中\n\n                Call p_GymCmnGuiFrame.GMN_SetEnabledCancelKey(uctlGuiFrame1, False)\n\n                DoEvents\n\n                Call GMN_Log(\"p_ScreenTrans:\" & p_ScreenTrans, c_strProcName, LL_FATAL)\n\n                'レーンモニタ画面を閉じる(先に閉じてあげないとｷｬﾝｾﾙキー押下時にレーンモニタに返ってきてしまう)\n                Call uctlGuiFrame1.GUI_PostData2BeforeScreen(\"close_frmSPG00111\")\n                \n                m_HoryuDataCall = 1     '1:保留データ利用中(カード入力)\n                m_HoryuFlg = 1\n                \n                '保留呼出ボタン押下\n                Call frmSPG00110.sub_HoryuDataInit(strRecieve(1))\n                   \n    End Select\n'【保留呼出レーンモニタ対応】\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　： レーン表示クリア (0901)\n' 引数　　：h_intLNo     レーンNo.\n'     　　：h_intOptFlg  OPT操作フラグ\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_Clear(h_intLno As Integer, h_intOptFlg As Integer)\n    Const c_strProcName As String = \"sub_Clear\"\nOn Error GoTo ProcErr\n\n\n    'OPT操作中の場合\n'Upd Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'    If h_intOptFlg = 0 Then\n    If h_intOptFlg = 1 Then\n'Upd End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\n        'アイドル状態\n        '【受信データ】 イベントID(0901) , レーンNo. , OPTフラグ\n\n        '初期化\n        'レーンの指定箇所に情報を設定\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOil(h_intLno, 0)\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO1\", \" \")\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \" \")\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO3\", \" \")\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"AMOUNT\", -1)\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"MONEY\", -1)\n        '【保留呼出レーンモニタ対応】\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"HORYU\", -1)\n        '【保留呼出レーンモニタ対応】\n        \n'Upd Start 2016/07/20 J.Akiba [レーンモニタ変更対応]\n'        '油種カラーの設定\n'        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOil(h_intLno, 0)\n'        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOilColor(h_intLno)\n'\n'        '枠非表示\n'        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOutFrame(h_intLno, 0)\n\n        uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLSelected h_intLno, 0\n        uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"ALL\", 1   '0:灰 1:黒 2:赤\n        \n    ElseIf h_intOptFlg = 2 Then\n        'ＡＰデータレコードセット\n    Else\n        uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState h_intLno, 0\n        uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"ALL\", 0    '0:灰 1:黒 2:赤\n        uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOutFrame h_intLno, 0\n        \n'Upd End   2016/07/20 J.Akiba [レーンモニタ変更対応]\n        \n    End If\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n\n'*****************************************************************\n' 機能　　： カード関連情報通知 (0902)\n' 引数　　：h_intLNo          レーンNo.\n'     　　：h_strCardName   カード名称\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\n'Upd Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'Private Sub sub_CardInfo(h_intLno As Integer, h_strCardName As String)\nPrivate Sub sub_CardInfo(h_intLno As Integer, h_strCardName As String, h_strCardErrDt As String, h_intFreeFLG As Integer, h_intNWFlg As Integer, h_sData As String)\n'Upd End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n    Const c_strProcName As String = \"sub_CardInfo\"\nOn Error GoTo ProcErr\n\n'Add Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n    Dim sInf1   As String\n    Dim sInf2   As String\n    Dim sInf3   As String\n    Dim sText   As String\n    Dim lngRet  As Long\n'Add End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\n'Upd Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'    'レーン情報設定　操作中\n'    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 1)\n\n'    'レーン情報設定\n'    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO1\", h_strCardName)\n\n        If h_strCardErrDt = \"ｶｰﾄﾞｴﾗｰ\" Or h_strCardErrDt = \"ﾈｶﾞｴﾗｰ\" Or h_strCardErrDt = \"ﾓｳｶﾙﾈｯﾄｴﾗｰ\" Then\n            If uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.GetLState(h_intLno) = 0 Or uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.GetLState(h_intLno) = 8 Then      '0:ｱｲﾄﾞﾙ 1:給油許可受付 2:給油許可待ち 3:給油開始待ち/給油中 4:給油停止中(一定時間経過による) 5:給油停止(POSからのﾎﾟﾝﾌﾟﾛｯｸ) 6:給油終了 7:ｴﾗｰ(警告) 8:ｴﾗｰ(注意)\n                uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState h_intLno, 8\n                uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError h_intLno, 0, Format(Date, \"MM/DD \") + Format(Time, \"HH:MM:SS\"), h_strCardErrDt\n                uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.BlinkStart h_intLno\n            End If\n\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData h_intLno, \"INFO1\", h_strCardErrDt\n        Else\n\n            lngRet = uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.GetLError(h_intLno, h_sData, sInf1, sInf2, sInf3, sText)    ' -1:ｸﾘｱ 0:注意ﾚﾍﾞﾙ[ﾌﾟﾘﾝﾀ関連] 1:油種別ｴﾗｰ 2:警告ﾚﾍﾞﾙ[通信異常系] 3:給油OF異常 4:ﾌﾟﾘｾｯﾄ異常 5:ｺﾝﾀﾐ\n            If sInf1 = \"ｶｰﾄﾞｴﾗｰ\" Or sInf1 = \"ﾈｶﾞｴﾗｰ\" Or sInf1 = \"ﾓｳｶﾙﾈｯﾄｴﾗｰ\" Then\n                uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError h_intLno, -1\n            End If\n\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData h_intLno, \"INFO1\", h_strCardName\n        End If\n\n        Call sub_SetFrame(h_intLno, h_intFreeFLG, h_intNWFlg)\n        \n'Upd End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　： 枠制御 (0903)\n' 引数　　：h_intLNo          レーンNo.\n'     　　：h_intFreeFLG    赤枠フラグ\n'     　　：h_intNWFlg      緑枠フラグ\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetFrame(h_intLno As Integer, h_intFreeFLG As Integer, h_intNWFlg As Integer)\n    Const c_strProcName As String = \"sub_SetFrame\"\nOn Error GoTo ProcErr\n\n    If h_intNWFlg = 1 Then\n        '緑枠表示\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOutFrame(h_intLno, 3)\n    ElseIf h_intFreeFLG = 1 Then\n        '赤枠表示\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOutFrame(h_intLno, 2)\n    Else\n        '枠非表示\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOutFrame(h_intLno, 0)\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　： 投入金額情報通知 (0904)\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_lngInMoney  投入金額\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_InMoney(h_intLno As Integer, h_lngInMoney As Long)\n    Const c_strProcName As String = \"sub_InMoney\"\nOn Error GoTo ProcErr\n\n    Dim strText As String           '表示用\n    \n    strText = Format(h_lngInMoney, \"#,###,###\")\n    If strText <> \"\" Then\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO3\", Mid(\"         \", 1, 9 - Len(strText)) & strText & \"円\")\n    Else\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO3\", \" \")\n    End If\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　： 選択油種設定 (0906)\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_lngOilCode  油種コード\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetOil(h_intLno As Integer, h_lngOilCode As Long)\n    Const c_strProcName As String = \"sub_SetOil\"\nOn Error GoTo ProcErr\n\n    '油種コード\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOil(h_intLno, h_lngOilCode)\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n\n'*****************************************************************\n' 機能　　：プリセット情報設定\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_intFixedFlg プリセット区分\n'     　　：h_lngNum      定量または定額\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetPreset(h_intLno As Integer, h_intFixedFlg As Integer, Optional h_lngNum As Currency = -1)\n    Const c_strProcName As String = \"sub_SetPreset\"\nOn Error GoTo ProcErr\n\n\n    Dim strText As String\n    Dim strText2 As String\n\n    Select Case h_intFixedFlg\n    \n        '満タン\n        Case 0\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \"満タン\")\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLPreset(h_intLno, 0)\n            \n        '定量時\n        Case 1\n            \n            strText = Format(h_lngNum, \"##0.00\")\n            strText2 = \"定\" & Mid(\"       \", 1, (7 - Len(strText))) & strText & \"Ｌ\"\n\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", strText2)\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLPreset(h_intLno, 1)\n            \n        '定額時\n        Case 2\n            strText = Format(h_lngNum, \"##,##0\")\n\n            strText2 = \"定\" & Mid(\"       \", 1, (7 - Len(strText))) & strText & \"円\"\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", strText2)\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLPreset(h_intLno, 2)\n        \n        '初期値\n        Case Else\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \" \")\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLPreset(h_intLno, 0)\n\n    End Select\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n\n'*****************************************************************\n' 機能　　：計量機状況設定\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_intKYUYUSTS 計量機情報\n'     　　：h_intKDTRECNO 給油レコードNo.\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetKYUYUSTS(h_intLno As Integer, h_intKYUYUSTS As Integer, h_intKDTRECNO As Integer)\n    Const c_strProcName As String = \"sub_SetKYUYUSTS\"\nOn Error GoTo ProcErr\n\n    Dim intErrorState As Integer\n    Dim strEDate As String\n    Dim strEInfo1 As String\n    Dim strEInfo2 As String\n    Dim strEInfo3 As String\n    Dim strsEText As String\n    \n    'エラー情報取得\n    intErrorState = uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.GetLError(h_intLno, strEDate, strEInfo1, strEInfo2, strEInfo3, strsEText)\n\n    Select Case h_intKYUYUSTS\n    \n        '0:ノズル掛\n        Case 0\n\n            '給油終了\n\n            '操作中状態（通信エラーから回復したときのため）\n            \n            \n            If intErrorState = 2 Then\n                'レーン情報設定\n                Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 1)\n                Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO1\", \" \")\n                Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \" \")\n\n            End If\n'                        '枠なし\n\n        '1: ノズル外\n        Case 1\n    \n            '給油許可待ち\n            \n\n            \n            If h_intKDTRECNO <> 0 Then\n                'レーンの状態を設定 給油許可待ち\n                Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 2)\n    \n                '点滅開始\n                Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.BlinkStart(h_intLno)\n\n\n            End If\n\n'Upd Start 2015/03/18 J.Akiba [St_1249対応]\n'        '3: 給油中\n'        Case 3, 4, 5\n'\n'            '給油中\n'\n'            'レーンの状態を設定 給油中\n'            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 3)\n            \n        '3: 給油中\n        Case 3\n        \n            '給油中\n            'レーンの状態を設定 給油中\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 3)\n            \n'Add Start 2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n            'レーンの指定箇所に情報の文字色を黒に設定\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"AMOUNT\", 1    '0:灰 1:黒 2:赤\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"MONEY\", 1     '0:灰 1:黒 2:赤\n'Add End   2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n            \n        '4:給油終了(ノズル掛)、5:給油終了(ノズル外)\n        Case 4, 5\n        \n'Add Start 2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n            Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 6)\n            \n            'レーンの指定箇所に情報の文字色を黒に設定\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"AMOUNT\", 0    '0:灰 1:黒 2:赤\n            uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"MONEY\", 0     '0:灰 1:黒 2:赤\n'Add End   2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n            \n'Upd End   2015/03/18 J.Akiba [St_1249対応]\n    \n        Case Else\n        \n    End Select\n    \n    '通信エラーから復旧\n    If intErrorState = 2 And h_intKYUYUSTS <> 9 Then\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError(h_intLno, -1)\n    End If\n    \n    Dim wkINFO2 As String\n    \n    'INFO2の情報を取得\n    wkINFO2 = uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.GetLINFO2(h_intLno)\n    \n    'INFO2の情報が「通信状態」かつ給油ステータスが9以外の場合は、INFO2の情報をクリアする\n    If Trim$(wkINFO2) = \"通信障害\" And h_intKYUYUSTS <> 9 Then\n\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \" \")\n\n    End If\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　： 保留データ件数の設定\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_lngOilCode  油種コード\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetHoryuCnt(h_intLno As Integer, h_lngHoryuCnt As Integer)\n    Const c_strProcName As String = \"sub_SetHoryuCnt\"\nOn Error GoTo ProcErr\n    \n    If Not IsNull(h_lngHoryuCnt) Then\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"HORYU\", h_lngHoryuCnt)\n    Else\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"HORYU\", 0)\n    End If\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\nEnd Sub\n\n'*****************************************************************\n' 機能　　：給油レコードNo情報関連通知\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_intKDTRECNO 給油レコードNo.\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetKDTRECNO(h_intLno As Integer, h_intKDTRECNO As Integer)\n    Const c_strProcName As String = \"sub_SetKDTRECNO\"\nOn Error GoTo ProcErr\n\n\n    If h_intKDTRECNO <> 0 Then\n        '油種カラーの設定\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLOilColor(h_intLno)\n        \n    Else\n        'アイドル状態へ\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 0)\n        \n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：給油中情報設定\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_lngKINGAKU  給油時金額\n'     　　：h_curKYUYURYO 給油時数量\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetRefueling(h_intLno As Integer, h_lngKINGAKU As Long, h_curKYUYURYO As Currency)\n    Const c_strProcName As String = \"sub_SetRefueling\"\nOn Error GoTo ProcErr\n    \n    'レーンの指定箇所に情報を設定\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"AMOUNT\", h_curKYUYURYO)       '給油量\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"MONEY\", h_lngKINGAKU)         '金額\n\n'Del Start 2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n''Add Start 2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'    'レーンの指定箇所に情報の文字色を黒に設定\n'    uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"AMOUNT\", 1   '0:灰 1:黒 2:赤\n'    uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLDataColor h_intLno, \"MONEY\", 1   '0:灰 1:黒 2:赤\n''Add End   2016/07/20 J.Akiba [レーンモニタ動作変更対応]\n'Del End   2016/08/04 J.Akiba [レーンモニタ動作変更対応]\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：アプリデータ通知\n' 引数　　：h_intLNo      レーンNo.\n'     　　：h_lngAplRecNo アプリデータ\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetAPLRECNO(h_intLno As Integer, h_lngAplRecNo As Long)\n    Const c_strProcName As String = \"sub_SetAPLRECNO\"\nOn Error GoTo ProcErr\n\n    '給油レコードNo.の設定\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetApirecNo(h_intLno, h_lngAplRecNo)\n    \nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：カードエラー情報\n' 引数　　：h_intLNo        レーンNo.\n'     　　：h_strCardErrDt  カードエラー情報\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetCardError(h_intLno As Integer, h_strCardErrDt As String)\n    Const c_strProcName As String = \"sub_SetCardError\"\nOn Error GoTo ProcErr\n\n\n    'レーン情報設定　操作中\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLState(h_intLno, 1)\n\n\n    'カードエラーの場合\n    If h_strCardErrDt <> \"\" Then\n    \n        'カードエラー\n        \n        'レーン情報設定\n        '【送信データ】 イベントID , レーンNo. , カードエラー情報\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError(h_intLno, 0, , h_strCardErrDt, \" \", \" \", \" \")\n\n    Else\n        'エラークリア\n        Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError(h_intLno, -1)\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：通信エラー設定\n' 引数　　：h_intLNo        レーンNo.\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/03/25\n' 変更履歴：\n'         ：\n'*****************************************************************\nPrivate Sub sub_SetCommunicationError(h_intLno As Integer)\n    Const c_strProcName As String = \"sub_SetCommunicationError\"\nOn Error GoTo ProcErr\n\n    '通信エラー\n    \n    'レーンの指定箇所に情報を設定\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO1\", \"計量機\")\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLData(h_intLno, \"INFO2\", \"通信障害\")\n    \n    'レーンのエラー状態を通信エラーに設定\n    Call uctlGuiFrame1.GUI_GetItem(\"GuiPosLM\").object.SetLError(h_intLno, 2)\n\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\n\nEnd Sub\n",
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00111.frm",
					"file_size": 47805,
					"file_write_time": 131647965166472870,
					"settings":
					{
						"buffer_size": 41768,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"contents": "Attribute VB_Name = \"basSPG00110\"\nOption Explicit\n'*****************************************************************\n'* 処理内容：売上処理標準モジュール\n'* 作成日  ：2012/08/14\n'* 作成者  ：S.Ochiai\n'* 変更履歴：\n'*         ：\n'*****************************************************************\n'定数-------------------------------------------------------------\n\nPublic SKBN As Integer '処理区分\nPublic m_ERR01 As New GuiERR01.clsGuiERR01 'エラーメッセージ\n\nPublic Const C_LogGroup = LG_BUTURYU      'ロググループの設定\n\nPublic Enum EnumGuidanceCode\n\n    ' メインフォーム用\n    gidForm0No = 0           'ガイダンス番号\n    gidForm10No\n    gidForm20No\n    gidForm21No\n    gidForm30No\n    gidForm40No\n    gidForm50No\n    gidForm60No\n    gidForm70No\n    gidForm80No\n    gidForm90No\n    gidForm100No\n    gidForm110No\n    gidForm120No\n    gidForm130No\n    gidForm131No\n    gidForm140No\n    gidForm150No\n    gidForm160No\n    gidForm170No\n    gidForm180No\n    gidForm190No\n    gidForm200No\n    gidForm210No\n    gidForm220No\n    gidForm230No\n    gidForm240No\n    gidForm250No\n    gidForm260No\n    gidForm270No\n    gidForm280No\nEnd Enum\n\nPublic Enum EnumErrorNumber\n    lowerErrorNumber = vbObjectError + 512                  ' エラー開始番号\n\n    cardcheckErrorStart = lowerErrorNumber + 0              ' カードチェック結果エラー\n    shouhinCodeNotFound = lowerErrorNumber + 51             ' 商品コード未登録\n    shouhinCodeZeroInput                                    ' 商品コード未設定\n    barCodeNotFound                                         ' バーコード未登録\n    suuryouZeroInput                                        ' 数量未設定\n\n    TankaKingakuOverFlow                                    ' 単価入力時金額オーバーフロー\n    tankaBaikaHaniGai                                       ' 単価入力時売価範囲エラー\n    kingakuZeroInput                                        ' 金額未設定\n    hoosNoNotFound                                          ' ホース番号不一致\n    hoosNomismatch                                          ' ホースNo不一致\n    azukarikinShortage                                      ' 預り金不足\n\n    meisaiSelectError                                       ' 明細選択エラー\n    kakariinCodeNotFound                                    ' 係員コード未登録\n    kakariinCodeZeroInput                                   ' 係員コード未設定\n    horyuuHaita                                             ' 保留データ選択他で使用中\n    hojyokubunMukou                                         ' 無効補助区分\n\n    cardcheckProcessError                                   ' カードチェックプロセス異常\n    customerDisplayError                                    ' カスタマディスプレイ異常\n    nebikizumiError                                         ' 値引き済み\n    nebikigakuOver                                          ' 値引き額がオーバー\n    nebikiMeisai                                            ' 前明細が値引き明細\n\n    nebikiIchiError                                         ' 確定明細での値引き操作\n    hanbaiseigenShouhin                                     ' 販売制限商品\n    suuryouSeigenOver                                       ' 数量販売制限値オーバー\n    kingakuSeigenOver                                       ' 金額販売制限値オーバー\n    tankaSeigenOver                                         ' 単価入力時金額販売制限値オーバー\n\n    PLUTankaZeroInput                                       ' ＰＬＵ新規登録時単価ゼロ入力\n    currentNebikiMeisai                                     ' 現在明細が値引き明細\n    tankNoNotFound                                          ' タンク番号不一致\n    zeiKubunError                                           ' 税区分エラー\n    barCodeFusei                                            ' 不正バーコード\n    barCodeError                                            ' バーコードＣＤエラー\n\n    pointhukaSyouhin                                        ' ポイント利用不可商品\n    kigenError                                              ' 有効期限エラー\n    yusyuTaisyoError                                        ' 対象油種エラー\n    syousuNyuryokuError                                     ' 小数入力エラー\n    crmNebikiOver                                           ' CRM値引残数量オーバー\n    tankaMisettei                                           ' 単価未設定\n    yusyuSouiError                                          ' 油種相違エラー\n    CardLessError                                           ' 販売制限商品(カードレス)\n    hoosNoNotSettei                                         ' ホース番号未設定エラー\n\n    barCodeCDError = vbObjectError + 512 + 91               ' バーコードＣＤエラー\n    azukariInputFuka                                        ' 預かり金入力不可\n    nebikiFukaKokyakuError                                  ' 値引き不可顧客\n    horyuBarCodeError                                       ' 保留バーコードエラー\n    horyuNotFound                                           ' 保留データ該当なし\n\n    tsurisenFusoku                                          ' 釣銭不足\n    tsurisenKiMisetsuzokuError                              ' 釣銭機未接続エラー\n    tsurisenKiTsuushinError                                 ' 釣銭機通信障害\n    tsurisenKiOtherError                                    ' 釣銭機その他エラー\n    denNoNotFound                                           ' 該当伝票なし\n\n    masterDown                                              ' 90:マスタ機ダウン中\n    shiharaiKubunError                                      ' 91:支払区分入力エラー\n    bunkatsuKaisuError                                      ' 92:分割回数入力エラー\n    shouninBangouError                                      ' 93:承認番号入力エラー\n    bonusDateError                                          ' 94:ボーナス期間エラー\n\n    horyuDualCallError                                      ' 95:保留二重呼出エラー\n    precZanError                                            ' 96:プリカ残高エラー\n    GokeiOver                                               ' 97:販売合計オーバー\n    TouyuSethanbai                                          ' 98:灯油セット販売\n\n    hojyokubunMukou2                                        ' 無効補助区分\n    PrinterError = 111                                      ' 111～119までプリンタステータスの内容でリザーブ\n    '120～は[CRMEnumErrorNumber]参照\n\n    InputHidukeError = 140               ' 140:日付入力エラー\n\n    TokuyakutenError = 150                                   ' 150～:特約店仕様でのエラー\n'    koushinNoInputErr                                       ' 更新№未入力\n'    koushinNoHaniErr                                        ' 更新№範囲入力(01～99)\n'    EinouKbnInputErr                                        ' 営農区分未入力\n'    EinouKbnHaniErr                                         ' 営農区分範囲入力\n\n    AzukariInputErr                                         ' 預かり金入力エラー\n\n    AuthoriNumberErr                                        ' 承認番号エラー\n\n    NebikiZanCheckErr                                       '値引き算チェックエラー\n\n    UrigokeiCheckErr                                        '売上総額制限金額チェックエラー\n\n    RiyouPointError                                         '利用ポイント入力エラー(絶対値比較用)\n\n    CRMError = 170\n\n    NetPricaError = 180\n    NetPricaSyoriKbnError                                   'ネットプリカ 処理区分第二段以降エラー\n    NetPricaBalanceMessageError                             'ネットプリカ 残高照会依頼エラー\n    NetPricaBalanceError                                    'ネットプリカ 残高不足エラー\n    NetPricaTansyukuCardError                               'ネットプリカ 短縮カード未登録エラー\n    NetPricaBalanceZeroError                                'ネットプリカ 残高ゼロエラー Add 2016/07/04\n\n    HaitaError = 190                                        'ローカル排他エラー\n\n    QrChkError = 200                                        'ＱＲクーポンエラー\n    QrChkTOKCDError                                         'ＱＲクーポン 特約店コードエラー\n    QrChkSSCDError                                          'ＱＲクーポン ＳＳコードエラー\n    QrChkIDCDError                                          'ＱＲクーポン 識別コードエラー\n    QrChkPERIODFError                                       'ＱＲクーポン 有効期間前エラー\n    QrChkPERIODTError                                       'ＱＲクーポン 有効期間切れエラー\n    QrChkCANCELError                                        'ＱＲクーポン 検索訂正済みエラー\n    QrChkMAXCNTError                                        'ＱＲクーポン 利用回数上限エラー\n    QrChkACCEPTError                                        'ＱＲクーポン 有効カード外エラー\n    QrChkOTHERError                                         'ＱＲクーポン その他エラー\n\n    upperErrorNumber                                        ' エラー終了番号\nEnd Enum\n\nPublic Enum CRMEnumErrorNumber\n    CRMlowerErrorNumber = vbObjectError + 512               ' エラー開始番号\n\n    CRMTsuushinError1 = CRMlowerErrorNumber + 120           ' 120:顧客購買実績問合せエラー(通信異常)\n    CRMTsuushinError2                                       ' 121:顧客購買実績問合せエラー\n    CRMHaitaError                                           ' 122:顧客購買実績問合せ排他エラー\n    CRMCardLockError                                        ' 123:顧客購買実績問合せカードロックエラー\n    CRMRiyouPointError                                      ' 124:利用ポイント値エラー\n    CRMRiyouPointless                                       ' 125:利用ポイント値less\n    CRMSurGokeiOver                                         ' 126:値引数量オーバー\n    CRMHoryuSuryoOver                                       ' 127:保留数量が値引可能数量残オーバー\n    CRMHoryuYobidashiFuka                                   ' 128:保留呼出不可データ\n\n    CRMupperErrorNumber                                        ' エラー終了番号\nEnd Enum\n\n'モジュール変数---------------------------------------------------\n\n'パブリック変数---------------------------------------------------\nPublic p_GymCmnCal      As New GymCmnCal.clsGymCmnCal   '金額計算\nPublic p_GymCmnDB       As New clsGymCmnDB\nPublic p_GymCmnSysSts   As New clsGymCmnSysSts\nPublic p_GymCmnMaster   As New clsGymCmnMaster\nPublic p_GymCmnValChk   As New clsGymCmnValChk\nPublic p_GymCmnGuiFrame As New clsGymCmnGuiFrame\nPublic colSDSET011      As Collection\nPublic p_ScreenTrans    As Long                         '0:初期値 1:カード入力からの遷移中 2:レーンモニタから遷移中 3:CRM会員情報から遷移中 -1:CRM会員情報表示中(カード読取イベント無効)\nPublic p_CdchkCard2     As GymCdChk.CARD2               'プリカ単価保持用\nPublic p_CdchkFlg       As Boolean                      'プリカ単価保持有無\n\n'*****************************************************************\n' 機能　　：起動処理\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/06/19\n' 変更履歴：\n'         ：\n'*****************************************************************\nSub Main()\n\n    Const c_strProcName As String = \"Main\"\n\n    Call GMN_Log(\"EXE起動:ARG=\" & Command(), c_strProcName, LL_INFO)\n\n    'exeの引数に処理区分が引き渡される\n    SKBN = CInt(Command())\n\n    '---------------各種設定読込---------------\n    Call sub_Configuration\n\n    frmSPG00110.Show   'メインウィンドウ(モードキー無し)\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：売上処理の制御に必要な各種設定項目を取得します\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/08/21\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Sub sub_Configuration()\n    Const c_strProcName As String = \"sub_Configuration\"\nOn Error GoTo ProcErr\n\n    Dim ret         As Long\n    Dim t_PRESETVAL As String\n\n    Set colSDSET011 = New Collection\n\n    '係員入力\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"ServicemanInput\", t_PRESETVAL)\n\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"ServicemanInput\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"ServicemanInput\")\n    End If\n\n    '係員入力方法\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"ServicemanInputType\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"ServicemanInputType\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"ServicemanInputType\")\n    End If\n\n    '取引単価表示\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"UriTankaDisplay\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"UriTankaDisplay\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"UriTankaDisplay\")\n    End If\n\n    '店内釣銭機エラー処理\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"InsideTsuriMachineErr\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"InsideTsuriMachineErr\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"InsideTsuriMachineErr\")\n    End If\n\n    'サービス形態\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"ServiceForm\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"ServiceForm\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"ServiceForm\")\n    End If\n\n    '月内給油値引残数判定有無\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CRM_NebikiZanCheck\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"CRM_NebikiZanCheck\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"CRM_NebikiZanCheck\")\n    End If\n\n    '月内給油値引残数対象油種\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CRM_NebikiZanChkOil\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"CRM_NebikiZanChkOil\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"CRM_NebikiZanChkOil\")\n    End If\n\n    '釣銭機No.取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"PosTsurisenkiNo\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"PosTsurisenkiNo\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"PosTsurisenkiNo\")\n    End If\n\n    '預かり金入力有無取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"AzukariKinInputNone\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"AzukariKinInputNone\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"AzukariKinInputNone\")\n    End If\n\n    'ネガ・オーソリ運用有無取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"NegaAuthFlg\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"NegaAuthFlg\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"NegaAuthFlg\")\n    End If\n\n    'レーンモニター更新間隔取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"PosLaneMonRefInterval\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(3000, \"PosLaneMonRefInterval\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"PosLaneMonRefInterval\")\n    End If\n\n    'アイドル画面指定(0:アイドル画面、1:レーンモニタ画面)\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"IdolScreenKBN\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"IdolScreenKBN\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"IdolScreenKBN\")\n    End If\n\n    'netプリカ残高有効日数\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"NetPricaEnableDays\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(0, \"NetPricaEnableDays\")\n    Else\n        Call colSDSET011.Add(CLng(t_PRESETVAL), \"NetPricaEnableDays\")\n    End If\n\n    'カード会員時の変換カード分類（ナヴィ用）\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CardKaiinBunrui\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"000\", \"CardKaiinBunrui\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"CardKaiinBunrui\")\n    End If\n\n    'NWCRMS運用有無取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"NWCRMS_UNYO\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"0\", \"NWCRMS_UNYO\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"NWCRMS_UNYO\")\n    End If\n\n    'FKVIPカード分類取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"FKVipCardBunrui\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"000\", \"FKVipCardBunrui\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"FKVipCardBunrui\")\n    End If\n\n    'FKCMカード分類取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"FKCoopCardBunrui\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"000\", \"FKCoopCardBunrui\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"FKCoopCardBunrui\")\n    End If\n\n    'プリカ残高有時の支払方法選択取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CRM_ZanAriKessai\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"0\", \"CRM_ZanAriKessai\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"CRM_ZanAriKessai\")\n    End If\n\n    'クーポン値引可否フラグ取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CouponFlg\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"0\", \"CouponFlg\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"CouponFlg\")\n    End If\n\n'Add Start 2017/10/12 J.Akiba [矢萩商店 現地不具合報告対応]\n    'CRM会員カード名称\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"CNAME_CRM\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"0\", \"CNAME_CRM\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"CNAME_CRM\")\n    End If\n'Add End   2017/10/12 J.Akiba [矢萩商店 現地不具合報告対応]\n\n    'バーコードリーダー運用有無（POS/SSC）取得\n    t_PRESETVAL = \"\"\n    ret = p_GymCmnMaster.GMN_GetSDSET011(\"Barcode_POS_SSC\", t_PRESETVAL)\n    '不正値だった場合\n    If ret < 0 Or IsNumeric(t_PRESETVAL) = False Then\n        Call colSDSET011.Add(\"0\", \"Barcode_POS_SSC\")\n    Else\n        Call colSDSET011.Add(t_PRESETVAL, \"Barcode_POS_SSC\")\n    End If\n\nProcExit:      '正常終了\n    Exit Sub\n\nProcErr:       '異常終了\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Sub\n\n'*****************************************************************\n' 機能　　：処理区分別有効補助区分の取得\n' 引数　　：\n' 戻値　　：\n' 作成者　：S.Ochiai\n' 作成日付：2012/11/22\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GetSDSET007(ByVal h_SYORIKBN1 As Long, ByVal h_HOJOKBN As Long) As Recordset\n\n    Dim strSQL          As String\n    Dim rs              As Recordset\n    Dim ret             As Long\n    Dim errorCode       As Long\n\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" SYORIKBN1    AS 処理区分第一段        ,\"\n    strSQL = strSQL & \" HOJOKBN      AS 有効補助区分          ,\"\n    strSQL = strSQL & \" SIGN         AS サイン                ,\"\n    strSQL = strSQL & \" PASS         AS パスワード可否        ,\"\n    strSQL = strSQL & \" SUBINPUT     AS 補助入力オーダー有無  ,\"\n    strSQL = strSQL & \" SUBHOJOKBN   AS 補助入力時変換補助区分\"\n    strSQL = strSQL & \" FROM   SDSET007\"\n    strSQL = strSQL & \" WHERE  SDSET007.SYORIKBN1    = \" & h_SYORIKBN1 & \"\"\n    strSQL = strSQL & \" AND    SDSET007.HOJOKBN      = \" & h_HOJOKBN & \"\"\n    strSQL = strSQL & \";\"\n\n    ret = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, errorCode)\n\n    If ret = 0 Then     '正常時\n        Set fnc_GetSDSET007 = rs\n    ElseIf ret = 1 Then '開発時のエラー時\n    Else                '致命的なエラー時\n    End If\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：終了条件の取得\n' 引数　　：\n' 戻値　　：\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/04/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GetSDSET005SYURYO() As Integer\n\n    Dim strSQL          As String\n    Dim rs              As Recordset\n    Dim ret             As Long\n    Dim errorCode       As Long\n    Dim intRet          As Integer\n\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" SDSET005.SYURYO      AS 終了条件\"\n    strSQL = strSQL & \" FROM   SDSET005\"\n    strSQL = strSQL & \" WHERE  SDSET005.SYORIKBN1    = \" & SKBN & \"\"\n    strSQL = strSQL & \";\"\n\n    ret = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, errorCode)\n\n    If ret = 0 Then     '正常時\n        If rs.EOF = False Then\n            intRet = p_GymCmnValChk.GMN_NuLLComvNm(rs.Fields(\"終了条件\").Value)\n        End If\n    ElseIf ret = 1 Then '開発時のエラー時\n    Else                '致命的なエラー時\n    End If\n\n    fnc_GetSDSET005SYURYO = intRet\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：商品マスタから消費税課税区分を取得\n' 引数　　：h_strGOODSCD - 商品コード\n' 戻値　　：-1 - 対象コードなし\n' 戻値　　：他 - 消費税課税区分\n' 作成者　：Y.sekiguchi\n' 作成日付：2013/04/04\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GetSDSYO001TAXKBN(h_strGOODSCD As String) As Integer\n\n    Dim strSQL          As String\n    Dim rs              As Recordset\n    Dim ret             As Long\n    Dim errorCode       As Long\n    Dim intRet          As Integer\n\n    intRet = -1\n\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" SDSYO001.TAXKBN      AS 消費税課税区分\"\n    strSQL = strSQL & \" FROM   SDSYO001\"\n    strSQL = strSQL & \" WHERE  SDSYO001.GOODSCD    = '\" & h_strGOODSCD & \"'\"\n    strSQL = strSQL & \";\"\n\n    ret = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, errorCode)\n\n    If ret = 0 Then     '正常時\n        If rs.EOF = False Then\n            intRet = p_GymCmnValChk.GMN_NuLLComvNm(rs.Fields(\"消費税課税区分\").Value)\n        End If\n    ElseIf ret = 1 Then '開発時のエラー時\n    Else                '致命的なエラー時\n    End If\n\n    fnc_GetSDSYO001TAXKBN = intRet\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：係員初期値の取得\n' 引数　　：\n' 戻値　　：\n' 作成者　：M.Shimizu\n' 作成日付：2013/5/10\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GetSDMNG002() As Recordset\n\n    Dim strSQL          As String\n    Dim rs              As Recordset\n    Dim ret             As Long\n    Dim errorCode       As Long\n\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" SDMNG002.STAFFCD            AS 現在係員コード, \"\n    strSQL = strSQL & \" IFNULL(SDKAK001.STAFFNM,'') AS 係員名          \"\n    strSQL = strSQL & \" FROM   SDMNG002\"\n    strSQL = strSQL & \" LEFT JOIN SDKAK001 \"\n    strSQL = strSQL & \" ON SDMNG002.STAFFCD = SDKAK001.STAFFCD \"\n    strSQL = strSQL & \";\"\n\n    ret = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, errorCode)\n\n    If ret = 0 Then     '正常時\n        Set fnc_GetSDMNG002 = rs\n    ElseIf ret = 1 Then '開発時のエラー時\n    Else                '致命的なエラー時\n    End If\n\nEnd Function\n\n'*****************************************************************\n' 機能　　：レプリケーション設定の取得\n' 引数　　：\n' 戻値　　：\n' 作成者　：Akiba\n' 作成日付：2014/05/02\n' 変更履歴：\n'         ：\n'*****************************************************************\nPublic Function fnc_GetSDMDLREP(ByVal h_strTableID As String, ByRef h_rsSDMDLREP As Recordset) As Long\n    Const c_strProcName As String = \"fnc_GetSDMDLREP\"\nOn Error GoTo ProcErr\n\n    Dim strSQL              As String\n    Dim rs                  As Recordset\n    Dim lngRet              As Long\n    Dim lngerrorCode        As Long\n\n    fnc_GetSDMDLREP = -1\n\n    strSQL = \"\"\n    strSQL = strSQL & \" SELECT \"\n    strSQL = strSQL & \" TOUCH_COUNT \"\n    strSQL = strSQL & \" FROM SDMDLREP\"\n    strSQL = strSQL & \" where TABLE_NAME = '\" & h_strTableID & \"' \"\n    strSQL = strSQL & \" ;\"\n\n    lngRet = p_GymCmnDB.GMN_GetRecordset(strSQL, rs, lngerrorCode)\n\n    If (lngRet = 0) Then\n        If Not (rs Is Nothing) Then\n            If (rs.RecordCount > 0) Then\n                Set h_rsSDMDLREP = rs\n                fnc_GetSDMDLREP = 0\n            End If\n        End If\n    ElseIf lngRet = 1 Then  '開発時のエラー時\n    Else                    '致命的なエラー時\n    End If\n\nProcExit:      '正常終了\n\n    Exit Function\n\nProcErr:       '異常終了\n\n    Call GMN_Log(\"異常終了\", c_strProcName, LL_FATAL)\n    Resume ProcExit\n\nEnd Function\n",
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.bas",
					"file_size": 25961,
					"file_write_time": 131647761069955325,
					"settings":
					{
						"buffer_size": 23145,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"contents": "[CONTROL_MAIN]\nHEIGHT=430\nWIDTH=1024\nENABLED=1\nBACKCOLOR=FFCC99\nBORDERSTYLE=0\n\n;処理選択メニュー（アイドル画面）\n[GuiSMN01.uctlGuiSMN01_1]\nNAME=SMN01\nLEFT=0\nTOP=88\nCUST=2\nSYORIKBN1=11\nVISIBLE=1\nAUTOLOAD=1\nModeNo=0\n\n;未処理データ一覧\n[GuiHRY01.uctlGuiHRY01_1]\nNAME=HRY01\nLNAME=HRY01\nLEFT=0\nTOP=0\nVISIBLE=0\nAUTOLOAD=1\n\n;処理選択メニュー（明細データ表示入力）\n[GuiSMN05.uctlGuiSMN05_1]\nNAME=SMN05\nLEFT=0\nTOP=88\nVISIBLE=0\nAUTOLOAD=1\nModeNo=0\n\n;処理選択メニュー（決済カード入力）\n[GuiSMN03.uctlGuiSMN03_1]\nNAME=SMN03\nLEFT=0\nTOP=88\nVISIBLE=0\nAUTOLOAD=1\nModeNo=0\n\n;テンキー\n[GuiTKY01v2.uctlGuiTKY01_1]\nNAME=tky01\nLEFT= 784\nTOP = 12\nBACKCOLOR=FFCC99\nVISIBLE=0\nAUTOLOAD=1\n\n;CRM残高表示\n[GuiZDK01.uctlGuiZDK01_1]\nNAME=ZDK01\nLEFT= 5\nTOP = 345\nVISIBLE=0\nAUTOLOAD=1\n\n;元日付入力\n[GuiSKB01.uctlGuiSKB01_1]\nNAME=SKB01\nLEFT= 0\nTOP = 0\nVISIBLE=0\nAUTOLOAD=1\n\n;カード入力\n[GuiCRD01.uctlGuiCRD01_1]\nNAME=Crd01\nLEFT= 5\nTOP = 5\nStyle=1\nVISIBLE=1\nAUTOLOAD=1\n\n;利用ポイント入力\n[GuiRPI01.uctlGuiRPI01_1]\nNAME=RPI01\nLEFT= 0\nTOP = 0\nLNAME=RPI01\nVISIBLE=0\nAUTOLOAD=1\n\n;利用ポイント入力(プリカ併用)\n[GuiRPI02.uctlGuiRPI02_1]\nNAME=RPI02\nLEFT= 0\nTOP = 0\nLNAME=RPI02\nVISIBLE=0\nAUTOLOAD=1\n\n;カード入力(２枚入力用)\n[GuiCRD01.uctlGuiCRD01_2]\nNAME=Crd02\nLEFT= 5\nTOP = 5\nStyle=1\nVISIBLE=0\nAUTOLOAD=1\n\n;係員入力\n[GuiKKT01.uctlGuiKKT01_1]\nNAME=KKT01\nLEFT= 533\nTOP = 32\nTEXT=係員\nErrMsgNo=110061\nLNAME=KKT01\nMaxLength=4\nVISIBLE=0\nAUTOLOAD=1\n\n;係員入力パネル\n[GuiKKM01.uctlGuiKKM01_1]\nNAME=KKM01\nLEFT= 5\nTOP = 85\nVISIBLE=0\nAUTOLOAD=1\n\n;ネガチェック入力\n[GuiAUT01.uctlGuiAUT02_1]\nNAME=AUT02\nLEFT= -1500\nTOP = -1500\nVISIBLE=1\nAUTOLOAD=1\n\n;物流明細入力\n[GuiBUT01.uctlGuiBUT011_1]\nNAME=BUT01\nLEFT= 5\nTOP = 105\nVISIBLE=0\nAUTOLOAD=1\n\n;オーソリ情報入力\n[GuiAUT01.uctlGuiAUT01_1]\nNAME=AUT01\nLEFT= 0\nTOP = 105\nCaptionActiveBackColor=800000\nCaptionActiveForeColor=FFFFFF\nCaptionDeactivateBackColor=800000\nCaptionDeactivateForeColor=FFFFFF\nVISIBLE=0\nAUTOLOAD=1\n\n;クレジット取消コントロール\n[GuiSKB02.uctlGuiSKB02_1]\nNAME=SKB02\nLEFT= 5\nTOP = 5\n;CaptionActiveBackColor=FFCC99\n;CaptionActiveForeColor=FFCCCC\n;CaptionDeactivateBackColor=FF00FF\n;CaptionDeactivateForeColor=FFFF00\n;CaptionWidth=150\n;TextBoxActiveBackColor=000000\n;TextBoxActiveForeColor=0000FF\n;TextBoxDeactivateBackColor=FFCC99\n;TextBoxDeactivateForeColor=0000FF\n;TextBoxWidth=150\nBorderStyle=1\nVISIBLE=0\nAUTOLOAD=1\n\n;PLU登録コントロール\n[GuiPLU01.uctlGuiPLU01_1]\nNAME=PLU01\nLEFT= 0\nTOP = 105\nCaptionActiveBackColor=800000\nCaptionActiveForeColor=FFFFFF\nCaptionDeactivateBackColor=800000\nCaptionDeactivateForeColor=FFFFFF\nVISIBLE=0\nAUTOLOAD=1\n\n;預り金入力コントロール\n[GuiAZK01.uctlGuiAZK01_1]\nNAME=AZK01\nLEFT= 0\nTOP = 105\nCaptionActiveBackColor=800000\nCaptionActiveForeColor=FFFFFF\nCaptionDeactivateBackColor=800000\nCaptionDeactivateForeColor=FFFFFF\nVISIBLE=0\nAUTOLOAD=1\n\n;預り金入力発行オーダー\n[GuiTXT02v2.uctlGuiTXT02_99]\nNAME=txt02_99\nLEFT= 1024\nTOP = 430\nTEXT=発行オーダー\nLNAME=txt02_99\nInputType=0\nMaxLength=1\nTextBoxWidth=124\nVISIBLE=1\nAUTOLOAD=1\n\n[_ITEM_LIST]\nSMN01=SMN01\nSMN05=SMN05\nSMN03=SMN03\ntky01=tky01\nZDK01=ZDK01\nZDKTotalCaption01=ZDK01,lblTotalCaption(0)\nZDKTotalCaption02=ZDK01,lblTotalCaption(1)\nZDKTotalCaption03=ZDK01,lblTotalCaption(2)\nZDKGuiTXT01=ZDK01,uctlGuiTXT01(0)\nZDKGuiTXT02=ZDK01,uctlGuiTXT01(1)\nZDKGuiTXT03=ZDK01,uctlGuiTXT01(2)\nSKB01=SKB01\nHRY01=HRY01\ntxtHRY01=HRY01,txtGuiTXT02(0)\nCrd01=Crd01\ntxtCard01=Crd01,txtCardNo\nRPI01=RPI01\ntxtRiyouPoint=RPI01,txtRiyouPoint\ntxtRiyouPointDummy=RPI01,txtDummy\nRPI02=RPI02\ntxtRiyouPoint2=RPI02,txtRiyouPoint\ntxtRiyouPointDummy2=RPI02,txtDummy\nCrd02=Crd02\ntxtCard02=Crd02,txtCardNo\ntxtJitsuShaban=Crd01,txtSyaban\ntxtCard02_JitsuShaban=Crd02,txtSyaban\nKKT01=KKT01\nKKM01=KKM01\nAUT02=AUT02\ntxtAUTHIDE=AUT02,txtGuiTXT02(0)\nBUT01=BUT01\ntxtShoCD1=BUT01,uctlGuiBUT012(0),txtShouhinCode\ntxtKazeiKubun1=BUT01,uctlGuiBUT012(0),txtKazeiKubun\ntxtHoseNo1=BUT01,uctlGuiBUT012(0),txtHoseNo\ntxtSuuryou1=BUT01,uctlGuiBUT012(0),txtSuuRyou\ntxtBaikaTanka1=BUT01,uctlGuiBUT012(0),txtBaikaTanka\ntxtKingaku1=BUT01,uctlGuiBUT012(0),txtKingaku\ntxtShouhinName1=BUT01,uctlGuiBUT012(0),txtShouhinName\ntxtGenkaTanka1=BUT01,uctlGuiBUT012(0),txtGenkaTanka\ntxtShoCD2=BUT01,uctlGuiBUT012(1),txtShouhinCode\ntxtKazeiKubun2=BUT01,uctlGuiBUT012(1),txtKazeiKubun\ntxtHoseNo2=BUT01,uctlGuiBUT012(1),txtHoseNo\ntxtSuuryou2=BUT01,uctlGuiBUT012(1),txtSuuRyou\ntxtBaikaTanka2=BUT01,uctlGuiBUT012(1),txtBaikaTanka\ntxtKingaku2=BUT01,uctlGuiBUT012(1),txtKingaku\ntxtShouhinName2=BUT01,uctlGuiBUT012(1),txtShouhinName\ntxtGenkaTanka2=BUT01,uctlGuiBUT012(1),txtGenkaTanka\ntxtShoCD3=BUT01,uctlGuiBUT012(2),txtShouhinCode\ntxtKazeiKubun3=BUT01,uctlGuiBUT012(2),txtKazeiKubun\ntxtHoseNo3=BUT01,uctlGuiBUT012(2),txtHoseNo\ntxtSuuryou3=BUT01,uctlGuiBUT012(2),txtSuuRyou\ntxtBaikaTanka3=BUT01,uctlGuiBUT012(2),txtBaikaTanka\ntxtKingaku3=BUT01,uctlGuiBUT012(2),txtKingaku\ntxtShouhinName3=BUT01,uctlGuiBUT012(2),txtShouhinName\ntxtGenkaTanka3=BUT01,uctlGuiBUT012(2),txtGenkaTanka\nAUT01=AUT01\ntxtAUT01=AUT01,txtGuiTXT02(0)\ntxtAUT02=AUT01,txtGuiTXT02(1)\nSKB02=SKB02\ntxtMotoHizuke=SKB02,txtMotoHizuke\ntxtMotoTTsuban=SKB02,txtMotoTTsuban\ntxtAUT03=AUT01,txtGuiTXT02(2)\ntxtAUT04=AUT01,txtGuiTXT02(3)\nPLU01=PLU01\ntxtPLU01=PLU01,txtGuiTXT02(0)\ntxtSelling=PLU01,txtGuiTXT02(1)\ntxt02_99=txt02_99\nAZK01=AZK01\ntxtAZK01=AZK01,txtGuiTXT02(0)\ntxt02_99=txt02_99\n",
					"file": "/C/Users/nakaima/Documents/GitHub/Gemini/ENV/C/Tatsuno/GM/GYMAPL/INI/SPG00110.ini",
					"file_size": 5541,
					"file_write_time": 131643510526546794,
					"settings":
					{
						"buffer_size": 5067,
						"line_ending": "Windows",
						"scratch": true
					}
				},
				{
					"contents": "VB6.0 tips\n\nログ出力\nCall GMN_Log(\"log内容”, \"object名\", LL_FATAL)\nCall GMN_Log(\"”, \"\", LL_FATAL)\n\nSubとFunction\nSubは返り値なし、Functionは返り値あり。\n\n_ は途中改行、直前に半角スペースが必要。\n",
					"file": "/C/Users/nakaima/work/memo/VB6.0_tips.txt",
					"file_size": 207,
					"file_write_time": 131642496372697357,
					"settings":
					{
						"buffer_size": 154,
						"line_ending": "Windows",
						"scratch": true
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 173.0,
				"last_filter": ":remove",
				"selected_items":
				[
					[
						":remove",
						"Package Control: Remove Package"
					],
					[
						":install",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":indent",
						"Indentation: Reindent Lines"
					],
					[
						":spaces",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":vb",
						"Set Syntax: VB.NET"
					],
					[
						":traili",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":trailing",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":trailin",
						"Trailing Spaces: Delete Trailing Spaces"
					],
					[
						":close",
						"Preferences: Package Control Settings – User"
					],
					[
						":enco",
						"ConvertToUTF8: Reload with Encoding"
					],
					[
						":reload",
						"ConvertToUTF8: Reload with Encoding"
					],
					[
						"Package Control: install package",
						"Package Control: Install Package"
					]
				],
				"width": 609.0
			},
			"console":
			{
				"height": 219.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/C/Users/nakaima/Documents/GitHub/Gemini",
				"/C/Users/nakaima/work/memo"
			],
			"file_history":
			[
				"/C/Users/nakaima/work/memo/画面一覧.txt",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GuiBUT01/GuiBUT012.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GuiBUT01/GuiBUT011.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00130/SPG00130.frm",
				"/C/Users/nakaima/Documents/master_be_dev [a17ad83]/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
				"/C/Users/nakaima/Documents/master_be_dev [a17ad83]/Gemini/SRC/GYM/01_SP/SPG00230/SPG00230.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.bas",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00230/SPG00230.frm",
				"/C/Users/nakaima/work/memo/merge用めも.txt",
				"/C/Users/nakaima/work/memo/VB6.0_tips.txt",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/trailing_spaces.sublime-settings",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/Package Control.sublime-settings",
				"/C/Users/nakaima/work/merge対応/マージ済みソース/SPG00110.frm",
				"/C/Users/nakaima/work/merge対応/マージ済みソース/SPG00110 - コピー.frm",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00111.frm",
				"/E/LogFiles/gm012715.log",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.ctl",
				"/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.vbp",
				"/C/Users/nakaima/Desktop/spg00110.txt",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/Default/Default (Windows).sublime-keymap",
				"/C/Users/nakaima/Desktop/Sublime Text Build 3143 x64/Data/Packages/User/Default (Windows).sublime-keymap"
			],
			"find":
			{
				"height": 29.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"dataevent",
					"Case",
					"dataevent",
					"2018",
					"inputpart_s",
					"ctlshocd1",
					"DMNc_keyhakkou",
					"2018",
					"m_TankaFlg",
					"ctlBaikaTanka1",
					"fnc_setBarcodeProductInfo",
					"dataevent",
					"fnc_inputPart_S",
					"ButSeniFlg",
					"ctlBaikaTanka1",
					"入力した",
					"fnc_BarcodeReaderReEnable",
					"dataevent",
					"ctlBaikaTanka1",
					"Proc",
					"fnc",
					"00050",
					"Case",
					"nakaima",
					"SKBN",
					"nakaima",
					"colSDSET011",
					"p_gymcmnmaster",
					"nakaima",
					"colSDSET011",
					"m_pluBcd",
					"With",
					"Dataevent",
					"nakaima",
					"fnc_inputPart_B",
					"sub_DisplayModeNo",
					"fnc_setPluInfo",
					"Dataevent",
					"fnc_inputPart_B",
					"m_CTL_PROPERTYS",
					"sub_DisplayModeNo",
					"fnc_inputPart_B",
					"戻る",
					"ctlShouhinName3",
					"sub_InputModeEnable",
					"ctlStart",
					"fnc_inputPart_B",
					"戻る",
					"ctlPLU01",
					"ctlshocd1",
					"m_Order",
					"nakaima",
					"fun",
					"funbtn",
					"uctlguibut012",
					"uctlguibut",
					"uctlguibtn",
					"funBtnNo",
					"bunbtnno",
					"funbtnno",
					"fnc_inputPart_B",
					"ctlshocd1",
					"商品コード入力",
					"GMN_Log",
					"fnc_setBarcodeProductInfo",
					"Log",
					"nakaima",
					"rcsData",
					"fnc_setBarcodeProductInfo",
					"nakaima",
					"QrChkInit",
					"nakaima",
					"ctlshocd1",
					"m_Order",
					"nakaima",
					"Log",
					"00230",
					"spg00110.",
					"spg00050",
					"spg00030",
					"gymtrancnv.",
					"gymprd01.",
					"guibut062.ctl",
					"guibut062ctl",
					"gui062.ctl",
					"guibut01.ctl",
					"guibut01",
					"Qr",
					"rpi01",
					"trancnv",
					"guicrd01",
					"vbp",
					"guicrd01.ctl",
					"gtuicrd01.ctl",
					".sql",
					"00050",
					"0005",
					"spg00050",
					"0050",
					"110.frm",
					"230.frm",
					"TranCnv.cls",
					"TranConv.cls",
					"prd01.cls",
					"prd01.bas",
					"but062.ctl",
					"guibut012.ctl",
					"15400.bas",
					"15400",
					"230.vbp",
					"00230.bas",
					"00230.vbp",
					"00110.vbp",
					"00110.bas",
					"00110.",
					"00050",
					"00050.bas",
					"00050",
					"00110.bas",
					"00110.frm",
					"spg00030.frm",
					"geReg.bat",
					"00230.ini",
					"110.ini",
					"GuiBUT011",
					"00030.frm",
					"GuiCRD01.ctl",
					"spg00110.vbp"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"Suuryou3",
					"Suuryou2",
					"Suuryou1",
					"ShoCD3",
					"ShoCD2",
					"ShoCD1",
					"ctlShoCD"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "C:\\Users\\nakaima\\Documents\\GitHub\\Gemini"
				},
				{
					"path": "C:\\Users\\nakaima\\work\\memo"
				}
			],
			"groups":
			[
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/C/Users/nakaima/work/memo/merge用めも.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4502,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "Shift_JIS",
									"revert_to_scratch": true,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.frm",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 295316,
								"regions":
								{
								},
								"selection":
								[
									[
										277827,
										277827
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "SHIFT_JIS",
									"revert_to_scratch": true,
									"syntax": "Packages/VBScript/VBScript.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 119228.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.ctl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11589,
								"regions":
								{
								},
								"selection":
								[
									[
										5189,
										5189
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "SHIFT_JIS",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 66451.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/10_PARTS/GymBarcodeReader/GymBarcodeReader.vbp",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1608,
								"regions":
								{
								},
								"selection":
								[
									[
										1218,
										1218
									]
								],
								"settings":
								{
									"is_init_dirty_state": false,
									"origin_encoding": "ASCII",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00111.frm",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 41768,
								"regions":
								{
								},
								"selection":
								[
									[
										889,
										889
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "SHIFT_JIS",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 9656.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/SRC/GYM/01_SP/SPG00110/SPG00110.bas",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 23145,
								"regions":
								{
								},
								"selection":
								[
									[
										17165,
										17165
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "CP932",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 236410.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/C/Users/nakaima/Documents/GitHub/Gemini/ENV/C/Tatsuno/GM/GYMAPL/INI/SPG00110.ini",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5067,
								"regions":
								{
								},
								"selection":
								[
									[
										3535,
										3535
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "SHIFT_JIS",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 3809.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/C/Users/nakaima/work/memo/VB6.0_tips.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 154,
								"regions":
								{
								},
								"selection":
								[
									[
										59,
										17
									]
								],
								"settings":
								{
									"in_converting": true,
									"is_init_dirty_state": false,
									"origin_encoding": "SHIFT_JIS",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 27.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,2,3,-1,-1,-1,-1,902,111,100,1676",
			"project": "",
			"replace":
			{
				"height": 53.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"gymbarcodereader.vbp",
						"Gemini\\SRC\\GYM\\10_PARTS\\GymBarcodeReader\\GymBarcodeReader.vbp"
					],
					[
						"gymbarcodereader.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GymBarcodeReader\\GymBarcodeReader.ctl"
					],
					[
						"spg000111.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00111.frm"
					],
					[
						"spg00110.bas",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.bas"
					],
					[
						"spg00110.ini",
						"Gemini\\ENV\\C\\Tatsuno\\GM\\GYMAPL\\INI\\SPG00110.ini"
					],
					[
						"guibut012.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GuiBUT01\\GuiBUT012.ctl"
					],
					[
						"guibut011.ctl",
						"Gemini\\SRC\\GYM\\10_PARTS\\GuiBUT01\\GuiBUT011.ctl"
					],
					[
						"spg00110.f",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"spg01030.fr",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00130\\SPG00130.frm"
					],
					[
						"00110.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"spg00110.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00110\\SPG00110.frm"
					],
					[
						"00230.frm",
						"Gemini\\SRC\\GYM\\01_SP\\SPG00230\\SPG00230.frm"
					],
					[
						"merge",
						"memo\\merge用めも.txt"
					],
					[
						"mer",
						"memo\\merge用めも.txt"
					],
					[
						"vb",
						"memo\\VB6.0_tips.txt"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 207.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 33,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
